
CANBUS_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800b0d4  0800b0d4  0001b0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b15c  0800b15c  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800b15c  0800b15c  0001b15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b164  0800b164  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b164  0800b164  0001b164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b168  0800b168  0001b168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800b16c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f40  20000148  0800b2b4  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001088  0800b2b4  00021088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9d7  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047d5  00000000  00000000  0003eb4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  00043328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00044b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a50  00000000  00000000  00046200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022912  00000000  00000000  0006cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d756a  00000000  00000000  0008f562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166acc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000656c  00000000  00000000  00166b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000148 	.word	0x20000148
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800b0bc 	.word	0x0800b0bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000014c 	.word	0x2000014c
 8000200:	0800b0bc 	.word	0x0800b0bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 feec 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81c 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 faaa 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 fa88 	bl	8000a2c <MX_DMA_Init>
  MX_CAN1_Init();
 800051c:	f000 f8d4 	bl	80006c8 <MX_CAN1_Init>
  MX_RTC_Init();
 8000520:	f000 f96a 	bl	80007f8 <MX_RTC_Init>
  MX_SPI1_Init();
 8000524:	f000 f9c2 	bl	80008ac <MX_SPI1_Init>
  MX_FATFS_Init();
 8000528:	f006 fcd8 	bl	8006edc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800052c:	f00a f852 	bl	800a5d4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000530:	f000 f878 	bl	8000624 <MX_ADC1_Init>
  MX_CAN2_Init();
 8000534:	f000 f8fe 	bl	8000734 <MX_CAN2_Init>
  MX_SPI2_Init();
 8000538:	f000 f9ee 	bl	8000918 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800053c:	f000 fa22 	bl	8000984 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000540:	f000 fa4a 	bl	80009d8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000544:	f000 f92a 	bl	800079c <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x40>
	...

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f00a fda6 	bl	800b0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemClock_Config+0xd0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a28      	ldr	r2, [pc, #160]	; (800061c <SystemClock_Config+0xd0>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b26      	ldr	r3, [pc, #152]	; (800061c <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a22      	ldr	r2, [pc, #136]	; (8000620 <SystemClock_Config+0xd4>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80005a8:	2305      	movs	r3, #5
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b2:	2301      	movs	r3, #1
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c4:	23a8      	movs	r3, #168	; 0xa8
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 f833 	bl	8004644 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005e4:	f000 fb0c 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	2102      	movs	r1, #2
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fc2f 	bl	8003e68 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000610:	f000 faf6 	bl	8000c00 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	463b      	mov	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_ADC1_Init+0x98>)
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x9c>)
 800063a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ADC1_Init+0x98>)
 800063e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000642:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_ADC1_Init+0x98>)
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_ADC1_Init+0x98>)
 8000672:	2201      	movs	r2, #1
 8000674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_ADC1_Init+0x98>)
 8000680:	2201      	movs	r2, #1
 8000682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_ADC1_Init+0x98>)
 8000686:	f000 fec5 	bl	8001414 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000690:	f000 fab6 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_ADC1_Init+0x98>)
 80006a6:	f000 fef9 	bl	800149c <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b0:	f000 faa6 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000164 	.word	0x20000164
 80006c0:	40012000 	.word	0x40012000
 80006c4:	0f000001 	.word	0x0f000001

080006c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_CAN1_Init+0x64>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_CAN1_Init+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_CAN1_Init+0x64>)
 80006d4:	2215      	movs	r2, #21
 80006d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_CAN1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_CAN1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_CAN1_Init+0x64>)
 80006e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_CAN1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_CAN1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_CAN1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_CAN1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_CAN1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_CAN1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_CAN1_Init+0x64>)
 8000718:	f001 f8de 	bl	80018d8 <HAL_CAN_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000722:	f000 fa6d 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001ac 	.word	0x200001ac
 8000730:	40006400 	.word	0x40006400

08000734 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_CAN2_Init+0x60>)
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_CAN2_Init+0x64>)
 800073c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_CAN2_Init+0x60>)
 8000740:	2210      	movs	r2, #16
 8000742:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_CAN2_Init+0x60>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_CAN2_Init+0x60>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_CAN2_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_CAN2_Init+0x60>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_CAN2_Init+0x60>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_CAN2_Init+0x60>)
 8000764:	2200      	movs	r2, #0
 8000766:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_CAN2_Init+0x60>)
 800076a:	2200      	movs	r2, #0
 800076c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_CAN2_Init+0x60>)
 8000770:	2200      	movs	r2, #0
 8000772:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_CAN2_Init+0x60>)
 8000776:	2200      	movs	r2, #0
 8000778:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_CAN2_Init+0x60>)
 800077c:	2200      	movs	r2, #0
 800077e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_CAN2_Init+0x60>)
 8000782:	f001 f8a9 	bl	80018d8 <HAL_CAN_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800078c:	f000 fa38 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001d4 	.word	0x200001d4
 8000798:	40006800 	.word	0x40006800

0800079c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C2_Init+0x50>)
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <MX_I2C2_Init+0x54>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C2_Init+0x50>)
 80007a8:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x58>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C2_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_I2C2_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_I2C2_Init+0x50>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_I2C2_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_I2C2_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_I2C2_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_I2C2_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_I2C2_Init+0x50>)
 80007da:	f001 ff0b 	bl	80025f4 <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 fa0c 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200001fc 	.word	0x200001fc
 80007f0:	40005800 	.word	0x40005800
 80007f4:	000186a0 	.word	0x000186a0

080007f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_RTC_Init+0xac>)
 8000812:	4a25      	ldr	r2, [pc, #148]	; (80008a8 <MX_RTC_Init+0xb0>)
 8000814:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_RTC_Init+0xac>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_RTC_Init+0xac>)
 800081e:	227f      	movs	r2, #127	; 0x7f
 8000820:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_RTC_Init+0xac>)
 8000824:	22ff      	movs	r2, #255	; 0xff
 8000826:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_RTC_Init+0xac>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_RTC_Init+0xac>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_RTC_Init+0xac>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_RTC_Init+0xac>)
 800083c:	f004 f986 	bl	8004b4c <HAL_RTC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f9db 	bl	8000c00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800084a:	2300      	movs	r3, #0
 800084c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800084e:	2300      	movs	r3, #0
 8000850:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000852:	2300      	movs	r3, #0
 8000854:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	480f      	ldr	r0, [pc, #60]	; (80008a4 <MX_RTC_Init+0xac>)
 8000866:	f004 f9e7 	bl	8004c38 <HAL_RTC_SetTime>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000870:	f000 f9c6 	bl	8000c00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000874:	2301      	movs	r3, #1
 8000876:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000878:	2301      	movs	r3, #1
 800087a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800087c:	2301      	movs	r3, #1
 800087e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000880:	2300      	movs	r3, #0
 8000882:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	2201      	movs	r2, #1
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_RTC_Init+0xac>)
 800088c:	f004 fa6e 	bl	8004d6c <HAL_RTC_SetDate>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000896:	f000 f9b3 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000250 	.word	0x20000250
 80008a8:	40002800 	.word	0x40002800

080008ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_SPI1_Init+0x64>)
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <MX_SPI1_Init+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_SPI1_Init+0x64>)
 80008b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_SPI1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_SPI1_Init+0x64>)
 80008d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI1_Init+0x64>)
 80008f8:	220a      	movs	r2, #10
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_SPI1_Init+0x64>)
 80008fe:	f004 fb5a 	bl	8004fb6 <HAL_SPI_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000908:	f000 f97a 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000270 	.word	0x20000270
 8000914:	40013000 	.word	0x40013000

08000918 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_SPI2_Init+0x64>)
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <MX_SPI2_Init+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_SPI2_Init+0x64>)
 8000924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000928:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_SPI2_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_SPI2_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_SPI2_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_SPI2_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_SPI2_Init+0x64>)
 8000944:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000948:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_SPI2_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_SPI2_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_SPI2_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_SPI2_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_SPI2_Init+0x64>)
 8000964:	220a      	movs	r2, #10
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_SPI2_Init+0x64>)
 800096a:	f004 fb24 	bl	8004fb6 <HAL_SPI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000974:	f000 f944 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200002c8 	.word	0x200002c8
 8000980:	40003800 	.word	0x40003800

08000984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_USART1_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009bc:	f004 fb84 	bl	80050c8 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f91b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000380 	.word	0x20000380
 80009d4:	40011000 	.word	0x40011000

080009d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_USART3_UART_Init+0x50>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 8000a10:	f004 fb5a 	bl	80050c8 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a1a:	f000 f8f1 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200003c4 	.word	0x200003c4
 8000a28:	40004800 	.word	0x40004800

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	203a      	movs	r0, #58	; 0x3a
 8000a54:	f001 f917 	bl	8001c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a58:	203a      	movs	r0, #58	; 0x3a
 8000a5a:	f001 f930 	bl	8001cbe <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b59      	ldr	r3, [pc, #356]	; (8000bec <MX_GPIO_Init+0x180>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a58      	ldr	r2, [pc, #352]	; (8000bec <MX_GPIO_Init+0x180>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b56      	ldr	r3, [pc, #344]	; (8000bec <MX_GPIO_Init+0x180>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b52      	ldr	r3, [pc, #328]	; (8000bec <MX_GPIO_Init+0x180>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a51      	ldr	r2, [pc, #324]	; (8000bec <MX_GPIO_Init+0x180>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b4f      	ldr	r3, [pc, #316]	; (8000bec <MX_GPIO_Init+0x180>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b4b      	ldr	r3, [pc, #300]	; (8000bec <MX_GPIO_Init+0x180>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a4a      	ldr	r2, [pc, #296]	; (8000bec <MX_GPIO_Init+0x180>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b48      	ldr	r3, [pc, #288]	; (8000bec <MX_GPIO_Init+0x180>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b44      	ldr	r3, [pc, #272]	; (8000bec <MX_GPIO_Init+0x180>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a43      	ldr	r2, [pc, #268]	; (8000bec <MX_GPIO_Init+0x180>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <MX_GPIO_Init+0x180>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b3d      	ldr	r3, [pc, #244]	; (8000bec <MX_GPIO_Init+0x180>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a3c      	ldr	r2, [pc, #240]	; (8000bec <MX_GPIO_Init+0x180>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <MX_GPIO_Init+0x180>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PC0_Pin|GPIO_PC1_Pin|GPIO_PC3_Pin|GPIO_PC7_Pin
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f641 318b 	movw	r1, #7051	; 0x1b8b
 8000b14:	4836      	ldr	r0, [pc, #216]	; (8000bf0 <MX_GPIO_Init+0x184>)
 8000b16:	f001 fd53 	bl	80025c0 <HAL_GPIO_WritePin>
                          |GPIO_PC8_Pin|GPIO_PC9_Pin|GPIO_PC11_Pin|GPIO_PC12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_A8_GPIO_Port, GPIO_A8_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	4834      	ldr	r0, [pc, #208]	; (8000bf4 <MX_GPIO_Init+0x188>)
 8000b22:	f001 fd4d 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_PD2_GPIO_Port, GPIO_PD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <MX_GPIO_Init+0x18c>)
 8000b2c:	f001 fd48 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PB4_Pin|GPIO_PB7_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2190      	movs	r1, #144	; 0x90
 8000b34:	4831      	ldr	r0, [pc, #196]	; (8000bfc <MX_GPIO_Init+0x190>)
 8000b36:	f001 fd43 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_PC13_Pin GPIO_PC6_Pin */
  GPIO_InitStruct.Pin = GPIO_PC13_Pin|GPIO_PC6_Pin;
 8000b3a:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0x184>)
 8000b50:	f001 fbba 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_PC0_Pin GPIO_PC1_Pin GPIO_PC3_Pin GPIO_PC7_Pin
                           GPIO_PC8_Pin GPIO_PC9_Pin GPIO_PC11_Pin GPIO_PC12_Pin */
  GPIO_InitStruct.Pin = GPIO_PC0_Pin|GPIO_PC1_Pin|GPIO_PC3_Pin|GPIO_PC7_Pin
 8000b54:	f641 338b 	movw	r3, #7051	; 0x1b8b
 8000b58:	617b      	str	r3, [r7, #20]
                          |GPIO_PC8_Pin|GPIO_PC9_Pin|GPIO_PC11_Pin|GPIO_PC12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <MX_GPIO_Init+0x184>)
 8000b6e:	f001 fbab 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_A8_Pin */
  GPIO_InitStruct.Pin = GPIO_A8_Pin;
 8000b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_A8_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <MX_GPIO_Init+0x188>)
 8000b8c:	f001 fb9c 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_PA15_Pin */
  GPIO_InitStruct.Pin = GPIO_PA15_Pin;
 8000b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_PA15_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <MX_GPIO_Init+0x188>)
 8000ba6:	f001 fb8f 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_PD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PD2_Pin;
 8000baa:	2304      	movs	r3, #4
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_PD2_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_GPIO_Init+0x18c>)
 8000bc2:	f001 fb81 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_PB4_Pin GPIO_PB7_Pin */
  GPIO_InitStruct.Pin = GPIO_PB4_Pin|GPIO_PB7_Pin;
 8000bc6:	2390      	movs	r3, #144	; 0x90
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <MX_GPIO_Init+0x190>)
 8000bde:	f001 fb73 	bl	80022c8 <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020c00 	.word	0x40020c00
 8000bfc:	40020400 	.word	0x40020400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <HAL_ADC_MspInit+0xe4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d15b      	bne.n	8000d36 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000cee:	2314      	movs	r3, #20
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <HAL_ADC_MspInit+0xec>)
 8000d02:	f001 fae1 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d06:	230f      	movs	r3, #15
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <HAL_ADC_MspInit+0xf0>)
 8000d1a:	f001 fad5 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <HAL_ADC_MspInit+0xf4>)
 8000d32:	f001 fac9 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3730      	adds	r7, #48	; 0x30
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40012000 	.word	0x40012000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020400 	.word	0x40020400

08000d54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a42      	ldr	r2, [pc, #264]	; (8000e7c <HAL_CAN_MspInit+0x128>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d136      	bne.n	8000de4 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d76:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <HAL_CAN_MspInit+0x12c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a40      	ldr	r2, [pc, #256]	; (8000e80 <HAL_CAN_MspInit+0x12c>)
 8000d7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d80:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <HAL_CAN_MspInit+0x12c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d10d      	bne.n	8000da4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a3c      	ldr	r2, [pc, #240]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a35      	ldr	r2, [pc, #212]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	482a      	ldr	r0, [pc, #168]	; (8000e88 <HAL_CAN_MspInit+0x134>)
 8000dde:	f001 fa73 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000de2:	e047      	b.n	8000e74 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <HAL_CAN_MspInit+0x138>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d142      	bne.n	8000e74 <HAL_CAN_MspInit+0x120>
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_CAN_MspInit+0x12c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <HAL_CAN_MspInit+0x12c>)
 8000df6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_CAN_MspInit+0x12c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10d      	bne.n	8000e1c <HAL_CAN_MspInit+0xc8>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	6313      	str	r3, [r2, #48]	; 0x30
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_CAN_MspInit+0x130>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e54:	2360      	movs	r3, #96	; 0x60
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e64:	2309      	movs	r3, #9
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <HAL_CAN_MspInit+0x134>)
 8000e70:	f001 fa2a 	bl	80022c8 <HAL_GPIO_Init>
}
 8000e74:	bf00      	nop
 8000e76:	3730      	adds	r7, #48	; 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40006400 	.word	0x40006400
 8000e80:	20000408 	.word	0x20000408
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40006800 	.word	0x40006800

08000e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a21      	ldr	r2, [pc, #132]	; (8000f34 <HAL_I2C_MspInit+0xa4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d13c      	bne.n	8000f2c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_I2C_MspInit+0xa8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_I2C_MspInit+0xa8>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_I2C_MspInit+0xa8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed4:	2312      	movs	r3, #18
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4814      	ldr	r0, [pc, #80]	; (8000f3c <HAL_I2C_MspInit+0xac>)
 8000eec:	f001 f9ec 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f00:	2309      	movs	r3, #9
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <HAL_I2C_MspInit+0xac>)
 8000f0c:	f001 f9dc 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_I2C_MspInit+0xa8>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_I2C_MspInit+0xa8>)
 8000f1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_I2C_MspInit+0xa8>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40005800 	.word	0x40005800
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b092      	sub	sp, #72	; 0x48
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	223c      	movs	r2, #60	; 0x3c
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a f8ab 	bl	800b0ac <memset>
  if(hrtc->Instance==RTC)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_RTC_MspInit+0x4c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d111      	bne.n	8000f84 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f60:	2308      	movs	r3, #8
 8000f62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 f99a 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f7a:	f7ff fe41 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_RTC_MspInit+0x50>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3748      	adds	r7, #72	; 0x48
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40002800 	.word	0x40002800
 8000f90:	42470e3c 	.word	0x42470e3c

08000f94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <HAL_SPI_MspInit+0x144>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d15a      	bne.n	800106c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a47      	ldr	r2, [pc, #284]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8000fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b45      	ldr	r3, [pc, #276]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a40      	ldr	r2, [pc, #256]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000fee:	23b0      	movs	r3, #176	; 0xb0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ffe:	2305      	movs	r3, #5
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4835      	ldr	r0, [pc, #212]	; (80010e0 <HAL_SPI_MspInit+0x14c>)
 800100a:	f001 f95d 	bl	80022c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001010:	4a35      	ldr	r2, [pc, #212]	; (80010e8 <HAL_SPI_MspInit+0x154>)
 8001012:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001016:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800101a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 800101e:	2240      	movs	r2, #64	; 0x40
 8001020:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001022:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001028:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 800102a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800104e:	4825      	ldr	r0, [pc, #148]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001050:	f000 fe50 	bl	8001cf4 <HAL_DMA_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800105a:	f7ff fdd1 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a20      	ldr	r2, [pc, #128]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001062:	649a      	str	r2, [r3, #72]	; 0x48
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <HAL_SPI_MspInit+0x150>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800106a:	e031      	b.n	80010d0 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <HAL_SPI_MspInit+0x158>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d12c      	bne.n	80010d0 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_SPI_MspInit+0x148>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_SPI_MspInit+0x148>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_SPI_MspInit+0x148>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_SPI_MspInit+0x148>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c0:	2305      	movs	r3, #5
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4809      	ldr	r0, [pc, #36]	; (80010f0 <HAL_SPI_MspInit+0x15c>)
 80010cc:	f001 f8fc 	bl	80022c8 <HAL_GPIO_Init>
}
 80010d0:	bf00      	nop
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40013000 	.word	0x40013000
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	20000320 	.word	0x20000320
 80010e8:	40026440 	.word	0x40026440
 80010ec:	40003800 	.word	0x40003800
 80010f0:	40020400 	.word	0x40020400

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a33      	ldr	r2, [pc, #204]	; (80011e0 <HAL_UART_MspInit+0xec>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12d      	bne.n	8001172 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800114e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001160:	2307      	movs	r3, #7
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	481f      	ldr	r0, [pc, #124]	; (80011e8 <HAL_UART_MspInit+0xf4>)
 800116c:	f001 f8ac 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001170:	e031      	b.n	80011d6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_UART_MspInit+0xf8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d12c      	bne.n	80011d6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80011b4:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c6:	2307      	movs	r3, #7
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <HAL_UART_MspInit+0xfc>)
 80011d2:	f001 f879 	bl	80022c8 <HAL_GPIO_Init>
}
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	; 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40004800 	.word	0x40004800
 80011f0:	40020800 	.word	0x40020800

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f8a4 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <DMA2_Stream2_IRQHandler+0x10>)
 800124e:	f000 fdff 	bl	8001e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000320 	.word	0x20000320

0800125c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <OTG_FS_IRQHandler+0x10>)
 8001262:	f001 fc62 	bl	8002b2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000904 	.word	0x20000904

08001270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129a:	490e      	ldr	r1, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b0:	4c0b      	ldr	r4, [pc, #44]	; (80012e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012be:	f7ff ffd7 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f009 fecf 	bl	800b064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff f91f 	bl	8000508 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012cc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 80012d8:	0800b16c 	.word	0x0800b16c
  ldr r2, =_sbss
 80012dc:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 80012e0:	20001088 	.word	0x20001088

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_Init+0x40>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_Init+0x40>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_Init+0x40>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 fcad 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	200f      	movs	r0, #15
 8001318:	f000 f808 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff fc76 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x54>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fcc5 	bl	8001cda <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 fc8d 	bl	8001c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	2000040c 	.word	0x2000040c

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000040c 	.word	0x2000040c

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008

08001414 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e033      	b.n	8001492 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fc12 	bl	8000c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800145a:	f023 0302 	bic.w	r3, r3, #2
 800145e:	f043 0202 	orr.w	r2, r3, #2
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f93a 	bl	80016e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
 8001482:	e001      	b.n	8001488 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1c>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e105      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x228>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	d925      	bls.n	8001514 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68d9      	ldr	r1, [r3, #12]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	3b1e      	subs	r3, #30
 80014de:	2207      	movs	r2, #7
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43da      	mvns	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	400a      	ands	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68d9      	ldr	r1, [r3, #12]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	4603      	mov	r3, r0
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4403      	add	r3, r0
 8001506:	3b1e      	subs	r3, #30
 8001508:	409a      	lsls	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	e022      	b.n	800155a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6919      	ldr	r1, [r3, #16]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	2207      	movs	r2, #7
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	400a      	ands	r2, r1
 8001536:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	4603      	mov	r3, r0
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4403      	add	r3, r0
 8001550:	409a      	lsls	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b06      	cmp	r3, #6
 8001560:	d824      	bhi.n	80015ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b05      	subs	r3, #5
 8001574:	221f      	movs	r2, #31
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	400a      	ands	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3b05      	subs	r3, #5
 800159e:	fa00 f203 	lsl.w	r2, r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
 80015aa:	e04c      	b.n	8001646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d824      	bhi.n	80015fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	3b23      	subs	r3, #35	; 0x23
 80015c6:	221f      	movs	r2, #31
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43da      	mvns	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	400a      	ands	r2, r1
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	3b23      	subs	r3, #35	; 0x23
 80015f0:	fa00 f203 	lsl.w	r2, r0, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
 80015fc:	e023      	b.n	8001646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	3b41      	subs	r3, #65	; 0x41
 8001610:	221f      	movs	r2, #31
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	3b41      	subs	r3, #65	; 0x41
 800163a:	fa00 f203 	lsl.w	r2, r0, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_ADC_ConfigChannel+0x234>)
 8001648:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <HAL_ADC_ConfigChannel+0x238>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d109      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1cc>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b12      	cmp	r3, #18
 800165a:	d105      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_ADC_ConfigChannel+0x238>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d123      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x21e>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b10      	cmp	r3, #16
 8001678:	d003      	beq.n	8001682 <HAL_ADC_ConfigChannel+0x1e6>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b11      	cmp	r3, #17
 8001680:	d11b      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b10      	cmp	r3, #16
 8001694:	d111      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_ADC_ConfigChannel+0x23c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_ADC_ConfigChannel+0x240>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	0c9a      	lsrs	r2, r3, #18
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40012300 	.word	0x40012300
 80016d4:	40012000 	.word	0x40012000
 80016d8:	20000000 	.word	0x20000000
 80016dc:	431bde83 	.word	0x431bde83

080016e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e8:	4b79      	ldr	r3, [pc, #484]	; (80018d0 <ADC_Init+0x1f0>)
 80016ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	431a      	orrs	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	021a      	lsls	r2, r3, #8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <ADC_Init+0x1f4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d022      	beq.n	80017be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001786:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6899      	ldr	r1, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	e00f      	b.n	80017de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0202 	bic.w	r2, r2, #2
 80017ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6899      	ldr	r1, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e1b      	ldrb	r3, [r3, #24]
 80017f8:	005a      	lsls	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01b      	beq.n	8001844 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800181a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800182a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	3b01      	subs	r3, #1
 8001838:	035a      	lsls	r2, r3, #13
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	e007      	b.n	8001854 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001852:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	3b01      	subs	r3, #1
 8001870:	051a      	lsls	r2, r3, #20
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6899      	ldr	r1, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001896:	025a      	lsls	r2, r3, #9
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	029a      	lsls	r2, r3, #10
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40012300 	.word	0x40012300
 80018d4:	0f000001 	.word	0x0f000001

080018d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0ed      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fa2c 	bl	8000d54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fd52 	bl	80013b4 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001912:	e012      	b.n	800193a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001914:	f7ff fd4e 	bl	80013b4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d90b      	bls.n	800193a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2205      	movs	r2, #5
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0c5      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0e5      	beq.n	8001914 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0202 	bic.w	r2, r2, #2
 8001956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001958:	f7ff fd2c 	bl	80013b4 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195e:	e012      	b.n	8001986 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001960:	f7ff fd28 	bl	80013b4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d90b      	bls.n	8001986 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2205      	movs	r2, #5
 800197e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e09f      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e5      	bne.n	8001960 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d108      	bne.n	80019ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7e5b      	ldrb	r3, [r3, #25]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e9b      	ldrb	r3, [r3, #26]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0220 	orr.w	r2, r2, #32
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e007      	b.n	8001a12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0220 	bic.w	r2, r2, #32
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7edb      	ldrb	r3, [r3, #27]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0210 	bic.w	r2, r2, #16
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0210 	orr.w	r2, r2, #16
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7f1b      	ldrb	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0208 	orr.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e007      	b.n	8001a66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7f5b      	ldrb	r3, [r3, #29]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0204 	orr.w	r2, r2, #4
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	; (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff8e 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff29 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff3e 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff8e 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5d 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff31 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffa2 	bl	8001c2c <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff fb58 	bl	80013b4 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e099      	b.n	8001e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d30:	e00f      	b.n	8001d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d32:	f7ff fb3f 	bl	80013b4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d908      	bls.n	8001d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2203      	movs	r2, #3
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e078      	b.n	8001e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e8      	bne.n	8001d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_DMA_Init+0x158>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d107      	bne.n	8001dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4313      	orrs	r3, r2
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f023 0307 	bic.w	r3, r3, #7
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d117      	bne.n	8001e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00e      	beq.n	8001e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f9e9 	bl	80021d0 <DMA_CheckFifoParam>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e12:	2301      	movs	r3, #1
 8001e14:	e016      	b.n	8001e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f9a0 	bl	8002164 <DMA_CalcBaseAndBitshift>
 8001e24:	4603      	mov	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	223f      	movs	r2, #63	; 0x3f
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	f010803f 	.word	0xf010803f

08001e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e5c:	4b8e      	ldr	r3, [pc, #568]	; (8002098 <HAL_DMA_IRQHandler+0x248>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a8e      	ldr	r2, [pc, #568]	; (800209c <HAL_DMA_IRQHandler+0x24c>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0a9b      	lsrs	r3, r3, #10
 8001e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0204 	bic.w	r2, r2, #4
 8001ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d012      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	2201      	movs	r2, #1
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f043 0202 	orr.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d012      	beq.n	8001f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2204      	movs	r2, #4
 8001f16:	409a      	lsls	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d043      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d03c      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d018      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d108      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d024      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
 8001f7e:	e01f      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	e016      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0208 	bic.w	r2, r2, #8
 8001fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 808f 	beq.w	80020f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8087 	beq.w	80020f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d136      	bne.n	8002068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0216 	bic.w	r2, r2, #22
 8002008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <HAL_DMA_IRQHandler+0x1da>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0208 	bic.w	r2, r2, #8
 8002038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	223f      	movs	r2, #63	; 0x3f
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205a:	2b00      	cmp	r3, #0
 800205c:	d07e      	beq.n	800215c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
        }
        return;
 8002066:	e079      	b.n	800215c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01d      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	2b00      	cmp	r3, #0
 800208a:	d031      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
 8002094:	e02c      	b.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
 8002096:	bf00      	nop
 8002098:	20000000 	.word	0x20000000
 800209c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d023      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
 80020b0:	e01e      	b.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10f      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0210 	bic.w	r2, r2, #16
 80020ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d032      	beq.n	800215e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d022      	beq.n	800214a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2205      	movs	r2, #5
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3301      	adds	r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	d307      	bcc.n	8002138 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f2      	bne.n	800211c <HAL_DMA_IRQHandler+0x2cc>
 8002136:	e000      	b.n	800213a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002138:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
 800215a:	e000      	b.n	800215e <HAL_DMA_IRQHandler+0x30e>
        return;
 800215c:	bf00      	nop
    }
  }
}
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3b10      	subs	r3, #16
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800217e:	4a13      	ldr	r2, [pc, #76]	; (80021cc <DMA_CalcBaseAndBitshift+0x68>)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d909      	bls.n	80021a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	659a      	str	r2, [r3, #88]	; 0x58
 80021a4:	e007      	b.n	80021b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	aaaaaaab 	.word	0xaaaaaaab
 80021cc:	0800b130 	.word	0x0800b130

080021d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d11f      	bne.n	800222a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d856      	bhi.n	800229e <DMA_CheckFifoParam+0xce>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <DMA_CheckFifoParam+0x28>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800221b 	.word	0x0800221b
 8002200:	08002209 	.word	0x08002209
 8002204:	0800229f 	.word	0x0800229f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d046      	beq.n	80022a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002218:	e043      	b.n	80022a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002222:	d140      	bne.n	80022a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002228:	e03d      	b.n	80022a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002232:	d121      	bne.n	8002278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d837      	bhi.n	80022aa <DMA_CheckFifoParam+0xda>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <DMA_CheckFifoParam+0x70>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002251 	.word	0x08002251
 8002244:	08002257 	.word	0x08002257
 8002248:	08002251 	.word	0x08002251
 800224c:	08002269 	.word	0x08002269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      break;
 8002254:	e030      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d025      	beq.n	80022ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002266:	e022      	b.n	80022ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002270:	d11f      	bne.n	80022b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002276:	e01c      	b.n	80022b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d903      	bls.n	8002286 <DMA_CheckFifoParam+0xb6>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d003      	beq.n	800228c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002284:	e018      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      break;
 800228a:	e015      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e00b      	b.n	80022b6 <DMA_CheckFifoParam+0xe6>
      break;
 800229e:	bf00      	nop
 80022a0:	e00a      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e008      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e006      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022aa:	bf00      	nop
 80022ac:	e004      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e002      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
    }
  } 
  
  return status; 
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e153      	b.n	800258c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8142 	bne.w	8002586 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d005      	beq.n	800231a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	2b02      	cmp	r3, #2
 8002318:	d130      	bne.n	800237c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 0201 	and.w	r2, r3, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b03      	cmp	r3, #3
 8002386:	d017      	beq.n	80023b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d123      	bne.n	800240c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 809c 	beq.w	8002586 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a53      	ldr	r2, [pc, #332]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	4a4f      	ldr	r2, [pc, #316]	; (80025a8 <HAL_GPIO_Init+0x2e0>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a46      	ldr	r2, [pc, #280]	; (80025ac <HAL_GPIO_Init+0x2e4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x1f6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a45      	ldr	r2, [pc, #276]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x1f2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a44      	ldr	r2, [pc, #272]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x1ea>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x1f8>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e004      	b.n	80024c0 <HAL_GPIO_Init+0x1f8>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_Init+0x1f8>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x1f8>
 80024be:	2300      	movs	r3, #0
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f002 0203 	and.w	r2, r2, #3
 80024c6:	0092      	lsls	r2, r2, #2
 80024c8:	4093      	lsls	r3, r2
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d0:	4935      	ldr	r1, [pc, #212]	; (80025a8 <HAL_GPIO_Init+0x2e0>)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024de:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002502:	4a2e      	ldr	r2, [pc, #184]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002508:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800252c:	4a23      	ldr	r2, [pc, #140]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002556:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	f67f aea8 	bls.w	80022e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e12b      	b.n	800285e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fc38 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002658:	f001 fdfe 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 800265c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a81      	ldr	r2, [pc, #516]	; (8002868 <HAL_I2C_Init+0x274>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d807      	bhi.n	8002678 <HAL_I2C_Init+0x84>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a80      	ldr	r2, [pc, #512]	; (800286c <HAL_I2C_Init+0x278>)
 800266c:	4293      	cmp	r3, r2
 800266e:	bf94      	ite	ls
 8002670:	2301      	movls	r3, #1
 8002672:	2300      	movhi	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e006      	b.n	8002686 <HAL_I2C_Init+0x92>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a7d      	ldr	r2, [pc, #500]	; (8002870 <HAL_I2C_Init+0x27c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	bf94      	ite	ls
 8002680:	2301      	movls	r3, #1
 8002682:	2300      	movhi	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0e7      	b.n	800285e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a78      	ldr	r2, [pc, #480]	; (8002874 <HAL_I2C_Init+0x280>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0c9b      	lsrs	r3, r3, #18
 8002698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a6a      	ldr	r2, [pc, #424]	; (8002868 <HAL_I2C_Init+0x274>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d802      	bhi.n	80026c8 <HAL_I2C_Init+0xd4>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3301      	adds	r3, #1
 80026c6:	e009      	b.n	80026dc <HAL_I2C_Init+0xe8>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	4a69      	ldr	r2, [pc, #420]	; (8002878 <HAL_I2C_Init+0x284>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	3301      	adds	r3, #1
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	495c      	ldr	r1, [pc, #368]	; (8002868 <HAL_I2C_Init+0x274>)
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d819      	bhi.n	8002730 <HAL_I2C_Init+0x13c>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1e59      	subs	r1, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fbb1 f3f3 	udiv	r3, r1, r3
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002710:	400b      	ands	r3, r1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_I2C_Init+0x138>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e59      	subs	r1, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fbb1 f3f3 	udiv	r3, r1, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272a:	e051      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 800272c:	2304      	movs	r3, #4
 800272e:	e04f      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <HAL_I2C_Init+0x168>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e58      	subs	r0, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e012      	b.n	8002782 <HAL_I2C_Init+0x18e>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e58      	subs	r0, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	0099      	lsls	r1, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Init+0x196>
 8002786:	2301      	movs	r3, #1
 8002788:	e022      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10e      	bne.n	80027b0 <HAL_I2C_Init+0x1bc>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e58      	subs	r0, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	440b      	add	r3, r1
 80027a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a4:	3301      	adds	r3, #1
 80027a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ae:	e00f      	b.n	80027d0 <HAL_I2C_Init+0x1dc>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	0099      	lsls	r1, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	6809      	ldr	r1, [r1, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6911      	ldr	r1, [r2, #16]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68d2      	ldr	r2, [r2, #12]
 800280a:	4311      	orrs	r1, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	000186a0 	.word	0x000186a0
 800286c:	001e847f 	.word	0x001e847f
 8002870:	003d08ff 	.word	0x003d08ff
 8002874:	431bde83 	.word	0x431bde83
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287e:	b08f      	sub	sp, #60	; 0x3c
 8002880:	af0a      	add	r7, sp, #40	; 0x28
 8002882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e116      	b.n	8002abc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f008 f849 	bl	800a940 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2203      	movs	r2, #3
 80028b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 ffd2 	bl	8005876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	687e      	ldr	r6, [r7, #4]
 80028da:	466d      	mov	r5, sp
 80028dc:	f106 0410 	add.w	r4, r6, #16
 80028e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f0:	1d33      	adds	r3, r6, #4
 80028f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f002 fea9 	bl	800564c <USB_CoreInit>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0d7      	b.n	8002abc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f002 ffc0 	bl	8005898 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e04a      	b.n	80029b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	333d      	adds	r3, #61	; 0x3d
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	333c      	adds	r3, #60	; 0x3c
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	b298      	uxth	r0, r3
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3344      	adds	r3, #68	; 0x44
 800295a:	4602      	mov	r2, r0
 800295c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3340      	adds	r3, #64	; 0x40
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3348      	adds	r3, #72	; 0x48
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	334c      	adds	r3, #76	; 0x4c
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3354      	adds	r3, #84	; 0x54
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	3301      	adds	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3af      	bcc.n	800291e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e044      	b.n	8002a4e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d3b5      	bcc.n	80029c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	687e      	ldr	r6, [r7, #4]
 8002a60:	466d      	mov	r5, sp
 8002a62:	f106 0410 	add.w	r4, r6, #16
 8002a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a76:	1d33      	adds	r3, r6, #4
 8002a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f002 ff58 	bl	8005930 <USB_DevInit>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e014      	b.n	8002abc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f001 f9b8 	bl	8003e20 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f004 f89a 	bl	8006bee <USB_DevDisconnect>

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_Start+0x1c>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e020      	b.n	8002b22 <HAL_PCD_Start+0x5e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d109      	bne.n	8002b04 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d005      	beq.n	8002b04 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 fea3 	bl	8005854 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 f84a 	bl	8006bac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b2a:	b590      	push	{r4, r7, lr}
 8002b2c:	b08d      	sub	sp, #52	; 0x34
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 f908 	bl	8006d56 <USB_GetMode>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 84b7 	bne.w	80034bc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 f86c 	bl	8006c30 <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 84ad 	beq.w	80034ba <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 f859 	bl	8006c30 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d107      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f002 0202 	and.w	r2, r2, #2
 8002b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 f847 	bl	8006c30 <USB_ReadInterrupts>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d161      	bne.n	8002c70 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0210 	bic.w	r2, r2, #16
 8002bba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	0c5b      	lsrs	r3, r3, #17
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d124      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d035      	beq.n	8002c60 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	6a38      	ldr	r0, [r7, #32]
 8002c08:	f003 fe7e 	bl	8006908 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c18:	441a      	add	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	6a1a      	ldr	r2, [r3, #32]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c2a:	441a      	add	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	621a      	str	r2, [r3, #32]
 8002c30:	e016      	b.n	8002c60 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	0c5b      	lsrs	r3, r3, #17
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d110      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c44:	2208      	movs	r2, #8
 8002c46:	4619      	mov	r1, r3
 8002c48:	6a38      	ldr	r0, [r7, #32]
 8002c4a:	f003 fe5d 	bl	8006908 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	6a1a      	ldr	r2, [r3, #32]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c5a:	441a      	add	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0210 	orr.w	r2, r2, #16
 8002c6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 ffdb 	bl	8006c30 <USB_ReadInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c84:	f040 80a7 	bne.w	8002dd6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 ffe0 	bl	8006c56 <USB_ReadDevAllOutEpInterrupt>
 8002c96:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c98:	e099      	b.n	8002dce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 808e 	beq.w	8002dc2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f004 f804 	bl	8006cbe <USB_ReadDevOutEPInterrupt>
 8002cb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 ff1c 	bl	8003b14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fff2 	bl	8003ce4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d16:	461a      	mov	r2, r3
 8002d18:	2310      	movs	r3, #16
 8002d1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d030      	beq.n	8002d88 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b80      	cmp	r3, #128	; 0x80
 8002d30:	d109      	bne.n	8002d46 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d44:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	78db      	ldrb	r3, [r3, #3]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f007 fef7 	bl	800ab64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d82:	461a      	mov	r2, r3
 8002d84:	2302      	movs	r3, #2
 8002d86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2320      	movs	r3, #32
 8002da2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f47f af62 	bne.w	8002c9a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 ff28 	bl	8006c30 <USB_ReadInterrupts>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dea:	f040 80db 	bne.w	8002fa4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 ff49 	bl	8006c8a <USB_ReadDevAllInEpInterrupt>
 8002df8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dfe:	e0cd      	b.n	8002f9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80c2 	beq.w	8002f90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 ff6f 	bl	8006cfa <USB_ReadDevInEPInterrupt>
 8002e1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d057      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	2201      	movs	r2, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69f9      	ldr	r1, [r7, #28]
 8002e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e48:	4013      	ands	r3, r2
 8002e4a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d132      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334c      	adds	r3, #76	; 0x4c
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4403      	add	r3, r0
 8002e86:	3348      	adds	r3, #72	; 0x48
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4419      	add	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	334c      	adds	r3, #76	; 0x4c
 8002e9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d113      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x3a2>
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3354      	adds	r3, #84	; 0x54
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d108      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	f003 ff76 	bl	8006db8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f007 fdcb 	bl	800aa6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f26:	461a      	mov	r2, r3
 8002f28:	2340      	movs	r3, #64	; 0x40
 8002f2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d023      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f38:	6a38      	ldr	r0, [r7, #32]
 8002f3a:	f002 fe57 	bl	8005bec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	3338      	adds	r3, #56	; 0x38
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	78db      	ldrb	r3, [r3, #3]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d108      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f007 fe0e 	bl	800ab88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fd35 	bl	80039fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	3301      	adds	r3, #1
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f47f af2e 	bne.w	8002e00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fe41 	bl	8006c30 <USB_ReadInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fb8:	d122      	bne.n	8003000 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f007 ffac 	bl	800af40 <HAL_PCDEx_LPM_Callback>
 8002fe8:	e002      	b.n	8002ff0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f007 fdac 	bl	800ab48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f003 fe13 	bl	8006c30 <USB_ReadInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003014:	d112      	bne.n	800303c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d102      	bne.n	800302c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f007 fd68 	bl	800aafc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800303a:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fdf5 	bl	8006c30 <USB_ReadInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800304c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003050:	d121      	bne.n	8003096 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003060:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003086:	2101      	movs	r1, #1
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f007 ff59 	bl	800af40 <HAL_PCDEx_LPM_Callback>
 800308e:	e002      	b.n	8003096 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f007 fd33 	bl	800aafc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f003 fdc8 	bl	8006c30 <USB_ReadInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	f040 80b7 	bne.w	800321c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2110      	movs	r1, #16
 80030c8:	4618      	mov	r0, r3
 80030ca:	f002 fd8f 	bl	8005bec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d2:	e046      	b.n	8003162 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e0:	461a      	mov	r2, r3
 80030e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f8:	0151      	lsls	r1, r2, #5
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	440a      	add	r2, r1
 80030fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003106:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	461a      	mov	r2, r3
 8003116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800311a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312c:	0151      	lsls	r1, r2, #5
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	440a      	add	r2, r1
 8003132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003136:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800313a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314c:	0151      	lsls	r1, r2, #5
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	440a      	add	r2, r1
 8003152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003156:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800315a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	3301      	adds	r3, #1
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d3b3      	bcc.n	80030d4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800317e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	2b00      	cmp	r3, #0
 8003186:	d016      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003198:	f043 030b 	orr.w	r3, r3, #11
 800319c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ae:	f043 030b 	orr.w	r3, r3, #11
 80031b2:	6453      	str	r3, [r2, #68]	; 0x44
 80031b4:	e015      	b.n	80031e2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031c8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031dc:	f043 030b 	orr.w	r3, r3, #11
 80031e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003206:	461a      	mov	r2, r3
 8003208:	f003 fdd6 	bl	8006db8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800321a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f003 fd05 	bl	8006c30 <USB_ReadInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003230:	d124      	bne.n	800327c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f003 fd9b 	bl	8006d72 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f002 fd50 	bl	8005ce6 <USB_GetDevSpeed>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681c      	ldr	r4, [r3, #0]
 8003252:	f000 fff5 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8003256:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	4620      	mov	r0, r4
 8003262:	f002 fa55 	bl	8005710 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f007 fc29 	bl	800aabe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800327a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f003 fcd5 	bl	8006c30 <USB_ReadInterrupts>
 8003286:	4603      	mov	r3, r0
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b08      	cmp	r3, #8
 800328e:	d10a      	bne.n	80032a6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f007 fc06 	bl	800aaa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f002 0208 	and.w	r2, r2, #8
 80032a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 fcc0 	bl	8006c30 <USB_ReadInterrupts>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d122      	bne.n	8003300 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032c6:	2301      	movs	r3, #1
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	e014      	b.n	80032f6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	4619      	mov	r1, r3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fb27 	bl	800393e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	3301      	adds	r3, #1
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3e5      	bcc.n	80032cc <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fc93 	bl	8006c30 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003314:	d13b      	bne.n	800338e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003316:	2301      	movs	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	e02b      	b.n	8003374 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3340      	adds	r3, #64	; 0x40
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d115      	bne.n	800336e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003342:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003344:	2b00      	cmp	r3, #0
 8003346:	da12      	bge.n	800336e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	333f      	adds	r3, #63	; 0x3f
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003364:	b2db      	uxtb	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fae8 	bl	800393e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	3301      	adds	r3, #1
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337a:	429a      	cmp	r2, r3
 800337c:	d3ce      	bcc.n	800331c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800338c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fc4c 	bl	8006c30 <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a2:	d155      	bne.n	8003450 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033a4:	2301      	movs	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	e045      	b.n	8003436 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d12e      	bne.n	8003430 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	da2b      	bge.n	8003430 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80033e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d121      	bne.n	8003430 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342c:	6053      	str	r3, [r2, #4]
            break;
 800342e:	e007      	b.n	8003440 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	3301      	adds	r3, #1
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	429a      	cmp	r2, r3
 800343e:	d3b4      	bcc.n	80033aa <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800344e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f003 fbeb 	bl	8006c30 <USB_ReadInterrupts>
 800345a:	4603      	mov	r3, r0
 800345c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003464:	d10a      	bne.n	800347c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f007 fba0 	bl	800abac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800347a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f003 fbd5 	bl	8006c30 <USB_ReadInterrupts>
 8003486:	4603      	mov	r3, r0
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b04      	cmp	r3, #4
 800348e:	d115      	bne.n	80034bc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f007 fb90 	bl	800abc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	e000      	b.n	80034bc <HAL_PCD_IRQHandler+0x992>
      return;
 80034ba:	bf00      	nop
    }
  }
}
 80034bc:	3734      	adds	r7, #52	; 0x34
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd90      	pop	{r4, r7, pc}

080034c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_PCD_SetAddress+0x1a>
 80034d8:	2302      	movs	r3, #2
 80034da:	e013      	b.n	8003504 <HAL_PCD_SetAddress+0x42>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 fb33 	bl	8006b60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	461a      	mov	r2, r3
 800351a:	4603      	mov	r3, r0
 800351c:	70fb      	strb	r3, [r7, #3]
 800351e:	460b      	mov	r3, r1
 8003520:	803b      	strh	r3, [r7, #0]
 8003522:	4613      	mov	r3, r2
 8003524:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800352a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da0f      	bge.n	8003552 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3338      	adds	r3, #56	; 0x38
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	705a      	strb	r2, [r3, #1]
 8003550:	e00f      	b.n	8003572 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800357e:	883a      	ldrh	r2, [r7, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	78ba      	ldrb	r2, [r7, #2]
 8003588:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800359c:	78bb      	ldrb	r3, [r7, #2]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d102      	bne.n	80035a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_EP_Open+0xaa>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e00e      	b.n	80035d4 <HAL_PCD_EP_Open+0xc8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fbb3 	bl	8005d30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80035d2:	7afb      	ldrb	r3, [r7, #11]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da0f      	bge.n	8003610 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3338      	adds	r3, #56	; 0x38
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	3304      	adds	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	705a      	strb	r2, [r3, #1]
 800360e:	e00f      	b.n	8003630 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 020f 	and.w	r2, r3, #15
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	b2da      	uxtb	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_PCD_EP_Close+0x6e>
 8003646:	2302      	movs	r3, #2
 8003648:	e00e      	b.n	8003668 <HAL_PCD_EP_Close+0x8c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	4618      	mov	r0, r3
 800365a:	f002 fbf1 	bl	8005e40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	460b      	mov	r3, r1
 800367e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	f003 020f 	and.w	r2, r3, #15
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2200      	movs	r2, #0
 80036b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b2:	7afb      	ldrb	r3, [r7, #11]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d102      	bne.n	80036cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036cc:	7afb      	ldrb	r3, [r7, #11]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	6979      	ldr	r1, [r7, #20]
 80036e4:	f002 fed0 	bl	8006488 <USB_EP0StartXfer>
 80036e8:	e008      	b.n	80036fc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	f002 fc7e 	bl	8005ff8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	f003 020f 	and.w	r2, r3, #15
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003728:	681b      	ldr	r3, [r3, #0]
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	460b      	mov	r3, r1
 8003744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003746:	7afb      	ldrb	r3, [r7, #11]
 8003748:	f003 020f 	and.w	r2, r3, #15
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	3338      	adds	r3, #56	; 0x38
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	3304      	adds	r3, #4
 800375c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2201      	movs	r2, #1
 8003774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003776:	7afb      	ldrb	r3, [r7, #11]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	b2da      	uxtb	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d102      	bne.n	8003790 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	6979      	ldr	r1, [r7, #20]
 80037a8:	f002 fe6e 	bl	8006488 <USB_EP0StartXfer>
 80037ac:	e008      	b.n	80037c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	6979      	ldr	r1, [r7, #20]
 80037bc:	f002 fc1c 	bl	8005ff8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 020f 	and.w	r2, r3, #15
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d901      	bls.n	80037e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e050      	b.n	800388a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da0f      	bge.n	8003810 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	3338      	adds	r3, #56	; 0x38
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	3304      	adds	r3, #4
 8003806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	705a      	strb	r2, [r3, #1]
 800380e:	e00d      	b.n	800382c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	3304      	adds	r3, #4
 8003824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	b2da      	uxtb	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_PCD_EP_SetStall+0x82>
 8003848:	2302      	movs	r3, #2
 800384a:	e01e      	b.n	800388a <HAL_PCD_EP_SetStall+0xc0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	4618      	mov	r0, r3
 800385c:	f003 f8ac 	bl	80069b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	b2d9      	uxtb	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800387a:	461a      	mov	r2, r3
 800387c:	f003 fa9c 	bl	8006db8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d901      	bls.n	80038b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e042      	b.n	8003936 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da0f      	bge.n	80038d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	3338      	adds	r3, #56	; 0x38
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	3304      	adds	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	705a      	strb	r2, [r3, #1]
 80038d6:	e00f      	b.n	80038f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 020f 	and.w	r2, r3, #15
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	3304      	adds	r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_PCD_EP_ClrStall+0x86>
 8003914:	2302      	movs	r3, #2
 8003916:	e00e      	b.n	8003936 <HAL_PCD_EP_ClrStall+0xa4>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	4618      	mov	r0, r3
 8003928:	f003 f8b4 	bl	8006a94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800394a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800394e:	2b00      	cmp	r3, #0
 8003950:	da0c      	bge.n	800396c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	3338      	adds	r3, #56	; 0x38
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e00c      	b.n	8003986 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	f003 020f 	and.w	r2, r3, #15
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	3304      	adds	r3, #4
 8003984:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68f9      	ldr	r1, [r7, #12]
 800398c:	4618      	mov	r0, r3
 800398e:	f002 fed3 	bl	8006738 <USB_EPStopXfer>
 8003992:	4603      	mov	r3, r0
 8003994:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003996:	7afb      	ldrb	r3, [r7, #11]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_EP_Flush+0x1a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e01b      	b.n	80039f2 <HAL_PCD_EP_Flush+0x52>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80039c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da09      	bge.n	80039de <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f002 f908 	bl	8005bec <USB_FlushTxFifo>
 80039dc:	e004      	b.n	80039e8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 f936 	bl	8005c54 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b08a      	sub	sp, #40	; 0x28
 80039fe:	af02      	add	r7, sp, #8
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	3338      	adds	r3, #56	; 0x38
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d901      	bls.n	8003a32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e06c      	b.n	8003b0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d902      	bls.n	8003a4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3303      	adds	r3, #3
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a56:	e02b      	b.n	8003ab0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d902      	bls.n	8003a74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	3303      	adds	r3, #3
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6919      	ldr	r1, [r3, #16]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4603      	mov	r3, r0
 8003a92:	6978      	ldr	r0, [r7, #20]
 8003a94:	f002 fefa 	bl	800688c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	441a      	add	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	441a      	add	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d809      	bhi.n	8003ada <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1a      	ldr	r2, [r3, #32]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d203      	bcs.n	8003ada <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1be      	bne.n	8003a58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d811      	bhi.n	8003b0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	2201      	movs	r2, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	6939      	ldr	r1, [r7, #16]
 8003b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b06:	4013      	ands	r3, r2
 8003b08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	333c      	adds	r3, #60	; 0x3c
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d17b      	bne.n	8003c42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4a61      	ldr	r2, [pc, #388]	; (8003cdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	f240 80b9 	bls.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80b3 	beq.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	461a      	mov	r2, r3
 8003b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7c:	6093      	str	r3, [r2, #8]
 8003b7e:	e0a7      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	461a      	mov	r2, r3
 8003b98:	2320      	movs	r3, #32
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	e098      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 8093 	bne.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	; (8003cdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d90f      	bls.n	8003bd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	e07e      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	0159      	lsls	r1, r3, #5
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d114      	bne.n	8003c34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2101      	movs	r1, #1
 8003c20:	f003 f8ca 	bl	8006db8 <USB_EP0_OutStart>
 8003c24:	e006      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	441a      	add	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f006 fefc 	bl	800aa38 <HAL_PCD_DataOutStageCallback>
 8003c40:	e046      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d124      	bne.n	8003c94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	6093      	str	r3, [r2, #8]
 8003c68:	e032      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	461a      	mov	r2, r3
 8003c82:	2320      	movs	r3, #32
 8003c84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f006 fed3 	bl	800aa38 <HAL_PCD_DataOutStageCallback>
 8003c92:	e01d      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d114      	bne.n	8003cc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f003 f87a 	bl	8006db8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f006 feb4 	bl	800aa38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	4f54300a 	.word	0x4f54300a
 8003ce0:	4f54310a 	.word	0x4f54310a

08003ce4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	333c      	adds	r3, #60	; 0x3c
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d90e      	bls.n	8003d38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f006 fe6b 	bl	800aa14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d90c      	bls.n	8003d60 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	f003 f82c 	bl	8006db8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	4f54300a 	.word	0x4f54300a

08003d70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d8e:	883b      	ldrh	r3, [r7, #0]
 8003d90:	0419      	lsls	r1, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d9c:	e028      	b.n	8003df0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e00d      	b.n	8003dce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	3340      	adds	r3, #64	; 0x40
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d3ec      	bcc.n	8003db2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003dd8:	883b      	ldrh	r3, [r7, #0]
 8003dda:	0418      	lsls	r0, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	4302      	orrs	r2, r0
 8003de8:	3340      	adds	r3, #64	; 0x40
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e52:	f043 0303 	orr.w	r3, r3, #3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0cc      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d90c      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e067      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4934      	ldr	r1, [pc, #208]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fd fa2c 	bl	80013b4 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fd fa28 	bl	80013b4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f821 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490a      	ldr	r1, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd f98c 	bl	800132c <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	0800b118 	.word	0x0800b118
 800402c:	20000000 	.word	0x20000000
 8004030:	20000004 	.word	0x20000004

08004034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004038:	b094      	sub	sp, #80	; 0x50
 800403a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	647b      	str	r3, [r7, #68]	; 0x44
 8004040:	2300      	movs	r3, #0
 8004042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004044:	2300      	movs	r3, #0
 8004046:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800404c:	4b79      	ldr	r3, [pc, #484]	; (8004234 <HAL_RCC_GetSysClockFreq+0x200>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d00d      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x40>
 8004058:	2b08      	cmp	r3, #8
 800405a:	f200 80e1 	bhi.w	8004220 <HAL_RCC_GetSysClockFreq+0x1ec>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x34>
 8004062:	2b04      	cmp	r3, #4
 8004064:	d003      	beq.n	800406e <HAL_RCC_GetSysClockFreq+0x3a>
 8004066:	e0db      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b73      	ldr	r3, [pc, #460]	; (8004238 <HAL_RCC_GetSysClockFreq+0x204>)
 800406a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800406c:	e0db      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406e:	4b73      	ldr	r3, [pc, #460]	; (800423c <HAL_RCC_GetSysClockFreq+0x208>)
 8004070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004072:	e0d8      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004074:	4b6f      	ldr	r3, [pc, #444]	; (8004234 <HAL_RCC_GetSysClockFreq+0x200>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800407c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407e:	4b6d      	ldr	r3, [pc, #436]	; (8004234 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d063      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408a:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <HAL_RCC_GetSysClockFreq+0x200>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	099b      	lsrs	r3, r3, #6
 8004090:	2200      	movs	r2, #0
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
 8004094:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409c:	633b      	str	r3, [r7, #48]	; 0x30
 800409e:	2300      	movs	r3, #0
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
 80040a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040a6:	4622      	mov	r2, r4
 80040a8:	462b      	mov	r3, r5
 80040aa:	f04f 0000 	mov.w	r0, #0
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	0159      	lsls	r1, r3, #5
 80040b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b8:	0150      	lsls	r0, r2, #5
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4621      	mov	r1, r4
 80040c0:	1a51      	subs	r1, r2, r1
 80040c2:	6139      	str	r1, [r7, #16]
 80040c4:	4629      	mov	r1, r5
 80040c6:	eb63 0301 	sbc.w	r3, r3, r1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d8:	4659      	mov	r1, fp
 80040da:	018b      	lsls	r3, r1, #6
 80040dc:	4651      	mov	r1, sl
 80040de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040e2:	4651      	mov	r1, sl
 80040e4:	018a      	lsls	r2, r1, #6
 80040e6:	4651      	mov	r1, sl
 80040e8:	ebb2 0801 	subs.w	r8, r2, r1
 80040ec:	4659      	mov	r1, fp
 80040ee:	eb63 0901 	sbc.w	r9, r3, r1
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004106:	4690      	mov	r8, r2
 8004108:	4699      	mov	r9, r3
 800410a:	4623      	mov	r3, r4
 800410c:	eb18 0303 	adds.w	r3, r8, r3
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	462b      	mov	r3, r5
 8004114:	eb49 0303 	adc.w	r3, r9, r3
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004126:	4629      	mov	r1, r5
 8004128:	024b      	lsls	r3, r1, #9
 800412a:	4621      	mov	r1, r4
 800412c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004130:	4621      	mov	r1, r4
 8004132:	024a      	lsls	r2, r1, #9
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413a:	2200      	movs	r2, #0
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
 800413e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004144:	f7fc f85e 	bl	8000204 <__aeabi_uldivmod>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4613      	mov	r3, r2
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004150:	e058      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004152:	4b38      	ldr	r3, [pc, #224]	; (8004234 <HAL_RCC_GetSysClockFreq+0x200>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	099b      	lsrs	r3, r3, #6
 8004158:	2200      	movs	r2, #0
 800415a:	4618      	mov	r0, r3
 800415c:	4611      	mov	r1, r2
 800415e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	2300      	movs	r3, #0
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
 8004168:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800416c:	4642      	mov	r2, r8
 800416e:	464b      	mov	r3, r9
 8004170:	f04f 0000 	mov.w	r0, #0
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	0159      	lsls	r1, r3, #5
 800417a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800417e:	0150      	lsls	r0, r2, #5
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4641      	mov	r1, r8
 8004186:	ebb2 0a01 	subs.w	sl, r2, r1
 800418a:	4649      	mov	r1, r9
 800418c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800419c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041a4:	ebb2 040a 	subs.w	r4, r2, sl
 80041a8:	eb63 050b 	sbc.w	r5, r3, fp
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	00eb      	lsls	r3, r5, #3
 80041b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ba:	00e2      	lsls	r2, r4, #3
 80041bc:	4614      	mov	r4, r2
 80041be:	461d      	mov	r5, r3
 80041c0:	4643      	mov	r3, r8
 80041c2:	18e3      	adds	r3, r4, r3
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	464b      	mov	r3, r9
 80041c8:	eb45 0303 	adc.w	r3, r5, r3
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041da:	4629      	mov	r1, r5
 80041dc:	028b      	lsls	r3, r1, #10
 80041de:	4621      	mov	r1, r4
 80041e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041e4:	4621      	mov	r1, r4
 80041e6:	028a      	lsls	r2, r1, #10
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ee:	2200      	movs	r2, #0
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	61fa      	str	r2, [r7, #28]
 80041f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f8:	f7fc f804 	bl	8000204 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_GetSysClockFreq+0x200>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800421e:	e002      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_GetSysClockFreq+0x204>)
 8004222:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004228:	4618      	mov	r0, r3
 800422a:	3750      	adds	r7, #80	; 0x50
 800422c:	46bd      	mov	sp, r7
 800422e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	00f42400 	.word	0x00f42400
 800423c:	007a1200 	.word	0x007a1200

08004240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_RCC_GetHCLKFreq+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000000 	.word	0x20000000

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800425c:	f7ff fff0 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0a9b      	lsrs	r3, r3, #10
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4903      	ldr	r1, [pc, #12]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40023800 	.word	0x40023800
 800427c:	0800b128 	.word	0x0800b128

08004280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004284:	f7ff ffdc 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0b5b      	lsrs	r3, r3, #13
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	0800b128 	.word	0x0800b128

080042a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d010      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80042c8:	4b87      	ldr	r3, [pc, #540]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	4984      	ldr	r1, [pc, #528]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80042e6:	2301      	movs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80042f6:	4b7c      	ldr	r3, [pc, #496]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4978      	ldr	r1, [pc, #480]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8004314:	2301      	movs	r3, #1
 8004316:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8083 	beq.w	800442c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	4a6e      	ldr	r2, [pc, #440]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	6413      	str	r3, [r2, #64]	; 0x40
 8004336:	4b6c      	ldr	r3, [pc, #432]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004342:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a69      	ldr	r2, [pc, #420]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800434e:	f7fd f831 	bl	80013b4 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004356:	f7fd f82d 	bl	80013b4 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e162      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004368:	4b60      	ldr	r3, [pc, #384]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004374:	4b5c      	ldr	r3, [pc, #368]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437c:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d02f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	429a      	cmp	r2, r3
 8004390:	d028      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004392:	4b55      	ldr	r3, [pc, #340]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800439c:	4b54      	ldr	r3, [pc, #336]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a2:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043a8:	4a4f      	ldr	r2, [pc, #316]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043ae:	4b4e      	ldr	r3, [pc, #312]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d114      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fc fffb 	bl	80013b4 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fc fff7 	bl	80013b4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e12a      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	4b43      	ldr	r3, [pc, #268]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f0:	d10d      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80043f2:	4b3d      	ldr	r3, [pc, #244]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	4938      	ldr	r1, [pc, #224]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004408:	4313      	orrs	r3, r2
 800440a:	608b      	str	r3, [r1, #8]
 800440c:	e005      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800440e:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4a35      	ldr	r2, [pc, #212]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004414:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004418:	6093      	str	r3, [r2, #8]
 800441a:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800441c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004426:	4930      	ldr	r1, [pc, #192]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004428:	4313      	orrs	r3, r2
 800442a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800443e:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004440:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	4922      	ldr	r1, [pc, #136]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d011      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004476:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	491a      	ldr	r1, [pc, #104]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800448e:	d101      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004490:	2301      	movs	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	490e      	ldr	r1, [pc, #56]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	f040 8091 	bne.w	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044cc:	f7fc ff72 	bl	80013b4 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044d2:	e013      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044d4:	f7fc ff6e 	bl	80013b4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d90c      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0a3      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x386>
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40007000 	.word	0x40007000
 80044f0:	42470e40 	.word	0x42470e40
 80044f4:	424711e0 	.word	0x424711e0
 80044f8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044fc:	4b4e      	ldr	r3, [pc, #312]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e5      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004508:	4a4c      	ldr	r2, [pc, #304]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d023      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d019      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004540:	2b00      	cmp	r3, #0
 8004542:	d004      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454c:	d00e      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004556:	2b00      	cmp	r3, #0
 8004558:	d019      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d115      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456a:	d110      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	019b      	lsls	r3, r3, #6
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	061b      	lsls	r3, r3, #24
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	071b      	lsls	r3, r3, #28
 8004586:	492c      	ldr	r1, [pc, #176]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	019b      	lsls	r3, r3, #6
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	071b      	lsls	r3, r3, #28
 80045b4:	4920      	ldr	r1, [pc, #128]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045c2:	f7fc fef7 	bl	80013b4 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045ca:	f7fc fef3 	bl	80013b4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e028      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045dc:	4b16      	ldr	r3, [pc, #88]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f4:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80045f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	490d      	ldr	r1, [pc, #52]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004616:	4b08      	ldr	r3, [pc, #32]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	4904      	ldr	r1, [pc, #16]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	424710d8 	.word	0x424710d8
 8004640:	42470068 	.word	0x42470068

08004644 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e273      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d075      	beq.n	800474e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004662:	4b88      	ldr	r3, [pc, #544]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b04      	cmp	r3, #4
 800466c:	d00c      	beq.n	8004688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466e:	4b85      	ldr	r3, [pc, #532]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004676:	2b08      	cmp	r3, #8
 8004678:	d112      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467a:	4b82      	ldr	r3, [pc, #520]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004686:	d10b      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	4b7e      	ldr	r3, [pc, #504]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05b      	beq.n	800474c <HAL_RCC_OscConfig+0x108>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d157      	bne.n	800474c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e24e      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d106      	bne.n	80046b8 <HAL_RCC_OscConfig+0x74>
 80046aa:	4b76      	ldr	r3, [pc, #472]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e01d      	b.n	80046f4 <HAL_RCC_OscConfig+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0x98>
 80046c2:	4b70      	ldr	r3, [pc, #448]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a6f      	ldr	r2, [pc, #444]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b6d      	ldr	r3, [pc, #436]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a6c      	ldr	r2, [pc, #432]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0xb0>
 80046dc:	4b69      	ldr	r3, [pc, #420]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b66      	ldr	r3, [pc, #408]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a65      	ldr	r2, [pc, #404]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fc fe5a 	bl	80013b4 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004704:	f7fc fe56 	bl	80013b4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e213      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0xc0>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fc fe46 	bl	80013b4 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fc fe42 	bl	80013b4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1ff      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	4b51      	ldr	r3, [pc, #324]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0xe8>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d063      	beq.n	8004822 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800475a:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800476e:	2b08      	cmp	r3, #8
 8004770:	d11c      	bne.n	80047ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004772:	4b44      	ldr	r3, [pc, #272]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d116      	bne.n	80047ac <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477e:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_RCC_OscConfig+0x152>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e1d3      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4937      	ldr	r1, [pc, #220]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	e03a      	b.n	8004822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b4:	4b34      	ldr	r3, [pc, #208]	; (8004888 <HAL_RCC_OscConfig+0x244>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fc fdfb 	bl	80013b4 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c2:	f7fc fdf7 	bl	80013b4 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e1b4      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e0:	4b28      	ldr	r3, [pc, #160]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4925      	ldr	r1, [pc, #148]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <HAL_RCC_OscConfig+0x244>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fc fdda 	bl	80013b4 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004804:	f7fc fdd6 	bl	80013b4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e193      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d036      	beq.n	800489c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_RCC_OscConfig+0x248>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fc fdba 	bl	80013b4 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004844:	f7fc fdb6 	bl	80013b4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e173      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0x200>
 8004862:	e01b      	b.n	800489c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_OscConfig+0x248>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fc fda3 	bl	80013b4 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	e00e      	b.n	8004890 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004872:	f7fc fd9f 	bl	80013b4 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d907      	bls.n	8004890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e15c      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
 8004884:	40023800 	.word	0x40023800
 8004888:	42470000 	.word	0x42470000
 800488c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	4b8a      	ldr	r3, [pc, #552]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ea      	bne.n	8004872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8097 	beq.w	80049d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ae:	4b83      	ldr	r3, [pc, #524]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	4b7f      	ldr	r3, [pc, #508]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	4a7e      	ldr	r2, [pc, #504]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ca:	4b7c      	ldr	r3, [pc, #496]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	4b79      	ldr	r3, [pc, #484]	; (8004ac0 <HAL_RCC_OscConfig+0x47c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d118      	bne.n	8004918 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e6:	4b76      	ldr	r3, [pc, #472]	; (8004ac0 <HAL_RCC_OscConfig+0x47c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <HAL_RCC_OscConfig+0x47c>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f2:	f7fc fd5f 	bl	80013b4 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fa:	f7fc fd5b 	bl	80013b4 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e118      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490c:	4b6c      	ldr	r3, [pc, #432]	; (8004ac0 <HAL_RCC_OscConfig+0x47c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d106      	bne.n	800492e <HAL_RCC_OscConfig+0x2ea>
 8004920:	4b66      	ldr	r3, [pc, #408]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a65      	ldr	r2, [pc, #404]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	e01c      	b.n	8004968 <HAL_RCC_OscConfig+0x324>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d10c      	bne.n	8004950 <HAL_RCC_OscConfig+0x30c>
 8004936:	4b61      	ldr	r3, [pc, #388]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	4a60      	ldr	r2, [pc, #384]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	6713      	str	r3, [r2, #112]	; 0x70
 8004942:	4b5e      	ldr	r3, [pc, #376]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	4a5d      	ldr	r2, [pc, #372]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6713      	str	r3, [r2, #112]	; 0x70
 800494e:	e00b      	b.n	8004968 <HAL_RCC_OscConfig+0x324>
 8004950:	4b5a      	ldr	r3, [pc, #360]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a59      	ldr	r2, [pc, #356]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	4b57      	ldr	r3, [pc, #348]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a56      	ldr	r2, [pc, #344]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004962:	f023 0304 	bic.w	r3, r3, #4
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d015      	beq.n	800499c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fc fd20 	bl	80013b4 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fc fd1c 	bl	80013b4 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e0d7      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498e:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ee      	beq.n	8004978 <HAL_RCC_OscConfig+0x334>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fc fd0a 	bl	80013b4 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fc fd06 	bl	80013b4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0c1      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ba:	4b40      	ldr	r3, [pc, #256]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ee      	bne.n	80049a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049cc:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	4a3a      	ldr	r2, [pc, #232]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80049d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80ad 	beq.w	8004b3c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e2:	4b36      	ldr	r3, [pc, #216]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d060      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d145      	bne.n	8004a82 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f6:	4b33      	ldr	r3, [pc, #204]	; (8004ac4 <HAL_RCC_OscConfig+0x480>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fc fcda 	bl	80013b4 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fc fcd6 	bl	80013b4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e093      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	019b      	lsls	r3, r3, #6
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	061b      	lsls	r3, r3, #24
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	071b      	lsls	r3, r3, #28
 8004a4e:	491b      	ldr	r1, [pc, #108]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <HAL_RCC_OscConfig+0x480>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5a:	f7fc fcab 	bl	80013b4 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fc fca7 	bl	80013b4 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e064      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x41e>
 8004a80:	e05c      	b.n	8004b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a82:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <HAL_RCC_OscConfig+0x480>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fc fc94 	bl	80013b4 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fc fc90 	bl	80013b4 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e04d      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x44c>
 8004aae:	e045      	b.n	8004b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e040      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac8:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_RCC_OscConfig+0x504>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d030      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d129      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d122      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d119      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	3b01      	subs	r3, #1
 8004b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d10f      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800

08004b4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e066      	b.n	8004c30 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	7f5b      	ldrb	r3, [r3, #29]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc f9e4 	bl	8000f40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	22ca      	movs	r2, #202	; 0xca
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2253      	movs	r2, #83	; 0x53
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f998 	bl	8004ec4 <RTC_EnterInitMode>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d12c      	bne.n	8004bf8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6899      	ldr	r1, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68d2      	ldr	r2, [r2, #12]
 8004bd8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6919      	ldr	r1, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	041a      	lsls	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f99f 	bl	8004f32 <RTC_ExitInitMode>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d113      	bne.n	8004c26 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	22ff      	movs	r2, #255	; 0xff
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	7f1b      	ldrb	r3, [r3, #28]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_RTC_SetTime+0x1c>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e087      	b.n	8004d64 <HAL_RTC_SetTime+0x12c>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d126      	bne.n	8004cb4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2200      	movs	r2, #0
 8004c78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f97c 	bl	8004f7c <RTC_ByteToBcd2>
 8004c84:	4603      	mov	r3, r0
 8004c86:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 f975 	bl	8004f7c <RTC_ByteToBcd2>
 8004c92:	4603      	mov	r3, r0
 8004c94:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c96:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	789b      	ldrb	r3, [r3, #2]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f96d 	bl	8004f7c <RTC_ByteToBcd2>
 8004ca2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ca4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	78db      	ldrb	r3, [r3, #3]
 8004cac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	e018      	b.n	8004ce6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004cd4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004cda:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	78db      	ldrb	r3, [r3, #3]
 8004ce0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	22ca      	movs	r2, #202	; 0xca
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2253      	movs	r2, #83	; 0x53
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f8e4 	bl	8004ec4 <RTC_EnterInitMode>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d00:	7cfb      	ldrb	r3, [r7, #19]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d120      	bne.n	8004d48 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d10:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d14:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6899      	ldr	r1, [r3, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f8f7 	bl	8004f32 <RTC_ExitInitMode>
 8004d44:	4603      	mov	r3, r0
 8004d46:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	22ff      	movs	r2, #255	; 0xff
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]

  return status;
 8004d62:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd90      	pop	{r4, r7, pc}

08004d6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	7f1b      	ldrb	r3, [r3, #28]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_RTC_SetDate+0x1c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e071      	b.n	8004e6c <HAL_RTC_SetDate+0x100>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2202      	movs	r2, #2
 8004d92:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10e      	bne.n	8004db8 <HAL_RTC_SetDate+0x4c>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	f023 0310 	bic.w	r3, r3, #16
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	330a      	adds	r3, #10
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11c      	bne.n	8004df8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	78db      	ldrb	r3, [r3, #3]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f8da 	bl	8004f7c <RTC_ByteToBcd2>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f8d3 	bl	8004f7c <RTC_ByteToBcd2>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004dda:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	789b      	ldrb	r3, [r3, #2]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 f8cb 	bl	8004f7c <RTC_ByteToBcd2>
 8004de6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004de8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e00e      	b.n	8004e16 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	78db      	ldrb	r3, [r3, #3]
 8004dfc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	785b      	ldrb	r3, [r3, #1]
 8004e02:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e04:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e0a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	22ca      	movs	r2, #202	; 0xca
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2253      	movs	r2, #83	; 0x53
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f84c 	bl	8004ec4 <RTC_EnterInitMode>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10c      	bne.n	8004e50 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f873 	bl	8004f32 <RTC_ExitInitMode>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	22ff      	movs	r2, #255	; 0xff
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	771a      	strb	r2, [r3, #28]

  return status;
 8004e6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd90      	pop	{r4, r7, pc}

08004e74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e90:	f7fc fa90 	bl	80013b4 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e96:	e009      	b.n	8004eac <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e98:	f7fc fa8c 	bl	80013b4 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea6:	d901      	bls.n	8004eac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e007      	b.n	8004ebc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ee      	beq.n	8004e98 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d122      	bne.n	8004f28 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ef0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef2:	f7fc fa5f 	bl	80013b4 <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004ef8:	e00c      	b.n	8004f14 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004efa:	f7fc fa5b 	bl	80013b4 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f08:	d904      	bls.n	8004f14 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <RTC_EnterInitMode+0x64>
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d1e8      	bne.n	8004efa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f4c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ff89 	bl	8004e74 <HAL_RTC_WaitForSynchro>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004f8a:	e005      	b.n	8004f98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	3b0a      	subs	r3, #10
 8004f96:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d8f6      	bhi.n	8004f8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	b2db      	uxtb	r3, r3
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e07b      	b.n	80050c0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd8:	d009      	beq.n	8004fee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	61da      	str	r2, [r3, #28]
 8004fe0:	e005      	b.n	8004fee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fb ffc3 	bl	8000f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005024:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	ea42 0103 	orr.w	r1, r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	0c1b      	lsrs	r3, r3, #16
 800508c:	f003 0104 	and.w	r1, r3, #4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0210 	and.w	r2, r3, #16
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e03f      	b.n	800515a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc f800 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2224      	movs	r2, #36	; 0x24
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800510a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f829 	bl	8005164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695a      	ldr	r2, [r3, #20]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005168:	b0c0      	sub	sp, #256	; 0x100
 800516a:	af00      	add	r7, sp, #0
 800516c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	68d9      	ldr	r1, [r3, #12]
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	ea40 0301 	orr.w	r3, r0, r1
 800518c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800518e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	431a      	orrs	r2, r3
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051bc:	f021 010c 	bic.w	r1, r1, #12
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ca:	430b      	orrs	r3, r1
 80051cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051de:	6999      	ldr	r1, [r3, #24]
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	ea40 0301 	orr.w	r3, r0, r1
 80051ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b8f      	ldr	r3, [pc, #572]	; (8005430 <UART_SetConfig+0x2cc>)
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d005      	beq.n	8005204 <UART_SetConfig+0xa0>
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b8d      	ldr	r3, [pc, #564]	; (8005434 <UART_SetConfig+0x2d0>)
 8005200:	429a      	cmp	r2, r3
 8005202:	d104      	bne.n	800520e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7ff f83c 	bl	8004280 <HAL_RCC_GetPCLK2Freq>
 8005208:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800520c:	e003      	b.n	8005216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800520e:	f7ff f823 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8005212:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005220:	f040 810c 	bne.w	800543c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005228:	2200      	movs	r2, #0
 800522a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800522e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005236:	4622      	mov	r2, r4
 8005238:	462b      	mov	r3, r5
 800523a:	1891      	adds	r1, r2, r2
 800523c:	65b9      	str	r1, [r7, #88]	; 0x58
 800523e:	415b      	adcs	r3, r3
 8005240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005246:	4621      	mov	r1, r4
 8005248:	eb12 0801 	adds.w	r8, r2, r1
 800524c:	4629      	mov	r1, r5
 800524e:	eb43 0901 	adc.w	r9, r3, r1
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800525e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005266:	4690      	mov	r8, r2
 8005268:	4699      	mov	r9, r3
 800526a:	4623      	mov	r3, r4
 800526c:	eb18 0303 	adds.w	r3, r8, r3
 8005270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005274:	462b      	mov	r3, r5
 8005276:	eb49 0303 	adc.w	r3, r9, r3
 800527a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800528a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800528e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005292:	460b      	mov	r3, r1
 8005294:	18db      	adds	r3, r3, r3
 8005296:	653b      	str	r3, [r7, #80]	; 0x50
 8005298:	4613      	mov	r3, r2
 800529a:	eb42 0303 	adc.w	r3, r2, r3
 800529e:	657b      	str	r3, [r7, #84]	; 0x54
 80052a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052a8:	f7fa ffac 	bl	8000204 <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4b61      	ldr	r3, [pc, #388]	; (8005438 <UART_SetConfig+0x2d4>)
 80052b2:	fba3 2302 	umull	r2, r3, r3, r2
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	011c      	lsls	r4, r3, #4
 80052ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	1891      	adds	r1, r2, r2
 80052d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80052d4:	415b      	adcs	r3, r3
 80052d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052dc:	4641      	mov	r1, r8
 80052de:	eb12 0a01 	adds.w	sl, r2, r1
 80052e2:	4649      	mov	r1, r9
 80052e4:	eb43 0b01 	adc.w	fp, r3, r1
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052fc:	4692      	mov	sl, r2
 80052fe:	469b      	mov	fp, r3
 8005300:	4643      	mov	r3, r8
 8005302:	eb1a 0303 	adds.w	r3, sl, r3
 8005306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800530a:	464b      	mov	r3, r9
 800530c:	eb4b 0303 	adc.w	r3, fp, r3
 8005310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005320:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005328:	460b      	mov	r3, r1
 800532a:	18db      	adds	r3, r3, r3
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
 800532e:	4613      	mov	r3, r2
 8005330:	eb42 0303 	adc.w	r3, r2, r3
 8005334:	647b      	str	r3, [r7, #68]	; 0x44
 8005336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800533a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800533e:	f7fa ff61 	bl	8000204 <__aeabi_uldivmod>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4611      	mov	r1, r2
 8005348:	4b3b      	ldr	r3, [pc, #236]	; (8005438 <UART_SetConfig+0x2d4>)
 800534a:	fba3 2301 	umull	r2, r3, r3, r1
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2264      	movs	r2, #100	; 0x64
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	1acb      	subs	r3, r1, r3
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800535e:	4b36      	ldr	r3, [pc, #216]	; (8005438 <UART_SetConfig+0x2d4>)
 8005360:	fba3 2302 	umull	r2, r3, r3, r2
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800536c:	441c      	add	r4, r3
 800536e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005372:	2200      	movs	r2, #0
 8005374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005378:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800537c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	1891      	adds	r1, r2, r2
 8005386:	63b9      	str	r1, [r7, #56]	; 0x38
 8005388:	415b      	adcs	r3, r3
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800538c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005390:	4641      	mov	r1, r8
 8005392:	1851      	adds	r1, r2, r1
 8005394:	6339      	str	r1, [r7, #48]	; 0x30
 8005396:	4649      	mov	r1, r9
 8005398:	414b      	adcs	r3, r1
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053a8:	4659      	mov	r1, fp
 80053aa:	00cb      	lsls	r3, r1, #3
 80053ac:	4651      	mov	r1, sl
 80053ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b2:	4651      	mov	r1, sl
 80053b4:	00ca      	lsls	r2, r1, #3
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	4642      	mov	r2, r8
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053c4:	464b      	mov	r3, r9
 80053c6:	460a      	mov	r2, r1
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053e4:	460b      	mov	r3, r1
 80053e6:	18db      	adds	r3, r3, r3
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ea:	4613      	mov	r3, r2
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053fa:	f7fa ff03 	bl	8000204 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <UART_SetConfig+0x2d4>)
 8005404:	fba3 1302 	umull	r1, r3, r3, r2
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	2164      	movs	r1, #100	; 0x64
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	3332      	adds	r3, #50	; 0x32
 8005416:	4a08      	ldr	r2, [pc, #32]	; (8005438 <UART_SetConfig+0x2d4>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 0207 	and.w	r2, r3, #7
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4422      	add	r2, r4
 800542a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800542c:	e105      	b.n	800563a <UART_SetConfig+0x4d6>
 800542e:	bf00      	nop
 8005430:	40011000 	.word	0x40011000
 8005434:	40011400 	.word	0x40011400
 8005438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800543c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005440:	2200      	movs	r2, #0
 8005442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005446:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800544a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800544e:	4642      	mov	r2, r8
 8005450:	464b      	mov	r3, r9
 8005452:	1891      	adds	r1, r2, r2
 8005454:	6239      	str	r1, [r7, #32]
 8005456:	415b      	adcs	r3, r3
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
 800545a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800545e:	4641      	mov	r1, r8
 8005460:	1854      	adds	r4, r2, r1
 8005462:	4649      	mov	r1, r9
 8005464:	eb43 0501 	adc.w	r5, r3, r1
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	00eb      	lsls	r3, r5, #3
 8005472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005476:	00e2      	lsls	r2, r4, #3
 8005478:	4614      	mov	r4, r2
 800547a:	461d      	mov	r5, r3
 800547c:	4643      	mov	r3, r8
 800547e:	18e3      	adds	r3, r4, r3
 8005480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005484:	464b      	mov	r3, r9
 8005486:	eb45 0303 	adc.w	r3, r5, r3
 800548a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800548e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800549a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054aa:	4629      	mov	r1, r5
 80054ac:	008b      	lsls	r3, r1, #2
 80054ae:	4621      	mov	r1, r4
 80054b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b4:	4621      	mov	r1, r4
 80054b6:	008a      	lsls	r2, r1, #2
 80054b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054bc:	f7fa fea2 	bl	8000204 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4b60      	ldr	r3, [pc, #384]	; (8005648 <UART_SetConfig+0x4e4>)
 80054c6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	011c      	lsls	r4, r3, #4
 80054ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	61b9      	str	r1, [r7, #24]
 80054e8:	415b      	adcs	r3, r3
 80054ea:	61fb      	str	r3, [r7, #28]
 80054ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f0:	4641      	mov	r1, r8
 80054f2:	1851      	adds	r1, r2, r1
 80054f4:	6139      	str	r1, [r7, #16]
 80054f6:	4649      	mov	r1, r9
 80054f8:	414b      	adcs	r3, r1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005508:	4659      	mov	r1, fp
 800550a:	00cb      	lsls	r3, r1, #3
 800550c:	4651      	mov	r1, sl
 800550e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005512:	4651      	mov	r1, sl
 8005514:	00ca      	lsls	r2, r1, #3
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	4603      	mov	r3, r0
 800551c:	4642      	mov	r2, r8
 800551e:	189b      	adds	r3, r3, r2
 8005520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005524:	464b      	mov	r3, r9
 8005526:	460a      	mov	r2, r1
 8005528:	eb42 0303 	adc.w	r3, r2, r3
 800552c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	67bb      	str	r3, [r7, #120]	; 0x78
 800553a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005548:	4649      	mov	r1, r9
 800554a:	008b      	lsls	r3, r1, #2
 800554c:	4641      	mov	r1, r8
 800554e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005552:	4641      	mov	r1, r8
 8005554:	008a      	lsls	r2, r1, #2
 8005556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800555a:	f7fa fe53 	bl	8000204 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4b39      	ldr	r3, [pc, #228]	; (8005648 <UART_SetConfig+0x4e4>)
 8005564:	fba3 1302 	umull	r1, r3, r3, r2
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	2164      	movs	r1, #100	; 0x64
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	3332      	adds	r3, #50	; 0x32
 8005576:	4a34      	ldr	r2, [pc, #208]	; (8005648 <UART_SetConfig+0x4e4>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005582:	441c      	add	r4, r3
 8005584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005588:	2200      	movs	r2, #0
 800558a:	673b      	str	r3, [r7, #112]	; 0x70
 800558c:	677a      	str	r2, [r7, #116]	; 0x74
 800558e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005592:	4642      	mov	r2, r8
 8005594:	464b      	mov	r3, r9
 8005596:	1891      	adds	r1, r2, r2
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	415b      	adcs	r3, r3
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a2:	4641      	mov	r1, r8
 80055a4:	1851      	adds	r1, r2, r1
 80055a6:	6039      	str	r1, [r7, #0]
 80055a8:	4649      	mov	r1, r9
 80055aa:	414b      	adcs	r3, r1
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055ba:	4659      	mov	r1, fp
 80055bc:	00cb      	lsls	r3, r1, #3
 80055be:	4651      	mov	r1, sl
 80055c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055c4:	4651      	mov	r1, sl
 80055c6:	00ca      	lsls	r2, r1, #3
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	4603      	mov	r3, r0
 80055ce:	4642      	mov	r2, r8
 80055d0:	189b      	adds	r3, r3, r2
 80055d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80055d4:	464b      	mov	r3, r9
 80055d6:	460a      	mov	r2, r1
 80055d8:	eb42 0303 	adc.w	r3, r2, r3
 80055dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	663b      	str	r3, [r7, #96]	; 0x60
 80055e8:	667a      	str	r2, [r7, #100]	; 0x64
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055f6:	4649      	mov	r1, r9
 80055f8:	008b      	lsls	r3, r1, #2
 80055fa:	4641      	mov	r1, r8
 80055fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005600:	4641      	mov	r1, r8
 8005602:	008a      	lsls	r2, r1, #2
 8005604:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005608:	f7fa fdfc 	bl	8000204 <__aeabi_uldivmod>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <UART_SetConfig+0x4e4>)
 8005612:	fba3 1302 	umull	r1, r3, r3, r2
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	2164      	movs	r1, #100	; 0x64
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	3332      	adds	r3, #50	; 0x32
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <UART_SetConfig+0x4e4>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	f003 020f 	and.w	r2, r3, #15
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4422      	add	r2, r4
 8005638:	609a      	str	r2, [r3, #8]
}
 800563a:	bf00      	nop
 800563c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005640:	46bd      	mov	sp, r7
 8005642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005646:	bf00      	nop
 8005648:	51eb851f 	.word	0x51eb851f

0800564c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800564c:	b084      	sub	sp, #16
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	f107 001c 	add.w	r0, r7, #28
 800565a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2b01      	cmp	r3, #1
 8005662:	d122      	bne.n	80056aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800568c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d105      	bne.n	800569e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 fbe8 	bl	8006e74 <USB_CoreReset>
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]
 80056a8:	e01a      	b.n	80056e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fbdc 	bl	8006e74 <USB_CoreReset>
 80056bc:	4603      	mov	r3, r0
 80056be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
 80056d2:	e005      	b.n	80056e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d10b      	bne.n	80056fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f043 0206 	orr.w	r2, r3, #6
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800570a:	b004      	add	sp, #16
 800570c:	4770      	bx	lr
	...

08005710 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d165      	bne.n	80057f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a41      	ldr	r2, [pc, #260]	; (800582c <USB_SetTurnaroundTime+0x11c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d906      	bls.n	800573a <USB_SetTurnaroundTime+0x2a>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a40      	ldr	r2, [pc, #256]	; (8005830 <USB_SetTurnaroundTime+0x120>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d202      	bcs.n	800573a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005734:	230f      	movs	r3, #15
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e062      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a3c      	ldr	r2, [pc, #240]	; (8005830 <USB_SetTurnaroundTime+0x120>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d306      	bcc.n	8005750 <USB_SetTurnaroundTime+0x40>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4a3b      	ldr	r2, [pc, #236]	; (8005834 <USB_SetTurnaroundTime+0x124>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d202      	bcs.n	8005750 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800574a:	230e      	movs	r3, #14
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e057      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a38      	ldr	r2, [pc, #224]	; (8005834 <USB_SetTurnaroundTime+0x124>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d306      	bcc.n	8005766 <USB_SetTurnaroundTime+0x56>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4a37      	ldr	r2, [pc, #220]	; (8005838 <USB_SetTurnaroundTime+0x128>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d202      	bcs.n	8005766 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005760:	230d      	movs	r3, #13
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e04c      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4a33      	ldr	r2, [pc, #204]	; (8005838 <USB_SetTurnaroundTime+0x128>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d306      	bcc.n	800577c <USB_SetTurnaroundTime+0x6c>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4a32      	ldr	r2, [pc, #200]	; (800583c <USB_SetTurnaroundTime+0x12c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d802      	bhi.n	800577c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005776:	230c      	movs	r3, #12
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e041      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4a2f      	ldr	r2, [pc, #188]	; (800583c <USB_SetTurnaroundTime+0x12c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d906      	bls.n	8005792 <USB_SetTurnaroundTime+0x82>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4a2e      	ldr	r2, [pc, #184]	; (8005840 <USB_SetTurnaroundTime+0x130>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d802      	bhi.n	8005792 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800578c:	230b      	movs	r3, #11
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e036      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <USB_SetTurnaroundTime+0x130>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d906      	bls.n	80057a8 <USB_SetTurnaroundTime+0x98>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4a29      	ldr	r2, [pc, #164]	; (8005844 <USB_SetTurnaroundTime+0x134>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d802      	bhi.n	80057a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057a2:	230a      	movs	r3, #10
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e02b      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4a26      	ldr	r2, [pc, #152]	; (8005844 <USB_SetTurnaroundTime+0x134>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d906      	bls.n	80057be <USB_SetTurnaroundTime+0xae>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4a25      	ldr	r2, [pc, #148]	; (8005848 <USB_SetTurnaroundTime+0x138>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d202      	bcs.n	80057be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057b8:	2309      	movs	r3, #9
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e020      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4a21      	ldr	r2, [pc, #132]	; (8005848 <USB_SetTurnaroundTime+0x138>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d306      	bcc.n	80057d4 <USB_SetTurnaroundTime+0xc4>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4a20      	ldr	r2, [pc, #128]	; (800584c <USB_SetTurnaroundTime+0x13c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d802      	bhi.n	80057d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057ce:	2308      	movs	r3, #8
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e015      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4a1d      	ldr	r2, [pc, #116]	; (800584c <USB_SetTurnaroundTime+0x13c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d906      	bls.n	80057ea <USB_SetTurnaroundTime+0xda>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <USB_SetTurnaroundTime+0x140>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d202      	bcs.n	80057ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80057e4:	2307      	movs	r3, #7
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	e00a      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057ea:	2306      	movs	r3, #6
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e007      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80057f6:	2309      	movs	r3, #9
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e001      	b.n	8005800 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80057fc:	2309      	movs	r3, #9
 80057fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	029b      	lsls	r3, r3, #10
 8005814:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	00d8acbf 	.word	0x00d8acbf
 8005830:	00e4e1c0 	.word	0x00e4e1c0
 8005834:	00f42400 	.word	0x00f42400
 8005838:	01067380 	.word	0x01067380
 800583c:	011a499f 	.word	0x011a499f
 8005840:	01312cff 	.word	0x01312cff
 8005844:	014ca43f 	.word	0x014ca43f
 8005848:	016e3600 	.word	0x016e3600
 800584c:	01a6ab1f 	.word	0x01a6ab1f
 8005850:	01e84800 	.word	0x01e84800

08005854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f043 0201 	orr.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d115      	bne.n	80058e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058c6:	2001      	movs	r0, #1
 80058c8:	f7fb fd80 	bl	80013cc <HAL_Delay>
      ms++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fa3f 	bl	8006d56 <USB_GetMode>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d01e      	beq.n	800591c <USB_SetCurrentMode+0x84>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b31      	cmp	r3, #49	; 0x31
 80058e2:	d9f0      	bls.n	80058c6 <USB_SetCurrentMode+0x2e>
 80058e4:	e01a      	b.n	800591c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d115      	bne.n	8005918 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058f8:	2001      	movs	r0, #1
 80058fa:	f7fb fd67 	bl	80013cc <HAL_Delay>
      ms++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 fa26 	bl	8006d56 <USB_GetMode>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <USB_SetCurrentMode+0x84>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b31      	cmp	r3, #49	; 0x31
 8005914:	d9f0      	bls.n	80058f8 <USB_SetCurrentMode+0x60>
 8005916:	e001      	b.n	800591c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e005      	b.n	8005928 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b32      	cmp	r3, #50	; 0x32
 8005920:	d101      	bne.n	8005926 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005930:	b084      	sub	sp, #16
 8005932:	b580      	push	{r7, lr}
 8005934:	b086      	sub	sp, #24
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800593e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800594a:	2300      	movs	r3, #0
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	e009      	b.n	8005964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3340      	adds	r3, #64	; 0x40
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	2200      	movs	r2, #0
 800595c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3301      	adds	r3, #1
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b0e      	cmp	r3, #14
 8005968:	d9f2      	bls.n	8005950 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800596a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11c      	bne.n	80059aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800597e:	f043 0302 	orr.w	r3, r3, #2
 8005982:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e005      	b.n	80059b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059bc:	461a      	mov	r2, r3
 80059be:	2300      	movs	r3, #0
 80059c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	4619      	mov	r1, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	461a      	mov	r2, r3
 80059d2:	680b      	ldr	r3, [r1, #0]
 80059d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10c      	bne.n	80059f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059e2:	2100      	movs	r1, #0
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f965 	bl	8005cb4 <USB_SetDevSpeed>
 80059ea:	e008      	b.n	80059fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059ec:	2101      	movs	r1, #1
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f960 	bl	8005cb4 <USB_SetDevSpeed>
 80059f4:	e003      	b.n	80059fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059f6:	2103      	movs	r1, #3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f95b 	bl	8005cb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059fe:	2110      	movs	r1, #16
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f8f3 	bl	8005bec <USB_FlushTxFifo>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f91f 	bl	8005c54 <USB_FlushRxFifo>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	461a      	mov	r2, r3
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	461a      	mov	r2, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2300      	movs	r3, #0
 8005a42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e043      	b.n	8005ad2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a60:	d118      	bne.n	8005a94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	461a      	mov	r2, r3
 8005a76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	e013      	b.n	8005aa6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e008      	b.n	8005aa6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d3b7      	bcc.n	8005a4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	e043      	b.n	8005b68 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af6:	d118      	bne.n	8005b2a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e013      	b.n	8005b3c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	461a      	mov	r2, r3
 8005b22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e008      	b.n	8005b3c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	461a      	mov	r2, r3
 8005b38:	2300      	movs	r3, #0
 8005b3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3301      	adds	r3, #1
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d3b7      	bcc.n	8005ae0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f043 0210 	orr.w	r2, r3, #16
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <USB_DevInit+0x2b8>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f043 0208 	orr.w	r2, r3, #8
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d107      	bne.n	8005bd8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bd0:	f043 0304 	orr.w	r3, r3, #4
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be4:	b004      	add	sp, #16
 8005be6:	4770      	bx	lr
 8005be8:	803c3800 	.word	0x803c3800

08005bec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <USB_FlushTxFifo+0x64>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d901      	bls.n	8005c0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e01b      	b.n	8005c44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	daf2      	bge.n	8005bfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	019b      	lsls	r3, r3, #6
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <USB_FlushTxFifo+0x64>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e006      	b.n	8005c44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d0f0      	beq.n	8005c24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	00030d40 	.word	0x00030d40

08005c54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <USB_FlushRxFifo+0x5c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e018      	b.n	8005ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	daf2      	bge.n	8005c60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2210      	movs	r2, #16
 8005c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <USB_FlushRxFifo+0x5c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e006      	b.n	8005ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d0f0      	beq.n	8005c84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	00030d40 	.word	0x00030d40

08005cb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75fb      	strb	r3, [r7, #23]
 8005d0a:	e00a      	b.n	8005d22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d002      	beq.n	8005d18 <USB_GetDevSpeed+0x32>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d102      	bne.n	8005d1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d18:	2302      	movs	r3, #2
 8005d1a:	75fb      	strb	r3, [r7, #23]
 8005d1c:	e001      	b.n	8005d22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d1e:	230f      	movs	r3, #15
 8005d20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d13a      	bne.n	8005dc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	68f9      	ldr	r1, [r7, #12]
 8005d66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d155      	bne.n	8005e30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	791b      	ldrb	r3, [r3, #4]
 8005d9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005da0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	059b      	lsls	r3, r3, #22
 8005da6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005da8:	4313      	orrs	r3, r2
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	e036      	b.n	8005e30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc8:	69da      	ldr	r2, [r3, #28]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd8:	041b      	lsls	r3, r3, #16
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d11a      	bne.n	8005e30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	791b      	ldrb	r3, [r3, #4]
 8005e14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e16:	430b      	orrs	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d161      	bne.n	8005f20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e72:	d11f      	bne.n	8005eb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	68f9      	ldr	r1, [r7, #12]
 8005ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	2101      	movs	r1, #1
 8005eea:	fa01 f303 	lsl.w	r3, r1, r3
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	0159      	lsls	r1, r3, #5
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	440b      	add	r3, r1
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	4619      	mov	r1, r3
 8005f18:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <USB_DeactivateEndpoint+0x1b0>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]
 8005f1e:	e060      	b.n	8005fe2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f36:	d11f      	bne.n	8005f78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	2101      	movs	r1, #1
 8005f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	43db      	mvns	r3, r3
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f98:	4013      	ands	r3, r2
 8005f9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	2101      	movs	r1, #1
 8005fae:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	68f9      	ldr	r1, [r7, #12]
 8005fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	0159      	lsls	r1, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	440b      	add	r3, r1
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <USB_DeactivateEndpoint+0x1b4>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	ec337800 	.word	0xec337800
 8005ff4:	eff37800 	.word	0xeff37800

08005ff8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	4613      	mov	r3, r2
 8006004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b01      	cmp	r3, #1
 8006016:	f040 815c 	bne.w	80062d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d132      	bne.n	8006088 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006040:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006044:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	440a      	add	r2, r1
 800607c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006080:	0cdb      	lsrs	r3, r3, #19
 8006082:	04db      	lsls	r3, r3, #19
 8006084:	6113      	str	r3, [r2, #16]
 8006086:	e074      	b.n	8006172 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a2:	0cdb      	lsrs	r3, r3, #19
 80060a4:	04db      	lsls	r3, r3, #19
 80060a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6999      	ldr	r1, [r3, #24]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	440b      	add	r3, r1
 80060e4:	1e59      	subs	r1, r3, #1
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80060ee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80060f0:	4b9d      	ldr	r3, [pc, #628]	; (8006368 <USB_EPStartXfer+0x370>)
 80060f2:	400b      	ands	r3, r1
 80060f4:	69b9      	ldr	r1, [r7, #24]
 80060f6:	0148      	lsls	r0, r1, #5
 80060f8:	69f9      	ldr	r1, [r7, #28]
 80060fa:	4401      	add	r1, r0
 80060fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006100:	4313      	orrs	r3, r2
 8006102:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800611a:	69b9      	ldr	r1, [r7, #24]
 800611c:	0148      	lsls	r0, r1, #5
 800611e:	69f9      	ldr	r1, [r7, #28]
 8006120:	4401      	add	r1, r0
 8006122:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006126:	4313      	orrs	r3, r2
 8006128:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	791b      	ldrb	r3, [r3, #4]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d11f      	bne.n	8006172 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006150:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006170:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d14b      	bne.n	8006210 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	461a      	mov	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	791b      	ldrb	r3, [r3, #4]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d128      	bne.n	80061ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d110      	bne.n	80061ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e00f      	b.n	80061ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006208:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e133      	b.n	8006478 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800622e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	791b      	ldrb	r3, [r3, #4]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d015      	beq.n	8006264 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 811b 	beq.w	8006478 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	2101      	movs	r1, #1
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	69f9      	ldr	r1, [r7, #28]
 800625a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800625e:	4313      	orrs	r3, r2
 8006260:	634b      	str	r3, [r1, #52]	; 0x34
 8006262:	e109      	b.n	8006478 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d110      	bne.n	8006296 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e00f      	b.n	80062b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6919      	ldr	r1, [r3, #16]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	781a      	ldrb	r2, [r3, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	b298      	uxth	r0, r3
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4603      	mov	r3, r0
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fade 	bl	800688c <USB_WritePacket>
 80062d0:	e0d2      	b.n	8006478 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ec:	0cdb      	lsrs	r3, r3, #19
 80062ee:	04db      	lsls	r3, r3, #19
 80062f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006310:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006314:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d126      	bne.n	800636c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006334:	69b9      	ldr	r1, [r7, #24]
 8006336:	0148      	lsls	r0, r1, #5
 8006338:	69f9      	ldr	r1, [r7, #28]
 800633a:	4401      	add	r1, r0
 800633c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006340:	4313      	orrs	r3, r2
 8006342:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006362:	6113      	str	r3, [r2, #16]
 8006364:	e03a      	b.n	80063dc <USB_EPStartXfer+0x3e4>
 8006366:	bf00      	nop
 8006368:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	699a      	ldr	r2, [r3, #24]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4413      	add	r3, r2
 8006376:	1e5a      	subs	r2, r3, #1
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006380:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	8afa      	ldrh	r2, [r7, #22]
 8006388:	fb03 f202 	mul.w	r2, r3, r2
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	691a      	ldr	r2, [r3, #16]
 800639e:	8afb      	ldrh	r3, [r7, #22]
 80063a0:	04d9      	lsls	r1, r3, #19
 80063a2:	4b38      	ldr	r3, [pc, #224]	; (8006484 <USB_EPStartXfer+0x48c>)
 80063a4:	400b      	ands	r3, r1
 80063a6:	69b9      	ldr	r1, [r7, #24]
 80063a8:	0148      	lsls	r0, r1, #5
 80063aa:	69f9      	ldr	r1, [r7, #28]
 80063ac:	4401      	add	r1, r0
 80063ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	0148      	lsls	r0, r1, #5
 80063d0:	69f9      	ldr	r1, [r7, #28]
 80063d2:	4401      	add	r1, r0
 80063d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063d8:	4313      	orrs	r3, r2
 80063da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10d      	bne.n	80063fe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d009      	beq.n	80063fe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6919      	ldr	r1, [r3, #16]
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	460a      	mov	r2, r1
 80063fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	791b      	ldrb	r3, [r3, #4]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d128      	bne.n	8006458 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d110      	bne.n	8006438 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e00f      	b.n	8006458 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006456:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	1ff80000 	.word	0x1ff80000

08006488 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	f040 80ce 	bne.w	8006646 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d132      	bne.n	8006518 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	0cdb      	lsrs	r3, r3, #19
 8006512:	04db      	lsls	r3, r3, #19
 8006514:	6113      	str	r3, [r2, #16]
 8006516:	e04e      	b.n	80065b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006532:	0cdb      	lsrs	r3, r3, #19
 8006534:	04db      	lsls	r3, r3, #19
 8006536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006556:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800655a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	429a      	cmp	r2, r3
 8006566:	d903      	bls.n	8006570 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800658e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a6:	6939      	ldr	r1, [r7, #16]
 80065a8:	0148      	lsls	r0, r1, #5
 80065aa:	6979      	ldr	r1, [r7, #20]
 80065ac:	4401      	add	r1, r0
 80065ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065b2:	4313      	orrs	r3, r2
 80065b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d11e      	bne.n	80065fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	461a      	mov	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	e097      	b.n	800672a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006614:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006618:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8083 	beq.w	800672a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	2101      	movs	r1, #1
 8006636:	fa01 f303 	lsl.w	r3, r1, r3
 800663a:	6979      	ldr	r1, [r7, #20]
 800663c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006640:	4313      	orrs	r3, r2
 8006642:	634b      	str	r3, [r1, #52]	; 0x34
 8006644:	e071      	b.n	800672a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006660:	0cdb      	lsrs	r3, r3, #19
 8006662:	04db      	lsls	r3, r3, #19
 8006664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006688:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d8:	6939      	ldr	r1, [r7, #16]
 80066da:	0148      	lsls	r0, r1, #5
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	4401      	add	r1, r0
 80066e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066e4:	4313      	orrs	r3, r2
 80066e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d10d      	bne.n	800670a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6919      	ldr	r1, [r3, #16]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006706:	460a      	mov	r2, r1
 8006708:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	440a      	add	r2, r1
 8006720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006728:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d14a      	bne.n	80067ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800676a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800676e:	f040 8086 	bne.w	800687e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	7812      	ldrb	r2, [r2, #0]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006790:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006794:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d902      	bls.n	80067d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
          break;
 80067ce:	e056      	b.n	800687e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067e8:	d0e7      	beq.n	80067ba <USB_EPStopXfer+0x82>
 80067ea:	e048      	b.n	800687e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006804:	d13b      	bne.n	800687e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	7812      	ldrb	r2, [r2, #0]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006824:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006828:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800684c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f242 7210 	movw	r2, #10000	; 0x2710
 800685a:	4293      	cmp	r3, r2
 800685c:	d902      	bls.n	8006864 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
          break;
 8006862:	e00c      	b.n	800687e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800687c:	d0e7      	beq.n	800684e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006880:	4618      	mov	r0, r3
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800688c:	b480      	push	{r7}
 800688e:	b089      	sub	sp, #36	; 0x24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4611      	mov	r1, r2
 8006898:	461a      	mov	r2, r3
 800689a:	460b      	mov	r3, r1
 800689c:	71fb      	strb	r3, [r7, #7]
 800689e:	4613      	mov	r3, r2
 80068a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d123      	bne.n	80068fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068b2:	88bb      	ldrh	r3, [r7, #4]
 80068b4:	3303      	adds	r3, #3
 80068b6:	089b      	lsrs	r3, r3, #2
 80068b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	e018      	b.n	80068f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	031a      	lsls	r2, r3, #12
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068cc:	461a      	mov	r2, r3
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	3301      	adds	r3, #1
 80068d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	3301      	adds	r3, #1
 80068de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	3301      	adds	r3, #1
 80068e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3301      	adds	r3, #1
 80068ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	3301      	adds	r3, #1
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d3e2      	bcc.n	80068c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3724      	adds	r7, #36	; 0x24
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006908:	b480      	push	{r7}
 800690a:	b08b      	sub	sp, #44	; 0x2c
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800691e:	88fb      	ldrh	r3, [r7, #6]
 8006920:	089b      	lsrs	r3, r3, #2
 8006922:	b29b      	uxth	r3, r3
 8006924:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	623b      	str	r3, [r7, #32]
 8006932:	e014      	b.n	800695e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	3301      	adds	r3, #1
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	3301      	adds	r3, #1
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	3301      	adds	r3, #1
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	3301      	adds	r3, #1
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	3301      	adds	r3, #1
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	6a3a      	ldr	r2, [r7, #32]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	429a      	cmp	r2, r3
 8006964:	d3e6      	bcc.n	8006934 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006966:	8bfb      	ldrh	r3, [r7, #30]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01e      	beq.n	80069aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006976:	461a      	mov	r2, r3
 8006978:	f107 0310 	add.w	r3, r7, #16
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	fa22 f303 	lsr.w	r3, r2, r3
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	701a      	strb	r2, [r3, #0]
      i++;
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	3301      	adds	r3, #1
 8006996:	623b      	str	r3, [r7, #32]
      pDest++;
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	3301      	adds	r3, #1
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800699e:	8bfb      	ldrh	r3, [r7, #30]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069a4:	8bfb      	ldrh	r3, [r7, #30]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ea      	bne.n	8006980 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	372c      	adds	r7, #44	; 0x2c
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d12c      	bne.n	8006a2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	db12      	blt.n	8006a0c <USB_EPSetStall+0x54>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00f      	beq.n	8006a0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	e02b      	b.n	8006a86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	db12      	blt.n	8006a66 <USB_EPSetStall+0xae>
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00f      	beq.n	8006a66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d128      	bne.n	8006b02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ace:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	791b      	ldrb	r3, [r3, #4]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d003      	beq.n	8006ae0 <USB_EPClearStall+0x4c>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	791b      	ldrb	r3, [r3, #4]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d138      	bne.n	8006b52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	0151      	lsls	r1, r2, #5
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	440a      	add	r2, r1
 8006af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	e027      	b.n	8006b52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	791b      	ldrb	r3, [r3, #4]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d003      	beq.n	8006b32 <USB_EPClearStall+0x9e>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	791b      	ldrb	r3, [r3, #4]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d10f      	bne.n	8006b52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b94:	68f9      	ldr	r1, [r7, #12]
 8006b96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bda:	f023 0302 	bic.w	r3, r3, #2
 8006bde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c08:	f023 0303 	bic.w	r3, r3, #3
 8006c0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c1c:	f043 0302 	orr.w	r3, r3, #2
 8006c20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4013      	ands	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c48:	68fb      	ldr	r3, [r7, #12]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	0c1b      	lsrs	r3, r3, #16
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	b29b      	uxth	r3, r3
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cec:	68bb      	ldr	r3, [r7, #8]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b087      	sub	sp, #28
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	460b      	mov	r3, r1
 8006d04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	fa22 f303 	lsr.w	r3, r2, r3
 8006d2a:	01db      	lsls	r3, r3, #7
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4013      	ands	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d48:	68bb      	ldr	r3, [r7, #8]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	f003 0301 	and.w	r3, r3, #1
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b085      	sub	sp, #20
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d90:	f023 0307 	bic.w	r3, r3, #7
 8006d94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006da8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	333c      	adds	r3, #60	; 0x3c
 8006dce:	3304      	adds	r3, #4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4a26      	ldr	r2, [pc, #152]	; (8006e70 <USB_EP0_OutStart+0xb8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d90a      	bls.n	8006df2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dec:	d101      	bne.n	8006df2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e037      	b.n	8006e62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e20:	f043 0318 	orr.w	r3, r3, #24
 8006e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d10f      	bne.n	8006e60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006e5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	4f54300a 	.word	0x4f54300a

08006e74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3301      	adds	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <USB_CoreReset+0x64>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e01b      	b.n	8006eca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	daf2      	bge.n	8006e80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f043 0201 	orr.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a09      	ldr	r2, [pc, #36]	; (8006ed8 <USB_CoreReset+0x64>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d901      	bls.n	8006ebc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e006      	b.n	8006eca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d0f0      	beq.n	8006eaa <USB_CoreReset+0x36>

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	00030d40 	.word	0x00030d40

08006edc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006ee0:	4904      	ldr	r1, [pc, #16]	; (8006ef4 <MX_FATFS_Init+0x18>)
 8006ee2:	4805      	ldr	r0, [pc, #20]	; (8006ef8 <MX_FATFS_Init+0x1c>)
 8006ee4:	f003 fb66 	bl	800a5b4 <FATFS_LinkDriver>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	4b03      	ldr	r3, [pc, #12]	; (8006efc <MX_FATFS_Init+0x20>)
 8006eee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20000414 	.word	0x20000414
 8006ef8:	2000000c 	.word	0x2000000c
 8006efc:	20000410 	.word	0x20000410

08006f00 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <USER_initialize+0x24>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <USER_initialize+0x24>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000009 	.word	0x20000009

08006f28 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <USER_status+0x24>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <USER_status+0x24>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20000009 	.word	0x20000009

08006f50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006f60:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006f7e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	603a      	str	r2, [r7, #0]
 8006f96:	71fb      	strb	r3, [r7, #7]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
    return res;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006fbc:	f44f 701d 	mov.w	r0, #628	; 0x274
 8006fc0:	f004 f80c 	bl	800afdc <USBD_static_malloc>
 8006fc4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d109      	bne.n	8006fe0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	32b0      	adds	r2, #176	; 0xb0
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e06e      	b.n	80070be <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	32b0      	adds	r2, #176	; 0xb0
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32b0      	adds	r2, #176	; 0xb0
 8006ffa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7c1b      	ldrb	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d12b      	bne.n	8007064 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800700c:	4b2e      	ldr	r3, [pc, #184]	; (80070c8 <USBD_MSC_Init+0x118>)
 800700e:	7819      	ldrb	r1, [r3, #0]
 8007010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007014:	2202      	movs	r2, #2
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f003 fe4f 	bl	800acba <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800701c:	4b2a      	ldr	r3, [pc, #168]	; (80070c8 <USBD_MSC_Init+0x118>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007034:	2201      	movs	r2, #1
 8007036:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007038:	4b24      	ldr	r3, [pc, #144]	; (80070cc <USBD_MSC_Init+0x11c>)
 800703a:	7819      	ldrb	r1, [r3, #0]
 800703c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007040:	2202      	movs	r2, #2
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f003 fe39 	bl	800acba <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007048:	4b20      	ldr	r3, [pc, #128]	; (80070cc <USBD_MSC_Init+0x11c>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f003 020f 	and.w	r2, r3, #15
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	3324      	adds	r3, #36	; 0x24
 800705e:	2201      	movs	r2, #1
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	e028      	b.n	80070b6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007064:	4b18      	ldr	r3, [pc, #96]	; (80070c8 <USBD_MSC_Init+0x118>)
 8007066:	7819      	ldrb	r1, [r3, #0]
 8007068:	2340      	movs	r3, #64	; 0x40
 800706a:	2202      	movs	r2, #2
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f003 fe24 	bl	800acba <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <USBD_MSC_Init+0x118>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f003 020f 	and.w	r2, r3, #15
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800708a:	2201      	movs	r2, #1
 800708c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <USBD_MSC_Init+0x11c>)
 8007090:	7819      	ldrb	r1, [r3, #0]
 8007092:	2340      	movs	r3, #64	; 0x40
 8007094:	2202      	movs	r2, #2
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f003 fe0f 	bl	800acba <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <USBD_MSC_Init+0x11c>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	f003 020f 	and.w	r2, r3, #15
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	3324      	adds	r3, #36	; 0x24
 80070b2:	2201      	movs	r2, #1
 80070b4:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa2c 	bl	8007514 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000083 	.word	0x20000083
 80070cc:	20000082 	.word	0x20000082

080070d0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80070dc:	4b26      	ldr	r3, [pc, #152]	; (8007178 <USBD_MSC_DeInit+0xa8>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f003 fe0f 	bl	800ad06 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80070e8:	4b23      	ldr	r3, [pc, #140]	; (8007178 <USBD_MSC_DeInit+0xa8>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	f003 020f 	and.w	r2, r3, #15
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007100:	2200      	movs	r2, #0
 8007102:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8007104:	4b1d      	ldr	r3, [pc, #116]	; (800717c <USBD_MSC_DeInit+0xac>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f003 fdfb 	bl	800ad06 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <USBD_MSC_DeInit+0xac>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	f003 020f 	and.w	r2, r3, #15
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	3324      	adds	r3, #36	; 0x24
 8007126:	2200      	movs	r2, #0
 8007128:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	32b0      	adds	r2, #176	; 0xb0
 8007134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d018      	beq.n	800716e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fa67 	bl	8007610 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	32b0      	adds	r2, #176	; 0xb0
 800714c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007150:	4618      	mov	r0, r3
 8007152:	f003 ff51 	bl	800aff8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	32b0      	adds	r2, #176	; 0xb0
 8007160:	2100      	movs	r1, #0
 8007162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000083 	.word	0x20000083
 800717c:	20000082 	.word	0x20000082

08007180 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	32b0      	adds	r2, #176	; 0xb0
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e0e1      	b.n	8007370 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d053      	beq.n	8007260 <USBD_MSC_Setup+0xe0>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	f040 80d1 	bne.w	8007360 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	785b      	ldrb	r3, [r3, #1]
 80071c2:	2bfe      	cmp	r3, #254	; 0xfe
 80071c4:	d002      	beq.n	80071cc <USBD_MSC_Setup+0x4c>
 80071c6:	2bff      	cmp	r3, #255	; 0xff
 80071c8:	d02a      	beq.n	8007220 <USBD_MSC_Setup+0xa0>
 80071ca:	e041      	b.n	8007250 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	885b      	ldrh	r3, [r3, #2]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d11e      	bne.n	8007212 <USBD_MSC_Setup+0x92>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	88db      	ldrh	r3, [r3, #6]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d11a      	bne.n	8007212 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da15      	bge.n	8007212 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	33b0      	adds	r3, #176	; 0xb0
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	4798      	blx	r3
 80071fa:	4603      	mov	r3, r0
 80071fc:	461a      	mov	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2201      	movs	r2, #1
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f003 f923 	bl	800a454 <USBD_CtlSendData>
 800720e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007210:	e025      	b.n	800725e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f003 f8ac 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 800721a:	2303      	movs	r3, #3
 800721c:	75fb      	strb	r3, [r7, #23]
          break;
 800721e:	e01e      	b.n	800725e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	885b      	ldrh	r3, [r3, #2]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10c      	bne.n	8007242 <USBD_MSC_Setup+0xc2>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	88db      	ldrh	r3, [r3, #6]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d108      	bne.n	8007242 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007236:	2b00      	cmp	r3, #0
 8007238:	db03      	blt.n	8007242 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9b4 	bl	80075a8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007240:	e00d      	b.n	800725e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f003 f894 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 800724a:	2303      	movs	r3, #3
 800724c:	75fb      	strb	r3, [r7, #23]
          break;
 800724e:	e006      	b.n	800725e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f003 f88d 	bl	800a372 <USBD_CtlError>
          ret = USBD_FAIL;
 8007258:	2303      	movs	r3, #3
 800725a:	75fb      	strb	r3, [r7, #23]
          break;
 800725c:	bf00      	nop
      }
      break;
 800725e:	e086      	b.n	800736e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b0b      	cmp	r3, #11
 8007266:	d872      	bhi.n	800734e <USBD_MSC_Setup+0x1ce>
 8007268:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <USBD_MSC_Setup+0xf0>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	080072a1 	.word	0x080072a1
 8007274:	0800731d 	.word	0x0800731d
 8007278:	0800734f 	.word	0x0800734f
 800727c:	0800734f 	.word	0x0800734f
 8007280:	0800734f 	.word	0x0800734f
 8007284:	0800734f 	.word	0x0800734f
 8007288:	0800734f 	.word	0x0800734f
 800728c:	0800734f 	.word	0x0800734f
 8007290:	0800734f 	.word	0x0800734f
 8007294:	0800734f 	.word	0x0800734f
 8007298:	080072cb 	.word	0x080072cb
 800729c:	080072f5 	.word	0x080072f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d107      	bne.n	80072bc <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80072ac:	f107 030e 	add.w	r3, r7, #14
 80072b0:	2202      	movs	r2, #2
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f003 f8cd 	bl	800a454 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ba:	e050      	b.n	800735e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f003 f857 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 80072c4:	2303      	movs	r3, #3
 80072c6:	75fb      	strb	r3, [r7, #23]
          break;
 80072c8:	e049      	b.n	800735e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d107      	bne.n	80072e6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3304      	adds	r3, #4
 80072da:	2201      	movs	r2, #1
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f003 f8b8 	bl	800a454 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072e4:	e03b      	b.n	800735e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f003 f842 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 80072ee:	2303      	movs	r3, #3
 80072f0:	75fb      	strb	r3, [r7, #23]
          break;
 80072f2:	e034      	b.n	800735e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d106      	bne.n	800730e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	885b      	ldrh	r3, [r3, #2]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800730c:	e027      	b.n	800735e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f003 f82e 	bl	800a372 <USBD_CtlError>
            ret = USBD_FAIL;
 8007316:	2303      	movs	r3, #3
 8007318:	75fb      	strb	r3, [r7, #23]
          break;
 800731a:	e020      	b.n	800735e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b03      	cmp	r3, #3
 8007326:	d119      	bne.n	800735c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	885b      	ldrh	r3, [r3, #2]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d115      	bne.n	800735c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	889b      	ldrh	r3, [r3, #4]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f003 fd03 	bl	800ad44 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	889b      	ldrh	r3, [r3, #4]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fb2e 	bl	80079a8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800734c:	e006      	b.n	800735c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f003 f80e 	bl	800a372 <USBD_CtlError>
          ret = USBD_FAIL;
 8007356:	2303      	movs	r3, #3
 8007358:	75fb      	strb	r3, [r7, #23]
          break;
 800735a:	e000      	b.n	800735e <USBD_MSC_Setup+0x1de>
          break;
 800735c:	bf00      	nop
      }
      break;
 800735e:	e006      	b.n	800736e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f003 f805 	bl	800a372 <USBD_CtlError>
      ret = USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	75fb      	strb	r3, [r7, #23]
      break;
 800736c:	bf00      	nop
  }

  return (uint8_t)ret;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f959 	bl	8007640 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f983 	bl	80076b4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80073c0:	2181      	movs	r1, #129	; 0x81
 80073c2:	4812      	ldr	r0, [pc, #72]	; (800740c <USBD_MSC_GetHSCfgDesc+0x54>)
 80073c4:	f002 f972 	bl	80096ac <USBD_GetEpDesc>
 80073c8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80073ca:	2101      	movs	r1, #1
 80073cc:	480f      	ldr	r0, [pc, #60]	; (800740c <USBD_MSC_GetHSCfgDesc+0x54>)
 80073ce:	f002 f96d 	bl	80096ac <USBD_GetEpDesc>
 80073d2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d006      	beq.n	80073e8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	711a      	strb	r2, [r3, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f042 0202 	orr.w	r2, r2, #2
 80073e6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	711a      	strb	r2, [r3, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f042 0202 	orr.w	r2, r2, #2
 80073fa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007402:	4b02      	ldr	r3, [pc, #8]	; (800740c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000058 	.word	0x20000058

08007410 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8007418:	2181      	movs	r1, #129	; 0x81
 800741a:	4812      	ldr	r0, [pc, #72]	; (8007464 <USBD_MSC_GetFSCfgDesc+0x54>)
 800741c:	f002 f946 	bl	80096ac <USBD_GetEpDesc>
 8007420:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8007422:	2101      	movs	r1, #1
 8007424:	480f      	ldr	r0, [pc, #60]	; (8007464 <USBD_MSC_GetFSCfgDesc+0x54>)
 8007426:	f002 f941 	bl	80096ac <USBD_GetEpDesc>
 800742a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800743a:	711a      	strb	r2, [r3, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d006      	beq.n	8007454 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800744e:	711a      	strb	r2, [r3, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800745a:	4b02      	ldr	r3, [pc, #8]	; (8007464 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000058 	.word	0x20000058

08007468 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8007470:	2181      	movs	r1, #129	; 0x81
 8007472:	4812      	ldr	r0, [pc, #72]	; (80074bc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8007474:	f002 f91a 	bl	80096ac <USBD_GetEpDesc>
 8007478:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800747a:	2101      	movs	r1, #1
 800747c:	480f      	ldr	r0, [pc, #60]	; (80074bc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800747e:	f002 f915 	bl	80096ac <USBD_GetEpDesc>
 8007482:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d006      	beq.n	8007498 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007492:	711a      	strb	r2, [r3, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d006      	beq.n	80074ac <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a6:	711a      	strb	r2, [r3, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80074b2:	4b02      	ldr	r3, [pc, #8]	; (80074bc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000058 	.word	0x20000058

080074c0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	220a      	movs	r2, #10
 80074cc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80074ce:	4b03      	ldr	r3, [pc, #12]	; (80074dc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000078 	.word	0x20000078

080074e0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e009      	b.n	8007508 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	33b0      	adds	r3, #176	; 0xb0
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	32b0      	adds	r2, #176	; 0xb0
 8007526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d032      	beq.n	8007598 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	33b0      	adds	r3, #176	; 0xb0
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2000      	movs	r0, #0
 800756a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800756c:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <MSC_BOT_Init+0x8c>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f003 fbe6 	bl	800ad44 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <MSC_BOT_Init+0x90>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f003 fbe0 	bl	800ad44 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <MSC_BOT_Init+0x8c>)
 8007586:	7819      	ldrb	r1, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800758e:	231f      	movs	r3, #31
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f003 fca0 	bl	800aed6 <USBD_LL_PrepareReceive>
 8007596:	e000      	b.n	800759a <MSC_BOT_Init+0x86>
    return;
 8007598:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000083 	.word	0x20000083
 80075a4:	20000082 	.word	0x20000082

080075a8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	32b0      	adds	r2, #176	; 0xb0
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01b      	beq.n	80075fe <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80075d2:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <MSC_BOT_Reset+0x60>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f003 fbf1 	bl	800adc0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80075de:	4b0b      	ldr	r3, [pc, #44]	; (800760c <MSC_BOT_Reset+0x64>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f003 fbeb 	bl	800adc0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <MSC_BOT_Reset+0x64>)
 80075ec:	7819      	ldrb	r1, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80075f4:	231f      	movs	r3, #31
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f003 fc6d 	bl	800aed6 <USBD_LL_PrepareReceive>
 80075fc:	e000      	b.n	8007600 <MSC_BOT_Reset+0x58>
    return;
 80075fe:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000082 	.word	0x20000082
 800760c:	20000083 	.word	0x20000083

08007610 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32b0      	adds	r2, #176	; 0xb0
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	721a      	strb	r2, [r3, #8]
  }
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32b0      	adds	r2, #176	; 0xb0
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d020      	beq.n	80076a4 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	7a1b      	ldrb	r3, [r3, #8]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d005      	beq.n	8007676 <MSC_BOT_DataIn+0x36>
 800766a:	2b02      	cmp	r3, #2
 800766c:	db1c      	blt.n	80076a8 <MSC_BOT_DataIn+0x68>
 800766e:	3b03      	subs	r3, #3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d819      	bhi.n	80076a8 <MSC_BOT_DataIn+0x68>
 8007674:	e011      	b.n	800769a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007682:	461a      	mov	r2, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f9c9 	bl	8007a1c <SCSI_ProcessCmd>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	da0d      	bge.n	80076ac <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007690:	2101      	movs	r1, #1
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f90c 	bl	80078b0 <MSC_BOT_SendCSW>
      }
      break;
 8007698:	e008      	b.n	80076ac <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800769a:	2100      	movs	r1, #0
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f907 	bl	80078b0 <MSC_BOT_SendCSW>
      break;
 80076a2:	e004      	b.n	80076ae <MSC_BOT_DataIn+0x6e>
    return;
 80076a4:	bf00      	nop
 80076a6:	e002      	b.n	80076ae <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80076a8:	bf00      	nop
 80076aa:	e000      	b.n	80076ae <MSC_BOT_DataIn+0x6e>
      break;
 80076ac:	bf00      	nop
  }
}
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32b0      	adds	r2, #176	; 0xb0
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d01c      	beq.n	8007710 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	7a1b      	ldrb	r3, [r3, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <MSC_BOT_DataOut+0x30>
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d004      	beq.n	80076ec <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80076e2:	e018      	b.n	8007716 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f819 	bl	800771c <MSC_BOT_CBW_Decode>
      break;
 80076ea:	e014      	b.n	8007716 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80076f8:	461a      	mov	r2, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f98e 	bl	8007a1c <SCSI_ProcessCmd>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	da06      	bge.n	8007714 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007706:	2101      	movs	r1, #1
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f8d1 	bl	80078b0 <MSC_BOT_SendCSW>
      break;
 800770e:	e001      	b.n	8007714 <MSC_BOT_DataOut+0x60>
    return;
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <MSC_BOT_DataOut+0x62>
      break;
 8007714:	bf00      	nop
  }
}
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32b0      	adds	r2, #176	; 0xb0
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d079      	beq.n	800782e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8007752:	4b3a      	ldr	r3, [pc, #232]	; (800783c <MSC_BOT_CBW_Decode+0x120>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f003 fbdd 	bl	800af18 <USBD_LL_GetRxDataSize>
 800775e:	4603      	mov	r3, r0
 8007760:	2b1f      	cmp	r3, #31
 8007762:	d114      	bne.n	800778e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800776a:	4a35      	ldr	r2, [pc, #212]	; (8007840 <MSC_BOT_CBW_Decode+0x124>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d10e      	bne.n	800778e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007776:	2b01      	cmp	r3, #1
 8007778:	d809      	bhi.n	800778e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800778a:	2b10      	cmp	r3, #16
 800778c:	d90e      	bls.n	80077ac <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007794:	2320      	movs	r3, #32
 8007796:	2205      	movs	r2, #5
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fe28 	bl	80083ee <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2202      	movs	r2, #2
 80077a2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f8bd 	bl	8007924 <MSC_BOT_Abort>
 80077aa:	e043      	b.n	8007834 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80077b8:	461a      	mov	r2, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f92e 	bl	8007a1c <SCSI_ProcessCmd>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	da0c      	bge.n	80077e0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	7a1b      	ldrb	r3, [r3, #8]
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d104      	bne.n	80077d8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80077ce:	2101      	movs	r1, #1
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f86d 	bl	80078b0 <MSC_BOT_SendCSW>
 80077d6:	e02d      	b.n	8007834 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f8a3 	bl	8007924 <MSC_BOT_Abort>
 80077de:	e029      	b.n	8007834 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	7a1b      	ldrb	r3, [r3, #8]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d024      	beq.n	8007832 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d020      	beq.n	8007832 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d01c      	beq.n	8007832 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f103 0110 	add.w	r1, r3, #16
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	461a      	mov	r2, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f819 	bl	8007844 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007812:	e00f      	b.n	8007834 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800781c:	2100      	movs	r1, #0
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f846 	bl	80078b0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007824:	e006      	b.n	8007834 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f87c 	bl	8007924 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800782c:	e002      	b.n	8007834 <MSC_BOT_CBW_Decode+0x118>
    return;
 800782e:	bf00      	nop
 8007830:	e000      	b.n	8007834 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8007832:	bf00      	nop
    }
  }
}
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000083 	.word	0x20000083
 8007840:	43425355 	.word	0x43425355

08007844 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	32b0      	adds	r2, #176	; 0xb0
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01e      	beq.n	80078a4 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4293      	cmp	r3, r2
 8007870:	bf28      	it	cs
 8007872:	4613      	movcs	r3, r2
 8007874:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2204      	movs	r2, #4
 8007892:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <MSC_BOT_SendData+0x68>)
 8007896:	7819      	ldrb	r1, [r3, #0]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f003 faf9 	bl	800ae94 <USBD_LL_Transmit>
 80078a2:	e000      	b.n	80078a6 <MSC_BOT_SendData+0x62>
    return;
 80078a4:	bf00      	nop
}
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000082 	.word	0x20000082

080078b0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32b0      	adds	r2, #176	; 0xb0
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d01d      	beq.n	800790e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4a10      	ldr	r2, [pc, #64]	; (8007918 <MSC_BOT_SendCSW+0x68>)
 80078d6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <MSC_BOT_SendCSW+0x6c>)
 80078ea:	7819      	ldrb	r1, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80078f2:	230d      	movs	r3, #13
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f003 facd 	bl	800ae94 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80078fa:	4b09      	ldr	r3, [pc, #36]	; (8007920 <MSC_BOT_SendCSW+0x70>)
 80078fc:	7819      	ldrb	r1, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007904:	231f      	movs	r3, #31
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f003 fae5 	bl	800aed6 <USBD_LL_PrepareReceive>
 800790c:	e000      	b.n	8007910 <MSC_BOT_SendCSW+0x60>
    return;
 800790e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	53425355 	.word	0x53425355
 800791c:	20000082 	.word	0x20000082
 8007920:	20000083 	.word	0x20000083

08007924 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	32b0      	adds	r2, #176	; 0xb0
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d02a      	beq.n	8007998 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10e      	bne.n	800796a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800795e:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <MSC_BOT_Abort+0x7c>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f003 fa0c 	bl	800ad82 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800796a:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <MSC_BOT_Abort+0x80>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f003 fa06 	bl	800ad82 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	7a5b      	ldrb	r3, [r3, #9]
 800797a:	2b02      	cmp	r3, #2
 800797c:	d10d      	bne.n	800799a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800797e:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <MSC_BOT_Abort+0x80>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f003 f9fc 	bl	800ad82 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <MSC_BOT_Abort+0x7c>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f003 f9f6 	bl	800ad82 <USBD_LL_StallEP>
 8007996:	e000      	b.n	800799a <MSC_BOT_Abort+0x76>
    return;
 8007998:	bf00      	nop
  }
}
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	20000083 	.word	0x20000083
 80079a4:	20000082 	.word	0x20000082

080079a8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32b0      	adds	r2, #176	; 0xb0
 80079be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01d      	beq.n	8007a06 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	7a5b      	ldrb	r3, [r3, #9]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d10c      	bne.n	80079ec <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80079d2:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <MSC_BOT_CplClrFeature+0x6c>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f003 f9d2 	bl	800ad82 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80079de:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <MSC_BOT_CplClrFeature+0x70>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f003 f9cc 	bl	800ad82 <USBD_LL_StallEP>
 80079ea:	e00f      	b.n	8007a0c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80079ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da0a      	bge.n	8007a0a <MSC_BOT_CplClrFeature+0x62>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	7a5b      	ldrb	r3, [r3, #9]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d006      	beq.n	8007a0a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80079fc:	2101      	movs	r1, #1
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff ff56 	bl	80078b0 <MSC_BOT_SendCSW>
 8007a04:	e002      	b.n	8007a0c <MSC_BOT_CplClrFeature+0x64>
    return;
 8007a06:	bf00      	nop
 8007a08:	e000      	b.n	8007a0c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8007a0a:	bf00      	nop
  }
}
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000082 	.word	0x20000082
 8007a18:	20000083 	.word	0x20000083

08007a1c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	460b      	mov	r3, r1
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	32b0      	adds	r2, #176	; 0xb0
 8007a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a38:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d102      	bne.n	8007a46 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	e168      	b.n	8007d18 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2baa      	cmp	r3, #170	; 0xaa
 8007a4c:	f000 8144 	beq.w	8007cd8 <SCSI_ProcessCmd+0x2bc>
 8007a50:	2baa      	cmp	r3, #170	; 0xaa
 8007a52:	f300 8153 	bgt.w	8007cfc <SCSI_ProcessCmd+0x2e0>
 8007a56:	2ba8      	cmp	r3, #168	; 0xa8
 8007a58:	f000 812c 	beq.w	8007cb4 <SCSI_ProcessCmd+0x298>
 8007a5c:	2ba8      	cmp	r3, #168	; 0xa8
 8007a5e:	f300 814d 	bgt.w	8007cfc <SCSI_ProcessCmd+0x2e0>
 8007a62:	2b5a      	cmp	r3, #90	; 0x5a
 8007a64:	f300 80c0 	bgt.w	8007be8 <SCSI_ProcessCmd+0x1cc>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f2c0 8147 	blt.w	8007cfc <SCSI_ProcessCmd+0x2e0>
 8007a6e:	2b5a      	cmp	r3, #90	; 0x5a
 8007a70:	f200 8144 	bhi.w	8007cfc <SCSI_ProcessCmd+0x2e0>
 8007a74:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <SCSI_ProcessCmd+0x60>)
 8007a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7a:	bf00      	nop
 8007a7c:	08007bef 	.word	0x08007bef
 8007a80:	08007cfd 	.word	0x08007cfd
 8007a84:	08007cfd 	.word	0x08007cfd
 8007a88:	08007c01 	.word	0x08007c01
 8007a8c:	08007cfd 	.word	0x08007cfd
 8007a90:	08007cfd 	.word	0x08007cfd
 8007a94:	08007cfd 	.word	0x08007cfd
 8007a98:	08007cfd 	.word	0x08007cfd
 8007a9c:	08007cfd 	.word	0x08007cfd
 8007aa0:	08007cfd 	.word	0x08007cfd
 8007aa4:	08007cfd 	.word	0x08007cfd
 8007aa8:	08007cfd 	.word	0x08007cfd
 8007aac:	08007cfd 	.word	0x08007cfd
 8007ab0:	08007cfd 	.word	0x08007cfd
 8007ab4:	08007cfd 	.word	0x08007cfd
 8007ab8:	08007cfd 	.word	0x08007cfd
 8007abc:	08007cfd 	.word	0x08007cfd
 8007ac0:	08007cfd 	.word	0x08007cfd
 8007ac4:	08007c13 	.word	0x08007c13
 8007ac8:	08007cfd 	.word	0x08007cfd
 8007acc:	08007cfd 	.word	0x08007cfd
 8007ad0:	08007cfd 	.word	0x08007cfd
 8007ad4:	08007cfd 	.word	0x08007cfd
 8007ad8:	08007cfd 	.word	0x08007cfd
 8007adc:	08007cfd 	.word	0x08007cfd
 8007ae0:	08007cfd 	.word	0x08007cfd
 8007ae4:	08007c49 	.word	0x08007c49
 8007ae8:	08007c25 	.word	0x08007c25
 8007aec:	08007cfd 	.word	0x08007cfd
 8007af0:	08007cfd 	.word	0x08007cfd
 8007af4:	08007c37 	.word	0x08007c37
 8007af8:	08007cfd 	.word	0x08007cfd
 8007afc:	08007cfd 	.word	0x08007cfd
 8007b00:	08007cfd 	.word	0x08007cfd
 8007b04:	08007cfd 	.word	0x08007cfd
 8007b08:	08007c6d 	.word	0x08007c6d
 8007b0c:	08007cfd 	.word	0x08007cfd
 8007b10:	08007c7f 	.word	0x08007c7f
 8007b14:	08007cfd 	.word	0x08007cfd
 8007b18:	08007cfd 	.word	0x08007cfd
 8007b1c:	08007ca3 	.word	0x08007ca3
 8007b20:	08007cfd 	.word	0x08007cfd
 8007b24:	08007cc7 	.word	0x08007cc7
 8007b28:	08007cfd 	.word	0x08007cfd
 8007b2c:	08007cfd 	.word	0x08007cfd
 8007b30:	08007cfd 	.word	0x08007cfd
 8007b34:	08007cfd 	.word	0x08007cfd
 8007b38:	08007ceb 	.word	0x08007ceb
 8007b3c:	08007cfd 	.word	0x08007cfd
 8007b40:	08007cfd 	.word	0x08007cfd
 8007b44:	08007cfd 	.word	0x08007cfd
 8007b48:	08007cfd 	.word	0x08007cfd
 8007b4c:	08007cfd 	.word	0x08007cfd
 8007b50:	08007cfd 	.word	0x08007cfd
 8007b54:	08007cfd 	.word	0x08007cfd
 8007b58:	08007cfd 	.word	0x08007cfd
 8007b5c:	08007cfd 	.word	0x08007cfd
 8007b60:	08007cfd 	.word	0x08007cfd
 8007b64:	08007cfd 	.word	0x08007cfd
 8007b68:	08007cfd 	.word	0x08007cfd
 8007b6c:	08007cfd 	.word	0x08007cfd
 8007b70:	08007cfd 	.word	0x08007cfd
 8007b74:	08007cfd 	.word	0x08007cfd
 8007b78:	08007cfd 	.word	0x08007cfd
 8007b7c:	08007cfd 	.word	0x08007cfd
 8007b80:	08007cfd 	.word	0x08007cfd
 8007b84:	08007cfd 	.word	0x08007cfd
 8007b88:	08007cfd 	.word	0x08007cfd
 8007b8c:	08007cfd 	.word	0x08007cfd
 8007b90:	08007cfd 	.word	0x08007cfd
 8007b94:	08007cfd 	.word	0x08007cfd
 8007b98:	08007cfd 	.word	0x08007cfd
 8007b9c:	08007cfd 	.word	0x08007cfd
 8007ba0:	08007cfd 	.word	0x08007cfd
 8007ba4:	08007cfd 	.word	0x08007cfd
 8007ba8:	08007cfd 	.word	0x08007cfd
 8007bac:	08007cfd 	.word	0x08007cfd
 8007bb0:	08007cfd 	.word	0x08007cfd
 8007bb4:	08007cfd 	.word	0x08007cfd
 8007bb8:	08007cfd 	.word	0x08007cfd
 8007bbc:	08007cfd 	.word	0x08007cfd
 8007bc0:	08007cfd 	.word	0x08007cfd
 8007bc4:	08007cfd 	.word	0x08007cfd
 8007bc8:	08007cfd 	.word	0x08007cfd
 8007bcc:	08007cfd 	.word	0x08007cfd
 8007bd0:	08007cfd 	.word	0x08007cfd
 8007bd4:	08007cfd 	.word	0x08007cfd
 8007bd8:	08007cfd 	.word	0x08007cfd
 8007bdc:	08007cfd 	.word	0x08007cfd
 8007be0:	08007cfd 	.word	0x08007cfd
 8007be4:	08007c5b 	.word	0x08007c5b
 8007be8:	2b9e      	cmp	r3, #158	; 0x9e
 8007bea:	d051      	beq.n	8007c90 <SCSI_ProcessCmd+0x274>
 8007bec:	e086      	b.n	8007cfc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f893 	bl	8007d20 <SCSI_TestUnitReady>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfe:	e089      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8007c00:	7afb      	ldrb	r3, [r7, #11]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4619      	mov	r1, r3
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fb6e 	bl	80082e8 <SCSI_RequestSense>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c10:	e080      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	4619      	mov	r1, r3
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f8db 	bl	8007dd4 <SCSI_Inquiry>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]
      break;
 8007c22:	e077      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fc2a 	bl	8008484 <SCSI_StartStopUnit>
 8007c30:	4603      	mov	r3, r0
 8007c32:	75fb      	strb	r3, [r7, #23]
      break;
 8007c34:	e06e      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007c36:	7afb      	ldrb	r3, [r7, #11]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fc76 	bl	800852e <SCSI_AllowPreventRemovable>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75fb      	strb	r3, [r7, #23]
      break;
 8007c46:	e065      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 faea 	bl	8008228 <SCSI_ModeSense6>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]
      break;
 8007c58:	e05c      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007c5a:	7afb      	ldrb	r3, [r7, #11]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fb11 	bl	8008288 <SCSI_ModeSense10>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6a:	e053      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4619      	mov	r1, r3
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fa5d 	bl	8008132 <SCSI_ReadFormatCapacity>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7c:	e04a      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	4619      	mov	r1, r3
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f923 	bl	8007ed0 <SCSI_ReadCapacity10>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8e:	e041      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	4619      	mov	r1, r3
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f998 	bl	8007fcc <SCSI_ReadCapacity16>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca0:	e038      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8007ca2:	7afb      	ldrb	r3, [r7, #11]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 fc6d 	bl	8008588 <SCSI_Read10>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb2:	e02f      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 fd0e 	bl	80086dc <SCSI_Read12>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc4:	e026      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fdb9 	bl	8008844 <SCSI_Write10>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd6:	e01d      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fe86 	bl	80089f0 <SCSI_Write12>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce8:	e014      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8007cea:	7afb      	ldrb	r3, [r7, #11]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 ff63 	bl	8008bbc <SCSI_Verify10>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cfa:	e00b      	b.n	8007d14 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007cfc:	7af9      	ldrb	r1, [r7, #11]
 8007cfe:	2320      	movs	r3, #32
 8007d00:	2205      	movs	r2, #5
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 fb73 	bl	80083ee <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8007d0e:	23ff      	movs	r3, #255	; 0xff
 8007d10:	75fb      	strb	r3, [r7, #23]
      break;
 8007d12:	bf00      	nop
  }

  return ret;
 8007d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	32b0      	adds	r2, #176	; 0xb0
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8007d44:	f04f 33ff 	mov.w	r3, #4294967295
 8007d48:	e03f      	b.n	8007dca <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	2205      	movs	r2, #5
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fb45 	bl	80083ee <SCSI_SenseCode>

    return -1;
 8007d64:	f04f 33ff 	mov.w	r3, #4294967295
 8007d68:	e02f      	b.n	8007dca <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d10b      	bne.n	8007d8c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d74:	7af9      	ldrb	r1, [r7, #11]
 8007d76:	233a      	movs	r3, #58	; 0x3a
 8007d78:	2202      	movs	r2, #2
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fb37 	bl	80083ee <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2205      	movs	r2, #5
 8007d84:	721a      	strb	r2, [r3, #8]
    return -1;
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	e01e      	b.n	8007dca <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	33b0      	adds	r3, #176	; 0xb0
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	7afa      	ldrb	r2, [r7, #11]
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007daa:	7af9      	ldrb	r1, [r7, #11]
 8007dac:	233a      	movs	r3, #58	; 0x3a
 8007dae:	2202      	movs	r2, #2
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fb1c 	bl	80083ee <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2205      	movs	r2, #5
 8007dba:	721a      	strb	r2, [r3, #8]

    return -1;
 8007dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc0:	e003      	b.n	8007dca <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	60da      	str	r2, [r3, #12]

  return 0;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	32b0      	adds	r2, #176	; 0xb0
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <SCSI_Inquiry+0x2a>
  {
    return -1;
 8007df8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfc:	e05f      	b.n	8007ebe <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007e0e:	2320      	movs	r3, #32
 8007e10:	2205      	movs	r2, #5
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 faeb 	bl	80083ee <SCSI_SenseCode>
    return -1;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1c:	e04f      	b.n	8007ebe <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3301      	adds	r3, #1
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d020      	beq.n	8007e6e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3302      	adds	r3, #2
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d105      	bne.n	8007e42 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007e36:	2206      	movs	r2, #6
 8007e38:	4923      	ldr	r1, [pc, #140]	; (8007ec8 <SCSI_Inquiry+0xf4>)
 8007e3a:	69b8      	ldr	r0, [r7, #24]
 8007e3c:	f001 f844 	bl	8008ec8 <SCSI_UpdateBotData>
 8007e40:	e03c      	b.n	8007ebc <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3302      	adds	r3, #2
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b80      	cmp	r3, #128	; 0x80
 8007e4a:	d105      	bne.n	8007e58 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	491f      	ldr	r1, [pc, #124]	; (8007ecc <SCSI_Inquiry+0xf8>)
 8007e50:	69b8      	ldr	r0, [r7, #24]
 8007e52:	f001 f839 	bl	8008ec8 <SCSI_UpdateBotData>
 8007e56:	e031      	b.n	8007ebc <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007e5e:	2324      	movs	r3, #36	; 0x24
 8007e60:	2205      	movs	r2, #5
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fac3 	bl	80083ee <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007e68:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6c:	e027      	b.n	8007ebe <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	33b0      	adds	r3, #176	; 0xb0
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	69d9      	ldr	r1, [r3, #28]
 8007e80:	7afa      	ldrb	r2, [r7, #11]
 8007e82:	4613      	mov	r3, r2
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	3304      	adds	r3, #4
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3305      	adds	r3, #5
 8007e98:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	8bfa      	ldrh	r2, [r7, #30]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d303      	bcc.n	8007eb0 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007eb0:	8bfb      	ldrh	r3, [r7, #30]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6979      	ldr	r1, [r7, #20]
 8007eb6:	69b8      	ldr	r0, [r7, #24]
 8007eb8:	f001 f806 	bl	8008ec8 <SCSI_UpdateBotData>
  }

  return 0;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000084 	.word	0x20000084
 8007ecc:	2000008c 	.word	0x2000008c

08007ed0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	32b0      	adds	r2, #176	; 0xb0
 8007ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8007ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef8:	e064      	b.n	8007fc4 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	33b0      	adds	r3, #176	; 0xb0
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8007f18:	7af8      	ldrb	r0, [r7, #11]
 8007f1a:	4798      	blx	r3
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007f20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d104      	bne.n	8007f32 <SCSI_ReadCapacity10+0x62>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d108      	bne.n	8007f44 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f32:	7af9      	ldrb	r1, [r7, #11]
 8007f34:	233a      	movs	r3, #58	; 0x3a
 8007f36:	2202      	movs	r2, #2
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fa58 	bl	80083ee <SCSI_SenseCode>
    return -1;
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	e03f      	b.n	8007fc4 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	0e1b      	lsrs	r3, r3, #24
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	0c1b      	lsrs	r3, r3, #16
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	0a1b      	lsrs	r3, r3, #8
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007f8a:	161b      	asrs	r3, r3, #24
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007f98:	141b      	asrs	r3, r3, #16
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007fa6:	0a1b      	lsrs	r3, r3, #8
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	60da      	str	r2, [r3, #12]

  return 0;
 8007fc2:	2300      	movs	r3, #0

}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	32b0      	adds	r2, #176	; 0xb0
 8007fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8007ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff4:	e099      	b.n	800812a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	33b0      	adds	r3, #176	; 0xb0
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8008014:	7af8      	ldrb	r0, [r7, #11]
 8008016:	4798      	blx	r3
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800801c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <SCSI_ReadCapacity16+0x62>
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800802a:	2b02      	cmp	r3, #2
 800802c:	d108      	bne.n	8008040 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800802e:	7af9      	ldrb	r1, [r7, #11]
 8008030:	233a      	movs	r3, #58	; 0x3a
 8008032:	2202      	movs	r2, #2
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f9da 	bl	80083ee <SCSI_SenseCode>
    return -1;
 800803a:	f04f 33ff 	mov.w	r3, #4294967295
 800803e:	e074      	b.n	800812a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	330a      	adds	r3, #10
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	330b      	adds	r3, #11
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008050:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	330c      	adds	r3, #12
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800805a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	320d      	adds	r2, #13
 8008060:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008062:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008068:	2300      	movs	r3, #0
 800806a:	77fb      	strb	r3, [r7, #31]
 800806c:	e007      	b.n	800807e <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800806e:	7ffb      	ldrb	r3, [r7, #31]
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	4413      	add	r3, r2
 8008074:	2200      	movs	r2, #0
 8008076:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008078:	7ffb      	ldrb	r3, [r7, #31]
 800807a:	3301      	adds	r3, #1
 800807c:	77fb      	strb	r3, [r7, #31]
 800807e:	7ffa      	ldrb	r2, [r7, #31]
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d3f2      	bcc.n	800806e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800808e:	3b01      	subs	r3, #1
 8008090:	0e1b      	lsrs	r3, r3, #24
 8008092:	b2da      	uxtb	r2, r3
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800809e:	3b01      	subs	r3, #1
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080ae:	3b01      	subs	r3, #1
 80080b0:	0a1b      	lsrs	r3, r3, #8
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80080ce:	161b      	asrs	r3, r3, #24
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80080dc:	141b      	asrs	r3, r3, #16
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	330a      	adds	r3, #10
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	330b      	adds	r3, #11
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008110:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	330c      	adds	r3, #12
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800811a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	320d      	adds	r2, #13
 8008120:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008122:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	60da      	str	r2, [r3, #12]

  return 0;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b088      	sub	sp, #32
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	460b      	mov	r3, r1
 800813c:	607a      	str	r2, [r7, #4]
 800813e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	32b0      	adds	r2, #176	; 0xb0
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d102      	bne.n	800815c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295
 800815a:	e061      	b.n	8008220 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	33b0      	adds	r3, #176	; 0xb0
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f107 0214 	add.w	r2, r7, #20
 8008172:	f107 0110 	add.w	r1, r7, #16
 8008176:	7af8      	ldrb	r0, [r7, #11]
 8008178:	4798      	blx	r3
 800817a:	4603      	mov	r3, r0
 800817c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800817e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <SCSI_ReadFormatCapacity+0x5e>
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800818c:	2b02      	cmp	r3, #2
 800818e:	d108      	bne.n	80081a2 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008190:	7af9      	ldrb	r1, [r7, #11]
 8008192:	233a      	movs	r3, #58	; 0x3a
 8008194:	2202      	movs	r2, #2
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f929 	bl	80083ee <SCSI_SenseCode>
    return -1;
 800819c:	f04f 33ff 	mov.w	r3, #4294967295
 80081a0:	e03e      	b.n	8008220 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	83fb      	strh	r3, [r7, #30]
 80081a6:	e007      	b.n	80081b8 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80081a8:	8bfb      	ldrh	r3, [r7, #30]
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	4413      	add	r3, r2
 80081ae:	2200      	movs	r2, #0
 80081b0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80081b2:	8bfb      	ldrh	r3, [r7, #30]
 80081b4:	3301      	adds	r3, #1
 80081b6:	83fb      	strh	r3, [r7, #30]
 80081b8:	8bfb      	ldrh	r3, [r7, #30]
 80081ba:	2b0b      	cmp	r3, #11
 80081bc:	d9f4      	bls.n	80081a8 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	2208      	movs	r2, #8
 80081c2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	0e1b      	lsrs	r3, r3, #24
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	0c1b      	lsrs	r3, r3, #16
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	3b01      	subs	r3, #1
 80081e0:	0a1b      	lsrs	r3, r3, #8
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2202      	movs	r2, #2
 80081f8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80081fa:	8abb      	ldrh	r3, [r7, #20]
 80081fc:	141b      	asrs	r3, r3, #16
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008204:	8abb      	ldrh	r3, [r7, #20]
 8008206:	0a1b      	lsrs	r3, r3, #8
 8008208:	b29b      	uxth	r3, r3
 800820a:	b2da      	uxtb	r2, r3
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8008210:	8abb      	ldrh	r3, [r7, #20]
 8008212:	b2da      	uxtb	r2, r3
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	220c      	movs	r2, #12
 800821c:	60da      	str	r2, [r3, #12]

  return 0;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	460b      	mov	r3, r1
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	32b0      	adds	r2, #176	; 0xb0
 8008240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008244:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8008246:	2317      	movs	r3, #23
 8008248:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8008250:	f04f 33ff 	mov.w	r3, #4294967295
 8008254:	e011      	b.n	800827a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3304      	adds	r3, #4
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	8afa      	ldrh	r2, [r7, #22]
 8008260:	429a      	cmp	r2, r3
 8008262:	d303      	bcc.n	800826c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800826c:	8afb      	ldrh	r3, [r7, #22]
 800826e:	461a      	mov	r2, r3
 8008270:	4904      	ldr	r1, [pc, #16]	; (8008284 <SCSI_ModeSense6+0x5c>)
 8008272:	6938      	ldr	r0, [r7, #16]
 8008274:	f000 fe28 	bl	8008ec8 <SCSI_UpdateBotData>

  return 0;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000094 	.word	0x20000094

08008288 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	460b      	mov	r3, r1
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	32b0      	adds	r2, #176	; 0xb0
 80082a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80082a6:	231b      	movs	r3, #27
 80082a8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80082b0:	f04f 33ff 	mov.w	r3, #4294967295
 80082b4:	e011      	b.n	80082da <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3308      	adds	r3, #8
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	8afa      	ldrh	r2, [r7, #22]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d303      	bcc.n	80082cc <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3308      	adds	r3, #8
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80082cc:	8afb      	ldrh	r3, [r7, #22]
 80082ce:	461a      	mov	r2, r3
 80082d0:	4904      	ldr	r1, [pc, #16]	; (80082e4 <SCSI_ModeSense10+0x5c>)
 80082d2:	6938      	ldr	r0, [r7, #16]
 80082d4:	f000 fdf8 	bl	8008ec8 <SCSI_UpdateBotData>

  return 0;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	200000ac 	.word	0x200000ac

080082e8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	460b      	mov	r3, r1
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	32b0      	adds	r2, #176	; 0xb0
 8008300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008304:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d102      	bne.n	8008312 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800830c:	f04f 33ff 	mov.w	r3, #4294967295
 8008310:	e069      	b.n	80083e6 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008322:	2320      	movs	r3, #32
 8008324:	2205      	movs	r2, #5
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f861 	bl	80083ee <SCSI_SenseCode>
    return -1;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
 8008330:	e059      	b.n	80083e6 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8008332:	2300      	movs	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]
 8008336:	e007      	b.n	8008348 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4413      	add	r3, r2
 800833e:	2200      	movs	r2, #0
 8008340:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	3301      	adds	r3, #1
 8008346:	75fb      	strb	r3, [r7, #23]
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	2b11      	cmp	r3, #17
 800834c:	d9f4      	bls.n	8008338 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2270      	movs	r2, #112	; 0x70
 8008352:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	220c      	movs	r2, #12
 8008358:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008366:	429a      	cmp	r2, r3
 8008368:	d02e      	beq.n	80083c8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008370:	461a      	mov	r2, r3
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	3248      	adds	r2, #72	; 0x48
 8008376:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	3348      	adds	r3, #72	; 0x48
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	4413      	add	r3, r2
 800838c:	791a      	ldrb	r2, [r3, #4]
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	3348      	adds	r3, #72	; 0x48
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	4413      	add	r3, r2
 80083a0:	795a      	ldrb	r2, [r3, #5]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80083ac:	3301      	adds	r3, #1
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d103      	bne.n	80083c8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2212      	movs	r2, #18
 80083cc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3304      	adds	r3, #4
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b12      	cmp	r3, #18
 80083d6:	d805      	bhi.n	80083e4 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3304      	adds	r3, #4
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b085      	sub	sp, #20
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	461a      	mov	r2, r3
 80083fc:	4603      	mov	r3, r0
 80083fe:	70fb      	strb	r3, [r7, #3]
 8008400:	460b      	mov	r3, r1
 8008402:	70bb      	strb	r3, [r7, #2]
 8008404:	4613      	mov	r3, r2
 8008406:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	32b0      	adds	r2, #176	; 0xb0
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d02c      	beq.n	8008478 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008424:	461a      	mov	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3248      	adds	r2, #72	; 0x48
 800842a:	78b9      	ldrb	r1, [r7, #2]
 800842c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	3348      	adds	r3, #72	; 0x48
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	4413      	add	r3, r2
 800843e:	787a      	ldrb	r2, [r7, #1]
 8008440:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	3348      	adds	r3, #72	; 0x48
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	4413      	add	r3, r2
 8008450:	2200      	movs	r2, #0
 8008452:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800845a:	3301      	adds	r3, #1
 800845c:	b2da      	uxtb	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800846a:	2b04      	cmp	r3, #4
 800846c:	d105      	bne.n	800847a <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8008476:	e000      	b.n	800847a <SCSI_SenseCode+0x8c>
    return;
 8008478:	bf00      	nop
  }
}
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	460b      	mov	r3, r1
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	32b0      	adds	r2, #176	; 0xb0
 800849c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ac:	e03b      	b.n	8008526 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d10f      	bne.n	80084d8 <SCSI_StartStopUnit+0x54>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3304      	adds	r3, #4
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d108      	bne.n	80084d8 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80084c6:	7af9      	ldrb	r1, [r7, #11]
 80084c8:	2324      	movs	r3, #36	; 0x24
 80084ca:	2205      	movs	r2, #5
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff ff8e 	bl	80083ee <SCSI_SenseCode>

    return -1;
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295
 80084d6:	e026      	b.n	8008526 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3304      	adds	r3, #4
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	f003 0303 	and.w	r3, r3, #3
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d104      	bne.n	80084f0 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80084ee:	e016      	b.n	800851e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3304      	adds	r3, #4
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d104      	bne.n	8008508 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8008506:	e00a      	b.n	800851e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3304      	adds	r3, #4
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b03      	cmp	r3, #3
 8008514:	d103      	bne.n	800851e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2200      	movs	r2, #0
 8008522:	60da      	str	r2, [r3, #12]

  return 0;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800852e:	b480      	push	{r7}
 8008530:	b087      	sub	sp, #28
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	460b      	mov	r3, r1
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	32b0      	adds	r2, #176	; 0xb0
 8008546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
 8008556:	e011      	b.n	800857c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800856a:	e003      	b.n	8008574 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2200      	movs	r2, #0
 8008578:	60da      	str	r2, [r3, #12]

  return 0;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	460b      	mov	r3, r1
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	32b0      	adds	r2, #176	; 0xb0
 80085a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <SCSI_Read10+0x2a>
  {
    return -1;
 80085ac:	f04f 33ff 	mov.w	r3, #4294967295
 80085b0:	e090      	b.n	80086d4 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	7a1b      	ldrb	r3, [r3, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f040 8082 	bne.w	80086c0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80085c2:	b25b      	sxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	db0a      	blt.n	80085de <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80085ce:	2320      	movs	r3, #32
 80085d0:	2205      	movs	r2, #5
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff ff0b 	bl	80083ee <SCSI_SenseCode>
      return -1;
 80085d8:	f04f 33ff 	mov.w	r3, #4294967295
 80085dc:	e07a      	b.n	80086d4 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d108      	bne.n	80085fa <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80085e8:	7af9      	ldrb	r1, [r7, #11]
 80085ea:	233a      	movs	r3, #58	; 0x3a
 80085ec:	2202      	movs	r2, #2
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7ff fefd 	bl	80083ee <SCSI_SenseCode>

      return -1;
 80085f4:	f04f 33ff 	mov.w	r3, #4294967295
 80085f8:	e06c      	b.n	80086d4 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	33b0      	adds	r3, #176	; 0xb0
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	7afa      	ldrb	r2, [r7, #11]
 800860e:	4610      	mov	r0, r2
 8008610:	4798      	blx	r3
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d008      	beq.n	800862a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008618:	7af9      	ldrb	r1, [r7, #11]
 800861a:	233a      	movs	r3, #58	; 0x3a
 800861c:	2202      	movs	r2, #2
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff fee5 	bl	80083ee <SCSI_SenseCode>
      return -1;
 8008624:	f04f 33ff 	mov.w	r3, #4294967295
 8008628:	e054      	b.n	80086d4 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3302      	adds	r3, #2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3303      	adds	r3, #3
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800863a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3304      	adds	r3, #4
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008644:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	3205      	adds	r2, #5
 800864a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800864c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3307      	adds	r3, #7
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	3208      	adds	r2, #8
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	431a      	orrs	r2, r3
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008676:	7af9      	ldrb	r1, [r7, #11]
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 fadc 	bl	8008c36 <SCSI_CheckAddressRange>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	da02      	bge.n	800868a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008684:	f04f 33ff 	mov.w	r3, #4294967295
 8008688:	e024      	b.n	80086d4 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008696:	6979      	ldr	r1, [r7, #20]
 8008698:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800869c:	fb01 f303 	mul.w	r3, r1, r3
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d00a      	beq.n	80086ba <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80086aa:	2320      	movs	r3, #32
 80086ac:	2205      	movs	r2, #5
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff fe9d 	bl	80083ee <SCSI_SenseCode>
      return -1;
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295
 80086b8:	e00c      	b.n	80086d4 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2202      	movs	r2, #2
 80086be:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086c6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	4619      	mov	r1, r3
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fadf 	bl	8008c90 <SCSI_ProcessRead>
 80086d2:	4603      	mov	r3, r0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	460b      	mov	r3, r1
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	32b0      	adds	r2, #176	; 0xb0
 80086f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <SCSI_Read12+0x2a>
  {
    return -1;
 8008700:	f04f 33ff 	mov.w	r3, #4294967295
 8008704:	e09a      	b.n	800883c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	7a1b      	ldrb	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f040 808c 	bne.w	8008828 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008716:	b25b      	sxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	db0a      	blt.n	8008732 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008722:	2320      	movs	r3, #32
 8008724:	2205      	movs	r2, #5
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff fe61 	bl	80083ee <SCSI_SenseCode>
      return -1;
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
 8008730:	e084      	b.n	800883c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008738:	2b02      	cmp	r3, #2
 800873a:	d108      	bne.n	800874e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800873c:	7af9      	ldrb	r1, [r7, #11]
 800873e:	233a      	movs	r3, #58	; 0x3a
 8008740:	2202      	movs	r2, #2
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f7ff fe53 	bl	80083ee <SCSI_SenseCode>
      return -1;
 8008748:	f04f 33ff 	mov.w	r3, #4294967295
 800874c:	e076      	b.n	800883c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	33b0      	adds	r3, #176	; 0xb0
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	7afa      	ldrb	r2, [r7, #11]
 8008762:	4610      	mov	r0, r2
 8008764:	4798      	blx	r3
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d008      	beq.n	800877e <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800876c:	7af9      	ldrb	r1, [r7, #11]
 800876e:	233a      	movs	r3, #58	; 0x3a
 8008770:	2202      	movs	r2, #2
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7ff fe3b 	bl	80083ee <SCSI_SenseCode>
      return -1;
 8008778:	f04f 33ff 	mov.w	r3, #4294967295
 800877c:	e05e      	b.n	800883c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3302      	adds	r3, #2
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3303      	adds	r3, #3
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800878e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3304      	adds	r3, #4
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008798:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	3205      	adds	r2, #5
 800879e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80087a0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3306      	adds	r3, #6
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3307      	adds	r3, #7
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087b8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3308      	adds	r3, #8
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80087c2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	3209      	adds	r2, #9
 80087c8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80087ca:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80087de:	7af9      	ldrb	r1, [r7, #11]
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 fa28 	bl	8008c36 <SCSI_CheckAddressRange>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da02      	bge.n	80087f2 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80087ec:	f04f 33ff 	mov.w	r3, #4294967295
 80087f0:	e024      	b.n	800883c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80087fe:	6979      	ldr	r1, [r7, #20]
 8008800:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8008804:	fb01 f303 	mul.w	r3, r1, r3
 8008808:	429a      	cmp	r2, r3
 800880a:	d00a      	beq.n	8008822 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008812:	2320      	movs	r3, #32
 8008814:	2205      	movs	r2, #5
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff fde9 	bl	80083ee <SCSI_SenseCode>
      return -1;
 800881c:	f04f 33ff 	mov.w	r3, #4294967295
 8008820:	e00c      	b.n	800883c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2202      	movs	r2, #2
 8008826:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800882e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008830:	7afb      	ldrb	r3, [r7, #11]
 8008832:	4619      	mov	r1, r3
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 fa2b 	bl	8008c90 <SCSI_ProcessRead>
 800883a:	4603      	mov	r3, r0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	460b      	mov	r3, r1
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	32b0      	adds	r2, #176	; 0xb0
 800885c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008860:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <SCSI_Write10+0x2a>
  {
    return -1;
 8008868:	f04f 33ff 	mov.w	r3, #4294967295
 800886c:	e0ba      	b.n	80089e4 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	7a1b      	ldrb	r3, [r3, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f040 80b0 	bne.w	80089d8 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008888:	2320      	movs	r3, #32
 800888a:	2205      	movs	r2, #5
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7ff fdae 	bl	80083ee <SCSI_SenseCode>
      return -1;
 8008892:	f04f 33ff 	mov.w	r3, #4294967295
 8008896:	e0a5      	b.n	80089e4 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800889e:	b25b      	sxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da0a      	bge.n	80088ba <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80088aa:	2320      	movs	r3, #32
 80088ac:	2205      	movs	r2, #5
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f7ff fd9d 	bl	80083ee <SCSI_SenseCode>
      return -1;
 80088b4:	f04f 33ff 	mov.w	r3, #4294967295
 80088b8:	e094      	b.n	80089e4 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	33b0      	adds	r3, #176	; 0xb0
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	7afa      	ldrb	r2, [r7, #11]
 80088ce:	4610      	mov	r0, r2
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d008      	beq.n	80088ea <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80088d8:	7af9      	ldrb	r1, [r7, #11]
 80088da:	233a      	movs	r3, #58	; 0x3a
 80088dc:	2202      	movs	r2, #2
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7ff fd85 	bl	80083ee <SCSI_SenseCode>
      return -1;
 80088e4:	f04f 33ff 	mov.w	r3, #4294967295
 80088e8:	e07c      	b.n	80089e4 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	33b0      	adds	r3, #176	; 0xb0
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	7afa      	ldrb	r2, [r7, #11]
 80088fe:	4610      	mov	r0, r2
 8008900:	4798      	blx	r3
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d008      	beq.n	800891a <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008908:	7af9      	ldrb	r1, [r7, #11]
 800890a:	2327      	movs	r3, #39	; 0x27
 800890c:	2202      	movs	r2, #2
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff fd6d 	bl	80083ee <SCSI_SenseCode>
      return -1;
 8008914:	f04f 33ff 	mov.w	r3, #4294967295
 8008918:	e064      	b.n	80089e4 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3302      	adds	r3, #2
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3303      	adds	r3, #3
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800892a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3304      	adds	r3, #4
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008934:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	3205      	adds	r2, #5
 800893a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800893c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3307      	adds	r3, #7
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	3208      	adds	r2, #8
 8008950:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008952:	431a      	orrs	r2, r3
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008966:	7af9      	ldrb	r1, [r7, #11]
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 f964 	bl	8008c36 <SCSI_CheckAddressRange>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	da02      	bge.n	800897a <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008974:	f04f 33ff 	mov.w	r3, #4294967295
 8008978:	e034      	b.n	80089e4 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	429a      	cmp	r2, r3
 8008996:	d00a      	beq.n	80089ae <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800899e:	2320      	movs	r3, #32
 80089a0:	2205      	movs	r2, #5
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f7ff fd23 	bl	80083ee <SCSI_SenseCode>
      return -1;
 80089a8:	f04f 33ff 	mov.w	r3, #4294967295
 80089ac:	e01a      	b.n	80089e4 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089b4:	bf28      	it	cs
 80089b6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80089ba:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2201      	movs	r2, #1
 80089c0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80089c2:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <SCSI_Write10+0x1a8>)
 80089c4:	7819      	ldrb	r1, [r3, #0]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f103 0210 	add.w	r2, r3, #16
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f002 fa81 	bl	800aed6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	e005      	b.n	80089e4 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80089d8:	7afb      	ldrb	r3, [r7, #11]
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f9dd 	bl	8008d9c <SCSI_ProcessWrite>
 80089e2:	4603      	mov	r3, r0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20000083 	.word	0x20000083

080089f0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	460b      	mov	r3, r1
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	32b0      	adds	r2, #176	; 0xb0
 8008a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <SCSI_Write12+0x2a>
  {
    return -1;
 8008a14:	f04f 33ff 	mov.w	r3, #4294967295
 8008a18:	e0ca      	b.n	8008bb0 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	7a1b      	ldrb	r3, [r3, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f040 80c0 	bne.w	8008ba4 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008a34:	2320      	movs	r3, #32
 8008a36:	2205      	movs	r2, #5
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7ff fcd8 	bl	80083ee <SCSI_SenseCode>
      return -1;
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a42:	e0b5      	b.n	8008bb0 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008a4a:	b25b      	sxtb	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	da0a      	bge.n	8008a66 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008a56:	2320      	movs	r3, #32
 8008a58:	2205      	movs	r2, #5
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fcc7 	bl	80083ee <SCSI_SenseCode>
      return -1;
 8008a60:	f04f 33ff 	mov.w	r3, #4294967295
 8008a64:	e0a4      	b.n	8008bb0 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	33b0      	adds	r3, #176	; 0xb0
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	7afa      	ldrb	r2, [r7, #11]
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4798      	blx	r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008a84:	7af9      	ldrb	r1, [r7, #11]
 8008a86:	233a      	movs	r3, #58	; 0x3a
 8008a88:	2202      	movs	r2, #2
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f7ff fcaf 	bl	80083ee <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2205      	movs	r2, #5
 8008a94:	721a      	strb	r2, [r3, #8]
      return -1;
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9a:	e089      	b.n	8008bb0 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	33b0      	adds	r3, #176	; 0xb0
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	7afa      	ldrb	r2, [r7, #11]
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00b      	beq.n	8008ad2 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008aba:	7af9      	ldrb	r1, [r7, #11]
 8008abc:	2327      	movs	r3, #39	; 0x27
 8008abe:	2202      	movs	r2, #2
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff fc94 	bl	80083ee <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2205      	movs	r2, #5
 8008aca:	721a      	strb	r2, [r3, #8]
      return -1;
 8008acc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad0:	e06e      	b.n	8008bb0 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3302      	adds	r3, #2
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3303      	adds	r3, #3
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008ae2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008aec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	3205      	adds	r2, #5
 8008af2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008af4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3306      	adds	r3, #6
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3307      	adds	r3, #7
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008b0c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3308      	adds	r3, #8
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008b16:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	3209      	adds	r2, #9
 8008b1c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008b1e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008b32:	7af9      	ldrb	r1, [r7, #11]
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 f87e 	bl	8008c36 <SCSI_CheckAddressRange>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da02      	bge.n	8008b46 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008b40:	f04f 33ff 	mov.w	r3, #4294967295
 8008b44:	e034      	b.n	8008bb0 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d00a      	beq.n	8008b7a <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008b6a:	2320      	movs	r3, #32
 8008b6c:	2205      	movs	r2, #5
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff fc3d 	bl	80083ee <SCSI_SenseCode>
      return -1;
 8008b74:	f04f 33ff 	mov.w	r3, #4294967295
 8008b78:	e01a      	b.n	8008bb0 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b80:	bf28      	it	cs
 8008b82:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008b86:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008b8e:	4b0a      	ldr	r3, [pc, #40]	; (8008bb8 <SCSI_Write12+0x1c8>)
 8008b90:	7819      	ldrb	r1, [r3, #0]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f103 0210 	add.w	r2, r3, #16
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f002 f99b 	bl	800aed6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e005      	b.n	8008bb0 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8008ba4:	7afb      	ldrb	r3, [r7, #11]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f8f7 	bl	8008d9c <SCSI_ProcessWrite>
 8008bae:	4603      	mov	r3, r0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20000083 	.word	0x20000083

08008bbc <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	32b0      	adds	r2, #176	; 0xb0
 8008bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <SCSI_Verify10+0x2a>
  {
    return -1;
 8008be0:	f04f 33ff 	mov.w	r3, #4294967295
 8008be4:	e023      	b.n	8008c2e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3301      	adds	r3, #1
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008bf4:	7af9      	ldrb	r1, [r7, #11]
 8008bf6:	2324      	movs	r3, #36	; 0x24
 8008bf8:	2205      	movs	r2, #5
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff fbf7 	bl	80083ee <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	e013      	b.n	8008c2e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008c12:	7af9      	ldrb	r1, [r7, #11]
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 f80e 	bl	8008c36 <SCSI_CheckAddressRange>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	da02      	bge.n	8008c26 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8008c20:	f04f 33ff 	mov.w	r3, #4294967295
 8008c24:	e003      	b.n	8008c2e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	60da      	str	r2, [r3, #12]

  return 0;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	603b      	str	r3, [r7, #0]
 8008c42:	460b      	mov	r3, r1
 8008c44:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	32b0      	adds	r2, #176	; 0xb0
 8008c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c54:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8008c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c60:	e011      	b.n	8008c86 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	441a      	add	r2, r3
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d908      	bls.n	8008c84 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008c72:	7af9      	ldrb	r1, [r7, #11]
 8008c74:	2321      	movs	r3, #33	; 0x21
 8008c76:	2205      	movs	r2, #5
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7ff fbb8 	bl	80083ee <SCSI_SenseCode>
    return -1;
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c82:	e000      	b.n	8008c86 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008c90:	b590      	push	{r4, r7, lr}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	32b0      	adds	r2, #176	; 0xb0
 8008ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008caa:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	e06a      	b.n	8008d8e <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008cc4:	fb02 f303 	mul.w	r3, r2, r3
 8008cc8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd0:	bf28      	it	cs
 8008cd2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008cd6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	33b0      	adds	r3, #176	; 0xb0
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	691c      	ldr	r4, [r3, #16]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f103 0110 	add.w	r1, r3, #16
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	78f8      	ldrb	r0, [r7, #3]
 8008d08:	47a0      	blx	r4
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	da08      	bge.n	8008d22 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008d10:	78f9      	ldrb	r1, [r7, #3]
 8008d12:	2311      	movs	r3, #17
 8008d14:	2204      	movs	r2, #4
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff fb69 	bl	80083ee <SCSI_SenseCode>
    return -1;
 8008d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d20:	e035      	b.n	8008d8e <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8008d22:	4b1d      	ldr	r3, [pc, #116]	; (8008d98 <SCSI_ProcessRead+0x108>)
 8008d24:	7819      	ldrb	r1, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f103 0210 	add.w	r2, r3, #16
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f002 f8b0 	bl	800ae94 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008d40:	4619      	mov	r1, r3
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d48:	441a      	add	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	1ad2      	subs	r2, r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2203      	movs	r2, #3
 8008d8a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd90      	pop	{r4, r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20000082 	.word	0x20000082

08008d9c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008d9c:	b590      	push	{r4, r7, lr}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	32b0      	adds	r2, #176	; 0xb0
 8008db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	e07a      	b.n	8008eba <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008dd0:	fb02 f303 	mul.w	r3, r2, r3
 8008dd4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ddc:	bf28      	it	cs
 8008dde:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008de2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	33b0      	adds	r3, #176	; 0xb0
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	695c      	ldr	r4, [r3, #20]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f103 0110 	add.w	r1, r3, #16
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008e08:	4618      	mov	r0, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	78f8      	ldrb	r0, [r7, #3]
 8008e14:	47a0      	blx	r4
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	da08      	bge.n	8008e2e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008e1c:	78f9      	ldrb	r1, [r7, #3]
 8008e1e:	2303      	movs	r3, #3
 8008e20:	2204      	movs	r2, #4
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff fae3 	bl	80083ee <SCSI_SenseCode>
    return -1;
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2c:	e045      	b.n	8008eba <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e42:	441a      	add	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008e56:	4619      	mov	r1, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	1ad2      	subs	r2, r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d104      	bne.n	8008e8a <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008e80:	2100      	movs	r1, #0
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7fe fd14 	bl	80078b0 <MSC_BOT_SendCSW>
 8008e88:	e016      	b.n	8008eb8 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008e96:	fb02 f303 	mul.w	r3, r2, r3
 8008e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9e:	bf28      	it	cs
 8008ea0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008ea4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008ea6:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <SCSI_ProcessWrite+0x128>)
 8008ea8:	7819      	ldrb	r1, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f103 0210 	add.w	r2, r3, #16
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f002 f80f 	bl	800aed6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd90      	pop	{r4, r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000083 	.word	0x20000083

08008ec8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008ed6:	88fb      	ldrh	r3, [r7, #6]
 8008ed8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d102      	bne.n	8008ee6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	e013      	b.n	8008f0e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8008ee6:	8afa      	ldrh	r2, [r7, #22]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008eec:	e00b      	b.n	8008f06 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008eee:	8afb      	ldrh	r3, [r7, #22]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008ef4:	8afb      	ldrh	r3, [r7, #22]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	441a      	add	r2, r3
 8008efa:	8afb      	ldrh	r3, [r7, #22]
 8008efc:	7811      	ldrb	r1, [r2, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	460a      	mov	r2, r1
 8008f04:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008f06:	8afb      	ldrh	r3, [r7, #22]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f0      	bne.n	8008eee <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	371c      	adds	r7, #28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b086      	sub	sp, #24
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e01f      	b.n	8008f72 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	79fa      	ldrb	r2, [r7, #7]
 8008f64:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f001 fe3c 	bl	800abe4 <USBD_LL_Init>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e025      	b.n	8008fde <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	32ae      	adds	r2, #174	; 0xae
 8008fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00f      	beq.n	8008fce <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	32ae      	adds	r2, #174	; 0xae
 8008fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbe:	f107 020e 	add.w	r2, r7, #14
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	4798      	blx	r3
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fe48 	bl	800ac84 <USBD_LL_Start>
 8008ff4:	4603      	mov	r3, r0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	78fa      	ldrb	r2, [r7, #3]
 8009038:	4611      	mov	r1, r2
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	78fa      	ldrb	r2, [r7, #3]
 8009066:	4611      	mov	r1, r2
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4798      	blx	r3
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009072:	2303      	movs	r3, #3
 8009074:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	4618      	mov	r0, r3
 8009094:	f001 f933 	bl	800a2fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80090a6:	461a      	mov	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090b4:	f003 031f 	and.w	r3, r3, #31
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d01a      	beq.n	80090f2 <USBD_LL_SetupStage+0x72>
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d822      	bhi.n	8009106 <USBD_LL_SetupStage+0x86>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <USBD_LL_SetupStage+0x4a>
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d00a      	beq.n	80090de <USBD_LL_SetupStage+0x5e>
 80090c8:	e01d      	b.n	8009106 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fb60 	bl	8009798 <USBD_StdDevReq>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
      break;
 80090dc:	e020      	b.n	8009120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fbc8 	bl	800987c <USBD_StdItfReq>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
      break;
 80090f0:	e016      	b.n	8009120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fc2a 	bl	8009954 <USBD_StdEPReq>
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
      break;
 8009104:	e00c      	b.n	8009120 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800910c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009110:	b2db      	uxtb	r3, r3
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 fe34 	bl	800ad82 <USBD_LL_StallEP>
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]
      break;
 800911e:	bf00      	nop
  }

  return ret;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b086      	sub	sp, #24
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	460b      	mov	r3, r1
 8009134:	607a      	str	r2, [r7, #4]
 8009136:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d16e      	bne.n	8009220 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009148:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009150:	2b03      	cmp	r3, #3
 8009152:	f040 8098 	bne.w	8009286 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	689a      	ldr	r2, [r3, #8]
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	429a      	cmp	r2, r3
 8009160:	d913      	bls.n	800918a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	4293      	cmp	r3, r2
 800917a:	bf28      	it	cs
 800917c:	4613      	movcs	r3, r2
 800917e:	461a      	mov	r2, r3
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f001 f992 	bl	800a4ac <USBD_CtlContinueRx>
 8009188:	e07d      	b.n	8009286 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	2b02      	cmp	r3, #2
 8009196:	d014      	beq.n	80091c2 <USBD_LL_DataOutStage+0x98>
 8009198:	2b02      	cmp	r3, #2
 800919a:	d81d      	bhi.n	80091d8 <USBD_LL_DataOutStage+0xae>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <USBD_LL_DataOutStage+0x7c>
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d003      	beq.n	80091ac <USBD_LL_DataOutStage+0x82>
 80091a4:	e018      	b.n	80091d8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	75bb      	strb	r3, [r7, #22]
            break;
 80091aa:	e018      	b.n	80091de <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	4619      	mov	r1, r3
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 fa5e 	bl	8009678 <USBD_CoreFindIF>
 80091bc:	4603      	mov	r3, r0
 80091be:	75bb      	strb	r3, [r7, #22]
            break;
 80091c0:	e00d      	b.n	80091de <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	4619      	mov	r1, r3
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 fa60 	bl	8009692 <USBD_CoreFindEP>
 80091d2:	4603      	mov	r3, r0
 80091d4:	75bb      	strb	r3, [r7, #22]
            break;
 80091d6:	e002      	b.n	80091de <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	75bb      	strb	r3, [r7, #22]
            break;
 80091dc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80091de:	7dbb      	ldrb	r3, [r7, #22]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d119      	bne.n	8009218 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d113      	bne.n	8009218 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80091f0:	7dba      	ldrb	r2, [r7, #22]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	32ae      	adds	r2, #174	; 0xae
 80091f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009200:	7dba      	ldrb	r2, [r7, #22]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009208:	7dba      	ldrb	r2, [r7, #22]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	32ae      	adds	r2, #174	; 0xae
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f001 f958 	bl	800a4ce <USBD_CtlSendStatus>
 800921e:	e032      	b.n	8009286 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009220:	7afb      	ldrb	r3, [r7, #11]
 8009222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009226:	b2db      	uxtb	r3, r3
 8009228:	4619      	mov	r1, r3
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 fa31 	bl	8009692 <USBD_CoreFindEP>
 8009230:	4603      	mov	r3, r0
 8009232:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009234:	7dbb      	ldrb	r3, [r7, #22]
 8009236:	2bff      	cmp	r3, #255	; 0xff
 8009238:	d025      	beq.n	8009286 <USBD_LL_DataOutStage+0x15c>
 800923a:	7dbb      	ldrb	r3, [r7, #22]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d122      	bne.n	8009286 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b03      	cmp	r3, #3
 800924a:	d117      	bne.n	800927c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800924c:	7dba      	ldrb	r2, [r7, #22]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	32ae      	adds	r2, #174	; 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00f      	beq.n	800927c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800925c:	7dba      	ldrb	r2, [r7, #22]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009264:	7dba      	ldrb	r2, [r7, #22]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	32ae      	adds	r2, #174	; 0xae
 800926a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	7afa      	ldrb	r2, [r7, #11]
 8009272:	4611      	mov	r1, r2
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	4798      	blx	r3
 8009278:	4603      	mov	r3, r0
 800927a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	e000      	b.n	8009288 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	460b      	mov	r3, r1
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800929e:	7afb      	ldrb	r3, [r7, #11]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d16f      	bne.n	8009384 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3314      	adds	r3, #20
 80092a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d15a      	bne.n	800936a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d914      	bls.n	80092ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	1ad2      	subs	r2, r2, r3
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	461a      	mov	r2, r3
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f001 f8d7 	bl	800a48a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092dc:	2300      	movs	r3, #0
 80092de:	2200      	movs	r2, #0
 80092e0:	2100      	movs	r1, #0
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f001 fdf7 	bl	800aed6 <USBD_LL_PrepareReceive>
 80092e8:	e03f      	b.n	800936a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d11c      	bne.n	8009330 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80092fe:	429a      	cmp	r2, r3
 8009300:	d316      	bcc.n	8009330 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800930c:	429a      	cmp	r2, r3
 800930e:	d20f      	bcs.n	8009330 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009310:	2200      	movs	r2, #0
 8009312:	2100      	movs	r1, #0
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f001 f8b8 	bl	800a48a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009322:	2300      	movs	r3, #0
 8009324:	2200      	movs	r2, #0
 8009326:	2100      	movs	r1, #0
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f001 fdd4 	bl	800aed6 <USBD_LL_PrepareReceive>
 800932e:	e01c      	b.n	800936a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b03      	cmp	r3, #3
 800933a:	d10f      	bne.n	800935c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800935c:	2180      	movs	r1, #128	; 0x80
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f001 fd0f 	bl	800ad82 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f001 f8c5 	bl	800a4f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d03a      	beq.n	80093ea <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f7ff fe42 	bl	8008ffe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009382:	e032      	b.n	80093ea <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800938a:	b2db      	uxtb	r3, r3
 800938c:	4619      	mov	r1, r3
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 f97f 	bl	8009692 <USBD_CoreFindEP>
 8009394:	4603      	mov	r3, r0
 8009396:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2bff      	cmp	r3, #255	; 0xff
 800939c:	d025      	beq.n	80093ea <USBD_LL_DataInStage+0x15a>
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d122      	bne.n	80093ea <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d11c      	bne.n	80093ea <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80093b0:	7dfa      	ldrb	r2, [r7, #23]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	32ae      	adds	r2, #174	; 0xae
 80093b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d014      	beq.n	80093ea <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80093c0:	7dfa      	ldrb	r2, [r7, #23]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80093c8:	7dfa      	ldrb	r2, [r7, #23]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	32ae      	adds	r2, #174	; 0xae
 80093ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	7afa      	ldrb	r2, [r7, #11]
 80093d6:	4611      	mov	r1, r2
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	4798      	blx	r3
 80093dc:	4603      	mov	r3, r0
 80093de:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80093e0:	7dbb      	ldrb	r3, [r7, #22]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80093e6:	7dbb      	ldrb	r3, [r7, #22]
 80093e8:	e000      	b.n	80093ec <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942c:	2b00      	cmp	r3, #0
 800942e:	d014      	beq.n	800945a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00e      	beq.n	800945a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6852      	ldr	r2, [r2, #4]
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	4611      	mov	r1, r2
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	4798      	blx	r3
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009456:	2303      	movs	r3, #3
 8009458:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800945a:	2340      	movs	r3, #64	; 0x40
 800945c:	2200      	movs	r2, #0
 800945e:	2100      	movs	r1, #0
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 fc2a 	bl	800acba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2240      	movs	r2, #64	; 0x40
 8009472:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009476:	2340      	movs	r3, #64	; 0x40
 8009478:	2200      	movs	r2, #0
 800947a:	2180      	movs	r1, #128	; 0x80
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 fc1c 	bl	800acba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2240      	movs	r2, #64	; 0x40
 800948c:	621a      	str	r2, [r3, #32]

  return ret;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2204      	movs	r2, #4
 80094d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d106      	bne.n	8009506 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b03      	cmp	r3, #3
 8009526:	d110      	bne.n	800954a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d005      	beq.n	800954a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	32ae      	adds	r2, #174	; 0xae
 800956a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009572:	2303      	movs	r3, #3
 8009574:	e01c      	b.n	80095b0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b03      	cmp	r3, #3
 8009580:	d115      	bne.n	80095ae <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	32ae      	adds	r2, #174	; 0xae
 800958c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	32ae      	adds	r2, #174	; 0xae
 80095a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	4611      	mov	r1, r2
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	32ae      	adds	r2, #174	; 0xae
 80095ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e01c      	b.n	8009614 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d115      	bne.n	8009612 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	32ae      	adds	r2, #174	; 0xae
 80095f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	32ae      	adds	r2, #174	; 0xae
 8009604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	78fa      	ldrb	r2, [r7, #3]
 800960c:	4611      	mov	r1, r2
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00e      	beq.n	800966e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	6852      	ldr	r2, [r2, #4]
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	4611      	mov	r1, r2
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009684:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800969e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80096c0:	2300      	movs	r3, #0
 80096c2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	885b      	ldrh	r3, [r3, #2]
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d920      	bls.n	8009716 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80096dc:	e013      	b.n	8009706 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80096de:	f107 030a 	add.w	r3, r7, #10
 80096e2:	4619      	mov	r1, r3
 80096e4:	6978      	ldr	r0, [r7, #20]
 80096e6:	f000 f81b 	bl	8009720 <USBD_GetNextDesc>
 80096ea:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	785b      	ldrb	r3, [r3, #1]
 80096f0:	2b05      	cmp	r3, #5
 80096f2:	d108      	bne.n	8009706 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	789b      	ldrb	r3, [r3, #2]
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d008      	beq.n	8009714 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009702:	2300      	movs	r3, #0
 8009704:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	885b      	ldrh	r3, [r3, #2]
 800970a:	b29a      	uxth	r2, r3
 800970c:	897b      	ldrh	r3, [r7, #10]
 800970e:	429a      	cmp	r2, r3
 8009710:	d8e5      	bhi.n	80096de <USBD_GetEpDesc+0x32>
 8009712:	e000      	b.n	8009716 <USBD_GetEpDesc+0x6a>
          break;
 8009714:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009716:	693b      	ldr	r3, [r7, #16]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	881a      	ldrh	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	4413      	add	r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800974c:	68fb      	ldr	r3, [r7, #12]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800975a:	b480      	push	{r7}
 800975c:	b087      	sub	sp, #28
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	3301      	adds	r3, #1
 8009770:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009778:	8a3b      	ldrh	r3, [r7, #16]
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	b21a      	sxth	r2, r3
 800977e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009782:	4313      	orrs	r3, r2
 8009784:	b21b      	sxth	r3, r3
 8009786:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009788:	89fb      	ldrh	r3, [r7, #14]
}
 800978a:	4618      	mov	r0, r3
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
	...

08009798 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097ae:	2b40      	cmp	r3, #64	; 0x40
 80097b0:	d005      	beq.n	80097be <USBD_StdDevReq+0x26>
 80097b2:	2b40      	cmp	r3, #64	; 0x40
 80097b4:	d857      	bhi.n	8009866 <USBD_StdDevReq+0xce>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00f      	beq.n	80097da <USBD_StdDevReq+0x42>
 80097ba:	2b20      	cmp	r3, #32
 80097bc:	d153      	bne.n	8009866 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	32ae      	adds	r2, #174	; 0xae
 80097c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]
      break;
 80097d8:	e04a      	b.n	8009870 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	785b      	ldrb	r3, [r3, #1]
 80097de:	2b09      	cmp	r3, #9
 80097e0:	d83b      	bhi.n	800985a <USBD_StdDevReq+0xc2>
 80097e2:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <USBD_StdDevReq+0x50>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	0800983d 	.word	0x0800983d
 80097ec:	08009851 	.word	0x08009851
 80097f0:	0800985b 	.word	0x0800985b
 80097f4:	08009847 	.word	0x08009847
 80097f8:	0800985b 	.word	0x0800985b
 80097fc:	0800981b 	.word	0x0800981b
 8009800:	08009811 	.word	0x08009811
 8009804:	0800985b 	.word	0x0800985b
 8009808:	08009833 	.word	0x08009833
 800980c:	08009825 	.word	0x08009825
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa3c 	bl	8009c90 <USBD_GetDescriptor>
          break;
 8009818:	e024      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fbcb 	bl	8009fb8 <USBD_SetAddress>
          break;
 8009822:	e01f      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fc0a 	bl	800a040 <USBD_SetConfig>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
          break;
 8009830:	e018      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fcad 	bl	800a194 <USBD_GetConfig>
          break;
 800983a:	e013      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fcde 	bl	800a200 <USBD_GetStatus>
          break;
 8009844:	e00e      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fd0d 	bl	800a268 <USBD_SetFeature>
          break;
 800984e:	e009      	b.n	8009864 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fd31 	bl	800a2ba <USBD_ClrFeature>
          break;
 8009858:	e004      	b.n	8009864 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fd88 	bl	800a372 <USBD_CtlError>
          break;
 8009862:	bf00      	nop
      }
      break;
 8009864:	e004      	b.n	8009870 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fd82 	bl	800a372 <USBD_CtlError>
      break;
 800986e:	bf00      	nop
  }

  return ret;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop

0800987c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009892:	2b40      	cmp	r3, #64	; 0x40
 8009894:	d005      	beq.n	80098a2 <USBD_StdItfReq+0x26>
 8009896:	2b40      	cmp	r3, #64	; 0x40
 8009898:	d852      	bhi.n	8009940 <USBD_StdItfReq+0xc4>
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <USBD_StdItfReq+0x26>
 800989e:	2b20      	cmp	r3, #32
 80098a0:	d14e      	bne.n	8009940 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d840      	bhi.n	8009932 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	889b      	ldrh	r3, [r3, #4]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d836      	bhi.n	8009928 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	889b      	ldrh	r3, [r3, #4]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff fed8 	bl	8009678 <USBD_CoreFindIF>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
 80098ce:	2bff      	cmp	r3, #255	; 0xff
 80098d0:	d01d      	beq.n	800990e <USBD_StdItfReq+0x92>
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d11a      	bne.n	800990e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80098d8:	7bba      	ldrb	r2, [r7, #14]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	32ae      	adds	r2, #174	; 0xae
 80098de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00f      	beq.n	8009908 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80098e8:	7bba      	ldrb	r2, [r7, #14]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80098f0:	7bba      	ldrb	r2, [r7, #14]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	; 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009906:	e004      	b.n	8009912 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009908:	2303      	movs	r3, #3
 800990a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800990c:	e001      	b.n	8009912 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800990e:	2303      	movs	r3, #3
 8009910:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	88db      	ldrh	r3, [r3, #6]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d110      	bne.n	800993c <USBD_StdItfReq+0xc0>
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10d      	bne.n	800993c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fdd4 	bl	800a4ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009926:	e009      	b.n	800993c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fd21 	bl	800a372 <USBD_CtlError>
          break;
 8009930:	e004      	b.n	800993c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fd1c 	bl	800a372 <USBD_CtlError>
          break;
 800993a:	e000      	b.n	800993e <USBD_StdItfReq+0xc2>
          break;
 800993c:	bf00      	nop
      }
      break;
 800993e:	e004      	b.n	800994a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fd15 	bl	800a372 <USBD_CtlError>
      break;
 8009948:	bf00      	nop
  }

  return ret;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	889b      	ldrh	r3, [r3, #4]
 8009966:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009970:	2b40      	cmp	r3, #64	; 0x40
 8009972:	d007      	beq.n	8009984 <USBD_StdEPReq+0x30>
 8009974:	2b40      	cmp	r3, #64	; 0x40
 8009976:	f200 817f 	bhi.w	8009c78 <USBD_StdEPReq+0x324>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02a      	beq.n	80099d4 <USBD_StdEPReq+0x80>
 800997e:	2b20      	cmp	r3, #32
 8009980:	f040 817a 	bne.w	8009c78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff fe82 	bl	8009692 <USBD_CoreFindEP>
 800998e:	4603      	mov	r3, r0
 8009990:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009992:	7b7b      	ldrb	r3, [r7, #13]
 8009994:	2bff      	cmp	r3, #255	; 0xff
 8009996:	f000 8174 	beq.w	8009c82 <USBD_StdEPReq+0x32e>
 800999a:	7b7b      	ldrb	r3, [r7, #13]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f040 8170 	bne.w	8009c82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099a2:	7b7a      	ldrb	r2, [r7, #13]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099aa:	7b7a      	ldrb	r2, [r7, #13]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	32ae      	adds	r2, #174	; 0xae
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 8163 	beq.w	8009c82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80099bc:	7b7a      	ldrb	r2, [r7, #13]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	32ae      	adds	r2, #174	; 0xae
 80099c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	4798      	blx	r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099d2:	e156      	b.n	8009c82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	785b      	ldrb	r3, [r3, #1]
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d008      	beq.n	80099ee <USBD_StdEPReq+0x9a>
 80099dc:	2b03      	cmp	r3, #3
 80099de:	f300 8145 	bgt.w	8009c6c <USBD_StdEPReq+0x318>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 809b 	beq.w	8009b1e <USBD_StdEPReq+0x1ca>
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d03c      	beq.n	8009a66 <USBD_StdEPReq+0x112>
 80099ec:	e13e      	b.n	8009c6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d002      	beq.n	8009a00 <USBD_StdEPReq+0xac>
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d016      	beq.n	8009a2c <USBD_StdEPReq+0xd8>
 80099fe:	e02c      	b.n	8009a5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00d      	beq.n	8009a22 <USBD_StdEPReq+0xce>
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b80      	cmp	r3, #128	; 0x80
 8009a0a:	d00a      	beq.n	8009a22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 f9b6 	bl	800ad82 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a16:	2180      	movs	r1, #128	; 0x80
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 f9b2 	bl	800ad82 <USBD_LL_StallEP>
 8009a1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a20:	e020      	b.n	8009a64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fca4 	bl	800a372 <USBD_CtlError>
              break;
 8009a2a:	e01b      	b.n	8009a64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10e      	bne.n	8009a52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00b      	beq.n	8009a52 <USBD_StdEPReq+0xfe>
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b80      	cmp	r3, #128	; 0x80
 8009a3e:	d008      	beq.n	8009a52 <USBD_StdEPReq+0xfe>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	88db      	ldrh	r3, [r3, #6]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d104      	bne.n	8009a52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 f998 	bl	800ad82 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fd3b 	bl	800a4ce <USBD_CtlSendStatus>

              break;
 8009a58:	e004      	b.n	8009a64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fc88 	bl	800a372 <USBD_CtlError>
              break;
 8009a62:	bf00      	nop
          }
          break;
 8009a64:	e107      	b.n	8009c76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d002      	beq.n	8009a78 <USBD_StdEPReq+0x124>
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d016      	beq.n	8009aa4 <USBD_StdEPReq+0x150>
 8009a76:	e04b      	b.n	8009b10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00d      	beq.n	8009a9a <USBD_StdEPReq+0x146>
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	2b80      	cmp	r3, #128	; 0x80
 8009a82:	d00a      	beq.n	8009a9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 f97a 	bl	800ad82 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a8e:	2180      	movs	r1, #128	; 0x80
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 f976 	bl	800ad82 <USBD_LL_StallEP>
 8009a96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a98:	e040      	b.n	8009b1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fc68 	bl	800a372 <USBD_CtlError>
              break;
 8009aa2:	e03b      	b.n	8009b1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	885b      	ldrh	r3, [r3, #2]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d136      	bne.n	8009b1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 f980 	bl	800adc0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fd04 	bl	800a4ce <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff fde1 	bl	8009692 <USBD_CoreFindEP>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ad4:	7b7b      	ldrb	r3, [r7, #13]
 8009ad6:	2bff      	cmp	r3, #255	; 0xff
 8009ad8:	d01f      	beq.n	8009b1a <USBD_StdEPReq+0x1c6>
 8009ada:	7b7b      	ldrb	r3, [r7, #13]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11c      	bne.n	8009b1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ae0:	7b7a      	ldrb	r2, [r7, #13]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ae8:	7b7a      	ldrb	r2, [r7, #13]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32ae      	adds	r2, #174	; 0xae
 8009aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d010      	beq.n	8009b1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009af8:	7b7a      	ldrb	r2, [r7, #13]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	32ae      	adds	r2, #174	; 0xae
 8009afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b0e:	e004      	b.n	8009b1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fc2d 	bl	800a372 <USBD_CtlError>
              break;
 8009b18:	e000      	b.n	8009b1c <USBD_StdEPReq+0x1c8>
              break;
 8009b1a:	bf00      	nop
          }
          break;
 8009b1c:	e0ab      	b.n	8009c76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d002      	beq.n	8009b30 <USBD_StdEPReq+0x1dc>
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d032      	beq.n	8009b94 <USBD_StdEPReq+0x240>
 8009b2e:	e097      	b.n	8009c60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <USBD_StdEPReq+0x1f2>
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	2b80      	cmp	r3, #128	; 0x80
 8009b3a:	d004      	beq.n	8009b46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fc17 	bl	800a372 <USBD_CtlError>
                break;
 8009b44:	e091      	b.n	8009c6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	da0b      	bge.n	8009b66 <USBD_StdEPReq+0x212>
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b54:	4613      	mov	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	3310      	adds	r3, #16
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	4413      	add	r3, r2
 8009b62:	3304      	adds	r3, #4
 8009b64:	e00b      	b.n	8009b7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fc61 	bl	800a454 <USBD_CtlSendData>
              break;
 8009b92:	e06a      	b.n	8009c6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	da11      	bge.n	8009bc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	f003 020f 	and.w	r2, r3, #15
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	3324      	adds	r3, #36	; 0x24
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d117      	bne.n	8009be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fbda 	bl	800a372 <USBD_CtlError>
                  break;
 8009bbe:	e054      	b.n	8009c6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	f003 020f 	and.w	r2, r3, #15
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d104      	bne.n	8009be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fbc7 	bl	800a372 <USBD_CtlError>
                  break;
 8009be4:	e041      	b.n	8009c6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	da0b      	bge.n	8009c06 <USBD_StdEPReq+0x2b2>
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	3310      	adds	r3, #16
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	4413      	add	r3, r2
 8009c02:	3304      	adds	r3, #4
 8009c04:	e00b      	b.n	8009c1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <USBD_StdEPReq+0x2d8>
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	2b80      	cmp	r3, #128	; 0x80
 8009c2a:	d103      	bne.n	8009c34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	e00e      	b.n	8009c52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 f8e0 	bl	800adfe <USBD_LL_IsStallEP>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2201      	movs	r2, #1
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e002      	b.n	8009c52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2202      	movs	r2, #2
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fbfb 	bl	800a454 <USBD_CtlSendData>
              break;
 8009c5e:	e004      	b.n	8009c6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fb85 	bl	800a372 <USBD_CtlError>
              break;
 8009c68:	bf00      	nop
          }
          break;
 8009c6a:	e004      	b.n	8009c76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fb7f 	bl	800a372 <USBD_CtlError>
          break;
 8009c74:	bf00      	nop
      }
      break;
 8009c76:	e005      	b.n	8009c84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fb79 	bl	800a372 <USBD_CtlError>
      break;
 8009c80:	e000      	b.n	8009c84 <USBD_StdEPReq+0x330>
      break;
 8009c82:	bf00      	nop
  }

  return ret;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	885b      	ldrh	r3, [r3, #2]
 8009caa:	0a1b      	lsrs	r3, r3, #8
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b0e      	cmp	r3, #14
 8009cb2:	f200 8152 	bhi.w	8009f5a <USBD_GetDescriptor+0x2ca>
 8009cb6:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <USBD_GetDescriptor+0x2c>)
 8009cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbc:	08009d2d 	.word	0x08009d2d
 8009cc0:	08009d45 	.word	0x08009d45
 8009cc4:	08009d85 	.word	0x08009d85
 8009cc8:	08009f5b 	.word	0x08009f5b
 8009ccc:	08009f5b 	.word	0x08009f5b
 8009cd0:	08009efb 	.word	0x08009efb
 8009cd4:	08009f27 	.word	0x08009f27
 8009cd8:	08009f5b 	.word	0x08009f5b
 8009cdc:	08009f5b 	.word	0x08009f5b
 8009ce0:	08009f5b 	.word	0x08009f5b
 8009ce4:	08009f5b 	.word	0x08009f5b
 8009ce8:	08009f5b 	.word	0x08009f5b
 8009cec:	08009f5b 	.word	0x08009f5b
 8009cf0:	08009f5b 	.word	0x08009f5b
 8009cf4:	08009cf9 	.word	0x08009cf9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	7c12      	ldrb	r2, [r2, #16]
 8009d10:	f107 0108 	add.w	r1, r7, #8
 8009d14:	4610      	mov	r0, r2
 8009d16:	4798      	blx	r3
 8009d18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d1a:	e126      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fb27 	bl	800a372 <USBD_CtlError>
        err++;
 8009d24:	7afb      	ldrb	r3, [r7, #11]
 8009d26:	3301      	adds	r3, #1
 8009d28:	72fb      	strb	r3, [r7, #11]
      break;
 8009d2a:	e11e      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	7c12      	ldrb	r2, [r2, #16]
 8009d38:	f107 0108 	add.w	r1, r7, #8
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4798      	blx	r3
 8009d40:	60f8      	str	r0, [r7, #12]
      break;
 8009d42:	e112      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	7c1b      	ldrb	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10d      	bne.n	8009d68 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	f107 0208 	add.w	r2, r7, #8
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3301      	adds	r3, #1
 8009d62:	2202      	movs	r2, #2
 8009d64:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d66:	e100      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d70:	f107 0208 	add.w	r2, r7, #8
 8009d74:	4610      	mov	r0, r2
 8009d76:	4798      	blx	r3
 8009d78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	2202      	movs	r2, #2
 8009d80:	701a      	strb	r2, [r3, #0]
      break;
 8009d82:	e0f2      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	885b      	ldrh	r3, [r3, #2]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b05      	cmp	r3, #5
 8009d8c:	f200 80ac 	bhi.w	8009ee8 <USBD_GetDescriptor+0x258>
 8009d90:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <USBD_GetDescriptor+0x108>)
 8009d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d96:	bf00      	nop
 8009d98:	08009db1 	.word	0x08009db1
 8009d9c:	08009de5 	.word	0x08009de5
 8009da0:	08009e19 	.word	0x08009e19
 8009da4:	08009e4d 	.word	0x08009e4d
 8009da8:	08009e81 	.word	0x08009e81
 8009dac:	08009eb5 	.word	0x08009eb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00b      	beq.n	8009dd4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	7c12      	ldrb	r2, [r2, #16]
 8009dc8:	f107 0108 	add.w	r1, r7, #8
 8009dcc:	4610      	mov	r0, r2
 8009dce:	4798      	blx	r3
 8009dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd2:	e091      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 facb 	bl	800a372 <USBD_CtlError>
            err++;
 8009ddc:	7afb      	ldrb	r3, [r7, #11]
 8009dde:	3301      	adds	r3, #1
 8009de0:	72fb      	strb	r3, [r7, #11]
          break;
 8009de2:	e089      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00b      	beq.n	8009e08 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	7c12      	ldrb	r2, [r2, #16]
 8009dfc:	f107 0108 	add.w	r1, r7, #8
 8009e00:	4610      	mov	r0, r2
 8009e02:	4798      	blx	r3
 8009e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e06:	e077      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fab1 	bl	800a372 <USBD_CtlError>
            err++;
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	3301      	adds	r3, #1
 8009e14:	72fb      	strb	r3, [r7, #11]
          break;
 8009e16:	e06f      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00b      	beq.n	8009e3c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	7c12      	ldrb	r2, [r2, #16]
 8009e30:	f107 0108 	add.w	r1, r7, #8
 8009e34:	4610      	mov	r0, r2
 8009e36:	4798      	blx	r3
 8009e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3a:	e05d      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fa97 	bl	800a372 <USBD_CtlError>
            err++;
 8009e44:	7afb      	ldrb	r3, [r7, #11]
 8009e46:	3301      	adds	r3, #1
 8009e48:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4a:	e055      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00b      	beq.n	8009e70 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	7c12      	ldrb	r2, [r2, #16]
 8009e64:	f107 0108 	add.w	r1, r7, #8
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4798      	blx	r3
 8009e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e6e:	e043      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fa7d 	bl	800a372 <USBD_CtlError>
            err++;
 8009e78:	7afb      	ldrb	r3, [r7, #11]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e7e:	e03b      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	7c12      	ldrb	r2, [r2, #16]
 8009e98:	f107 0108 	add.w	r1, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ea2:	e029      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa63 	bl	800a372 <USBD_CtlError>
            err++;
 8009eac:	7afb      	ldrb	r3, [r7, #11]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009eb2:	e021      	b.n	8009ef8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	7c12      	ldrb	r2, [r2, #16]
 8009ecc:	f107 0108 	add.w	r1, r7, #8
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4798      	blx	r3
 8009ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed6:	e00f      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa49 	bl	800a372 <USBD_CtlError>
            err++;
 8009ee0:	7afb      	ldrb	r3, [r7, #11]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee6:	e007      	b.n	8009ef8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa41 	bl	800a372 <USBD_CtlError>
          err++;
 8009ef0:	7afb      	ldrb	r3, [r7, #11]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009ef6:	bf00      	nop
      }
      break;
 8009ef8:	e037      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	7c1b      	ldrb	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0a:	f107 0208 	add.w	r2, r7, #8
 8009f0e:	4610      	mov	r0, r2
 8009f10:	4798      	blx	r3
 8009f12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f14:	e029      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fa2a 	bl	800a372 <USBD_CtlError>
        err++;
 8009f1e:	7afb      	ldrb	r3, [r7, #11]
 8009f20:	3301      	adds	r3, #1
 8009f22:	72fb      	strb	r3, [r7, #11]
      break;
 8009f24:	e021      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	7c1b      	ldrb	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10d      	bne.n	8009f4a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f36:	f107 0208 	add.w	r2, r7, #8
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4798      	blx	r3
 8009f3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3301      	adds	r3, #1
 8009f44:	2207      	movs	r2, #7
 8009f46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f48:	e00f      	b.n	8009f6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fa10 	bl	800a372 <USBD_CtlError>
        err++;
 8009f52:	7afb      	ldrb	r3, [r7, #11]
 8009f54:	3301      	adds	r3, #1
 8009f56:	72fb      	strb	r3, [r7, #11]
      break;
 8009f58:	e007      	b.n	8009f6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fa08 	bl	800a372 <USBD_CtlError>
      err++;
 8009f62:	7afb      	ldrb	r3, [r7, #11]
 8009f64:	3301      	adds	r3, #1
 8009f66:	72fb      	strb	r3, [r7, #11]
      break;
 8009f68:	bf00      	nop
  }

  if (err != 0U)
 8009f6a:	7afb      	ldrb	r3, [r7, #11]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d11e      	bne.n	8009fae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	88db      	ldrh	r3, [r3, #6]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d016      	beq.n	8009fa6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009f78:	893b      	ldrh	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00e      	beq.n	8009f9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	88da      	ldrh	r2, [r3, #6]
 8009f82:	893b      	ldrh	r3, [r7, #8]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	bf28      	it	cs
 8009f88:	4613      	movcs	r3, r2
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f8e:	893b      	ldrh	r3, [r7, #8]
 8009f90:	461a      	mov	r2, r3
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fa5d 	bl	800a454 <USBD_CtlSendData>
 8009f9a:	e009      	b.n	8009fb0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9e7 	bl	800a372 <USBD_CtlError>
 8009fa4:	e004      	b.n	8009fb0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fa91 	bl	800a4ce <USBD_CtlSendStatus>
 8009fac:	e000      	b.n	8009fb0 <USBD_GetDescriptor+0x320>
    return;
 8009fae:	bf00      	nop
  }
}
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop

08009fb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	889b      	ldrh	r3, [r3, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d131      	bne.n	800a02e <USBD_SetAddress+0x76>
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	88db      	ldrh	r3, [r3, #6]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d12d      	bne.n	800a02e <USBD_SetAddress+0x76>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	885b      	ldrh	r3, [r3, #2]
 8009fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8009fd8:	d829      	bhi.n	800a02e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	885b      	ldrh	r3, [r3, #2]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d104      	bne.n	8009ffc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f9bc 	bl	800a372 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffa:	e01d      	b.n	800a038 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7bfa      	ldrb	r2, [r7, #15]
 800a000:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 ff24 	bl	800ae56 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fa5d 	bl	800a4ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d004      	beq.n	800a024 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2202      	movs	r2, #2
 800a01e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a022:	e009      	b.n	800a038 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02c:	e004      	b.n	800a038 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f99e 	bl	800a372 <USBD_CtlError>
  }
}
 800a036:	bf00      	nop
 800a038:	bf00      	nop
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	885b      	ldrh	r3, [r3, #2]
 800a052:	b2da      	uxtb	r2, r3
 800a054:	4b4e      	ldr	r3, [pc, #312]	; (800a190 <USBD_SetConfig+0x150>)
 800a056:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a058:	4b4d      	ldr	r3, [pc, #308]	; (800a190 <USBD_SetConfig+0x150>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d905      	bls.n	800a06c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f985 	bl	800a372 <USBD_CtlError>
    return USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	e08c      	b.n	800a186 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d002      	beq.n	800a07e <USBD_SetConfig+0x3e>
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d029      	beq.n	800a0d0 <USBD_SetConfig+0x90>
 800a07c:	e075      	b.n	800a16a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a07e:	4b44      	ldr	r3, [pc, #272]	; (800a190 <USBD_SetConfig+0x150>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d020      	beq.n	800a0c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a086:	4b42      	ldr	r3, [pc, #264]	; (800a190 <USBD_SetConfig+0x150>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a090:	4b3f      	ldr	r3, [pc, #252]	; (800a190 <USBD_SetConfig+0x150>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7fe ffbc 	bl	8009014 <USBD_SetClassConfig>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d008      	beq.n	800a0b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f962 	bl	800a372 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0b6:	e065      	b.n	800a184 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fa08 	bl	800a4ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2203      	movs	r2, #3
 800a0c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0c6:	e05d      	b.n	800a184 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fa00 	bl	800a4ce <USBD_CtlSendStatus>
      break;
 800a0ce:	e059      	b.n	800a184 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0d0:	4b2f      	ldr	r3, [pc, #188]	; (800a190 <USBD_SetConfig+0x150>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d112      	bne.n	800a0fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a0e0:	4b2b      	ldr	r3, [pc, #172]	; (800a190 <USBD_SetConfig+0x150>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0ea:	4b29      	ldr	r3, [pc, #164]	; (800a190 <USBD_SetConfig+0x150>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7fe ffab 	bl	800904c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f9e9 	bl	800a4ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0fc:	e042      	b.n	800a184 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a0fe:	4b24      	ldr	r3, [pc, #144]	; (800a190 <USBD_SetConfig+0x150>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d02a      	beq.n	800a162 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7fe ff99 	bl	800904c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a11a:	4b1d      	ldr	r3, [pc, #116]	; (800a190 <USBD_SetConfig+0x150>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a124:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <USBD_SetConfig+0x150>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7fe ff72 	bl	8009014 <USBD_SetClassConfig>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00f      	beq.n	800a15a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f918 	bl	800a372 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fe ff7e 	bl	800904c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2202      	movs	r2, #2
 800a154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a158:	e014      	b.n	800a184 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f9b7 	bl	800a4ce <USBD_CtlSendStatus>
      break;
 800a160:	e010      	b.n	800a184 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f9b3 	bl	800a4ce <USBD_CtlSendStatus>
      break;
 800a168:	e00c      	b.n	800a184 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f900 	bl	800a372 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a172:	4b07      	ldr	r3, [pc, #28]	; (800a190 <USBD_SetConfig+0x150>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fe ff67 	bl	800904c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a17e:	2303      	movs	r3, #3
 800a180:	73fb      	strb	r3, [r7, #15]
      break;
 800a182:	bf00      	nop
  }

  return ret;
 800a184:	7bfb      	ldrb	r3, [r7, #15]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000418 	.word	0x20000418

0800a194 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	88db      	ldrh	r3, [r3, #6]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d004      	beq.n	800a1b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f8e2 	bl	800a372 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1ae:	e023      	b.n	800a1f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	dc02      	bgt.n	800a1c2 <USBD_GetConfig+0x2e>
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dc03      	bgt.n	800a1c8 <USBD_GetConfig+0x34>
 800a1c0:	e015      	b.n	800a1ee <USBD_GetConfig+0x5a>
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d00b      	beq.n	800a1de <USBD_GetConfig+0x4a>
 800a1c6:	e012      	b.n	800a1ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f93c 	bl	800a454 <USBD_CtlSendData>
        break;
 800a1dc:	e00c      	b.n	800a1f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f934 	bl	800a454 <USBD_CtlSendData>
        break;
 800a1ec:	e004      	b.n	800a1f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8be 	bl	800a372 <USBD_CtlError>
        break;
 800a1f6:	bf00      	nop
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a210:	b2db      	uxtb	r3, r3
 800a212:	3b01      	subs	r3, #1
 800a214:	2b02      	cmp	r3, #2
 800a216:	d81e      	bhi.n	800a256 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	88db      	ldrh	r3, [r3, #6]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d004      	beq.n	800a22a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8a5 	bl	800a372 <USBD_CtlError>
        break;
 800a228:	e01a      	b.n	800a260 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a236:	2b00      	cmp	r3, #0
 800a238:	d005      	beq.n	800a246 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	f043 0202 	orr.w	r2, r3, #2
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	330c      	adds	r3, #12
 800a24a:	2202      	movs	r2, #2
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f900 	bl	800a454 <USBD_CtlSendData>
      break;
 800a254:	e004      	b.n	800a260 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f88a 	bl	800a372 <USBD_CtlError>
      break;
 800a25e:	bf00      	nop
  }
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	885b      	ldrh	r3, [r3, #2]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d107      	bne.n	800a28a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f923 	bl	800a4ce <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a288:	e013      	b.n	800a2b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	885b      	ldrh	r3, [r3, #2]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d10b      	bne.n	800a2aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	889b      	ldrh	r3, [r3, #4]
 800a296:	0a1b      	lsrs	r3, r3, #8
 800a298:	b29b      	uxth	r3, r3
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f913 	bl	800a4ce <USBD_CtlSendStatus>
}
 800a2a8:	e003      	b.n	800a2b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f860 	bl	800a372 <USBD_CtlError>
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d80b      	bhi.n	800a2ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	885b      	ldrh	r3, [r3, #2]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d10c      	bne.n	800a2f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f8f3 	bl	800a4ce <USBD_CtlSendStatus>
      }
      break;
 800a2e8:	e004      	b.n	800a2f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f840 	bl	800a372 <USBD_CtlError>
      break;
 800a2f2:	e000      	b.n	800a2f6 <USBD_ClrFeature+0x3c>
      break;
 800a2f4:	bf00      	nop
  }
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	781a      	ldrb	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3301      	adds	r3, #1
 800a318:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	781a      	ldrb	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7ff fa16 	bl	800975a <SWAPBYTE>
 800a32e:	4603      	mov	r3, r0
 800a330:	461a      	mov	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3301      	adds	r3, #1
 800a33a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3301      	adds	r3, #1
 800a340:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff fa09 	bl	800975a <SWAPBYTE>
 800a348:	4603      	mov	r3, r0
 800a34a:	461a      	mov	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3301      	adds	r3, #1
 800a354:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3301      	adds	r3, #1
 800a35a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff f9fc 	bl	800975a <SWAPBYTE>
 800a362:	4603      	mov	r3, r0
 800a364:	461a      	mov	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	80da      	strh	r2, [r3, #6]
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a37c:	2180      	movs	r1, #128	; 0x80
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fcff 	bl	800ad82 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a384:	2100      	movs	r1, #0
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fcfb 	bl	800ad82 <USBD_LL_StallEP>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d036      	beq.n	800a418 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a3ae:	6938      	ldr	r0, [r7, #16]
 800a3b0:	f000 f836 	bl	800a420 <USBD_GetLen>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	7812      	ldrb	r2, [r2, #0]
 800a3cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	4413      	add	r3, r2
 800a3da:	2203      	movs	r2, #3
 800a3dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3e4:	e013      	b.n	800a40e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	7812      	ldrb	r2, [r2, #0]
 800a3f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	613b      	str	r3, [r7, #16]
    idx++;
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	4413      	add	r3, r2
 800a404:	2200      	movs	r2, #0
 800a406:	701a      	strb	r2, [r3, #0]
    idx++;
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	3301      	adds	r3, #1
 800a40c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1e7      	bne.n	800a3e6 <USBD_GetString+0x52>
 800a416:	e000      	b.n	800a41a <USBD_GetString+0x86>
    return;
 800a418:	bf00      	nop
  }
}
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a430:	e005      	b.n	800a43e <USBD_GetLen+0x1e>
  {
    len++;
 800a432:	7bfb      	ldrb	r3, [r7, #15]
 800a434:	3301      	adds	r3, #1
 800a436:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1f5      	bne.n	800a432 <USBD_GetLen+0x12>
  }

  return len;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2202      	movs	r2, #2
 800a464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	2100      	movs	r1, #0
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 fd0a 	bl	800ae94 <USBD_LL_Transmit>

  return USBD_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	2100      	movs	r1, #0
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fcf9 	bl	800ae94 <USBD_LL_Transmit>

  return USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 fd09 	bl	800aed6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2204      	movs	r2, #4
 800a4da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fcd5 	bl	800ae94 <USBD_LL_Transmit>

  return USBD_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2205      	movs	r2, #5
 800a500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a504:	2300      	movs	r3, #0
 800a506:	2200      	movs	r2, #0
 800a508:	2100      	movs	r1, #0
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fce3 	bl	800aed6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	4613      	mov	r3, r2
 800a528:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a52a:	2301      	movs	r3, #1
 800a52c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a532:	4b1f      	ldr	r3, [pc, #124]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a534:	7a5b      	ldrb	r3, [r3, #9]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d131      	bne.n	800a5a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a53c:	4b1c      	ldr	r3, [pc, #112]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a53e:	7a5b      	ldrb	r3, [r3, #9]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	461a      	mov	r2, r3
 800a544:	4b1a      	ldr	r3, [pc, #104]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a546:	2100      	movs	r1, #0
 800a548:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a54a:	4b19      	ldr	r3, [pc, #100]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a54c:	7a5b      	ldrb	r3, [r3, #9]
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	4a17      	ldr	r2, [pc, #92]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a55a:	4b15      	ldr	r3, [pc, #84]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a55c:	7a5b      	ldrb	r3, [r3, #9]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	461a      	mov	r2, r3
 800a562:	4b13      	ldr	r3, [pc, #76]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a564:	4413      	add	r3, r2
 800a566:	79fa      	ldrb	r2, [r7, #7]
 800a568:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a56a:	4b11      	ldr	r3, [pc, #68]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a56c:	7a5b      	ldrb	r3, [r3, #9]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	b2d1      	uxtb	r1, r2
 800a574:	4a0e      	ldr	r2, [pc, #56]	; (800a5b0 <FATFS_LinkDriverEx+0x94>)
 800a576:	7251      	strb	r1, [r2, #9]
 800a578:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a57a:	7dbb      	ldrb	r3, [r7, #22]
 800a57c:	3330      	adds	r3, #48	; 0x30
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	3301      	adds	r3, #1
 800a588:	223a      	movs	r2, #58	; 0x3a
 800a58a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	3302      	adds	r3, #2
 800a590:	222f      	movs	r2, #47	; 0x2f
 800a592:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	3303      	adds	r3, #3
 800a598:	2200      	movs	r2, #0
 800a59a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	371c      	adds	r7, #28
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	2000041c 	.word	0x2000041c

0800a5b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5be:	2200      	movs	r2, #0
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff ffaa 	bl	800a51c <FATFS_LinkDriverEx>
 800a5c8:	4603      	mov	r3, r0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4912      	ldr	r1, [pc, #72]	; (800a624 <MX_USB_DEVICE_Init+0x50>)
 800a5dc:	4812      	ldr	r0, [pc, #72]	; (800a628 <MX_USB_DEVICE_Init+0x54>)
 800a5de:	f7fe fc9c 	bl	8008f1a <USBD_Init>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5e8:	f7f6 fb0a 	bl	8000c00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800a5ec:	490f      	ldr	r1, [pc, #60]	; (800a62c <MX_USB_DEVICE_Init+0x58>)
 800a5ee:	480e      	ldr	r0, [pc, #56]	; (800a628 <MX_USB_DEVICE_Init+0x54>)
 800a5f0:	f7fe fcc3 	bl	8008f7a <USBD_RegisterClass>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5fa:	f7f6 fb01 	bl	8000c00 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800a5fe:	490c      	ldr	r1, [pc, #48]	; (800a630 <MX_USB_DEVICE_Init+0x5c>)
 800a600:	4809      	ldr	r0, [pc, #36]	; (800a628 <MX_USB_DEVICE_Init+0x54>)
 800a602:	f7fc ff6d 	bl	80074e0 <USBD_MSC_RegisterStorage>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a60c:	f7f6 faf8 	bl	8000c00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a610:	4805      	ldr	r0, [pc, #20]	; (800a628 <MX_USB_DEVICE_Init+0x54>)
 800a612:	f7fe fce8 	bl	8008fe6 <USBD_Start>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a61c:	f7f6 faf0 	bl	8000c00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a620:	bf00      	nop
 800a622:	bd80      	pop	{r7, pc}
 800a624:	200000c8 	.word	0x200000c8
 800a628:	20000428 	.word	0x20000428
 800a62c:	20000020 	.word	0x20000020
 800a630:	20000128 	.word	0x20000128

0800a634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	6039      	str	r1, [r7, #0]
 800a63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2212      	movs	r2, #18
 800a644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a646:	4b03      	ldr	r3, [pc, #12]	; (800a654 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	200000e8 	.word	0x200000e8

0800a658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	6039      	str	r1, [r7, #0]
 800a662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2204      	movs	r2, #4
 800a668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a66a:	4b03      	ldr	r3, [pc, #12]	; (800a678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	20000108 	.word	0x20000108

0800a67c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a688:	79fb      	ldrb	r3, [r7, #7]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d105      	bne.n	800a69a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4907      	ldr	r1, [pc, #28]	; (800a6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a692:	4808      	ldr	r0, [pc, #32]	; (800a6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a694:	f7ff fe7e 	bl	800a394 <USBD_GetString>
 800a698:	e004      	b.n	800a6a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	4904      	ldr	r1, [pc, #16]	; (800a6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a69e:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a6a0:	f7ff fe78 	bl	800a394 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6a4:	4b02      	ldr	r3, [pc, #8]	; (800a6b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20000704 	.word	0x20000704
 800a6b4:	0800b0d4 	.word	0x0800b0d4

0800a6b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	6039      	str	r1, [r7, #0]
 800a6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	4904      	ldr	r1, [pc, #16]	; (800a6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6c8:	4804      	ldr	r0, [pc, #16]	; (800a6dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6ca:	f7ff fe63 	bl	800a394 <USBD_GetString>
  return USBD_StrDesc;
 800a6ce:	4b02      	ldr	r3, [pc, #8]	; (800a6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	20000704 	.word	0x20000704
 800a6dc:	0800b0e8 	.word	0x0800b0e8

0800a6e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	221a      	movs	r2, #26
 800a6f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6f2:	f000 f855 	bl	800a7a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6f6:	4b02      	ldr	r3, [pc, #8]	; (800a700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	2000010c 	.word	0x2000010c

0800a704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	6039      	str	r1, [r7, #0]
 800a70e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	4907      	ldr	r1, [pc, #28]	; (800a738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a71a:	4808      	ldr	r0, [pc, #32]	; (800a73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a71c:	f7ff fe3a 	bl	800a394 <USBD_GetString>
 800a720:	e004      	b.n	800a72c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	4904      	ldr	r1, [pc, #16]	; (800a738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a726:	4805      	ldr	r0, [pc, #20]	; (800a73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a728:	f7ff fe34 	bl	800a394 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a72c:	4b02      	ldr	r3, [pc, #8]	; (800a738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20000704 	.word	0x20000704
 800a73c:	0800b0fc 	.word	0x0800b0fc

0800a740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	6039      	str	r1, [r7, #0]
 800a74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d105      	bne.n	800a75e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4907      	ldr	r1, [pc, #28]	; (800a774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a756:	4808      	ldr	r0, [pc, #32]	; (800a778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a758:	f7ff fe1c 	bl	800a394 <USBD_GetString>
 800a75c:	e004      	b.n	800a768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	4904      	ldr	r1, [pc, #16]	; (800a774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a762:	4805      	ldr	r0, [pc, #20]	; (800a778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a764:	f7ff fe16 	bl	800a394 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a768:	4b02      	ldr	r3, [pc, #8]	; (800a774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20000704 	.word	0x20000704
 800a778:	0800b108 	.word	0x0800b108

0800a77c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	6039      	str	r1, [r7, #0]
 800a786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	220c      	movs	r2, #12
 800a78c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a78e:	4b03      	ldr	r3, [pc, #12]	; (800a79c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a790:	4618      	mov	r0, r3
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	200000fc 	.word	0x200000fc

0800a7a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7a6:	4b0f      	ldr	r3, [pc, #60]	; (800a7e4 <Get_SerialNum+0x44>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <Get_SerialNum+0x48>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7b2:	4b0e      	ldr	r3, [pc, #56]	; (800a7ec <Get_SerialNum+0x4c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4413      	add	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d009      	beq.n	800a7da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7c6:	2208      	movs	r2, #8
 800a7c8:	4909      	ldr	r1, [pc, #36]	; (800a7f0 <Get_SerialNum+0x50>)
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 f814 	bl	800a7f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7d0:	2204      	movs	r2, #4
 800a7d2:	4908      	ldr	r1, [pc, #32]	; (800a7f4 <Get_SerialNum+0x54>)
 800a7d4:	68b8      	ldr	r0, [r7, #8]
 800a7d6:	f000 f80f 	bl	800a7f8 <IntToUnicode>
  }
}
 800a7da:	bf00      	nop
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	1fff7a10 	.word	0x1fff7a10
 800a7e8:	1fff7a14 	.word	0x1fff7a14
 800a7ec:	1fff7a18 	.word	0x1fff7a18
 800a7f0:	2000010e 	.word	0x2000010e
 800a7f4:	2000011e 	.word	0x2000011e

0800a7f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4613      	mov	r3, r2
 800a804:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a80a:	2300      	movs	r3, #0
 800a80c:	75fb      	strb	r3, [r7, #23]
 800a80e:	e027      	b.n	800a860 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	0f1b      	lsrs	r3, r3, #28
 800a814:	2b09      	cmp	r3, #9
 800a816:	d80b      	bhi.n	800a830 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	0f1b      	lsrs	r3, r3, #28
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	005b      	lsls	r3, r3, #1
 800a822:	4619      	mov	r1, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	440b      	add	r3, r1
 800a828:	3230      	adds	r2, #48	; 0x30
 800a82a:	b2d2      	uxtb	r2, r2
 800a82c:	701a      	strb	r2, [r3, #0]
 800a82e:	e00a      	b.n	800a846 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	0f1b      	lsrs	r3, r3, #28
 800a834:	b2da      	uxtb	r2, r3
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	4619      	mov	r1, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	440b      	add	r3, r1
 800a840:	3237      	adds	r2, #55	; 0x37
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	011b      	lsls	r3, r3, #4
 800a84a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	3301      	adds	r3, #1
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	4413      	add	r3, r2
 800a856:	2200      	movs	r2, #0
 800a858:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a85a:	7dfb      	ldrb	r3, [r7, #23]
 800a85c:	3301      	adds	r3, #1
 800a85e:	75fb      	strb	r3, [r7, #23]
 800a860:	7dfa      	ldrb	r2, [r7, #23]
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	429a      	cmp	r2, r3
 800a866:	d3d3      	bcc.n	800a810 <IntToUnicode+0x18>
  }
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	371c      	adds	r7, #28
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	4603      	mov	r3, r0
 800a87e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800a880:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a882:	4618      	mov	r0, r3
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	4603      	mov	r3, r0
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	607a      	str	r2, [r7, #4]
 800a89a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a8a2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8aa:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800a8ac:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800a8c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	4603      	mov	r3, r0
 800a8da:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800a8dc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b085      	sub	sp, #20
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73fb      	strb	r3, [r7, #15]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800a8fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	607a      	str	r2, [r7, #4]
 800a916:	461a      	mov	r2, r3
 800a918:	4603      	mov	r3, r0
 800a91a:	73fb      	strb	r3, [r7, #15]
 800a91c:	4613      	mov	r3, r2
 800a91e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800a920:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800a92e:	b480      	push	{r7}
 800a930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800a932:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a934:	4618      	mov	r0, r3
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
	...

0800a940 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b098      	sub	sp, #96	; 0x60
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	605a      	str	r2, [r3, #4]
 800a952:	609a      	str	r2, [r3, #8]
 800a954:	60da      	str	r2, [r3, #12]
 800a956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a958:	f107 0310 	add.w	r3, r7, #16
 800a95c:	223c      	movs	r2, #60	; 0x3c
 800a95e:	2100      	movs	r1, #0
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fba3 	bl	800b0ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a96e:	d148      	bne.n	800aa02 <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a970:	2320      	movs	r3, #32
 800a972:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a974:	2300      	movs	r3, #0
 800a976:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a978:	f107 0310 	add.w	r3, r7, #16
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7f9 fc93 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 800a988:	f7f6 f93a 	bl	8000c00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	4b1e      	ldr	r3, [pc, #120]	; (800aa0c <HAL_PCD_MspInit+0xcc>)
 800a992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a994:	4a1d      	ldr	r2, [pc, #116]	; (800aa0c <HAL_PCD_MspInit+0xcc>)
 800a996:	f043 0301 	orr.w	r3, r3, #1
 800a99a:	6313      	str	r3, [r2, #48]	; 0x30
 800a99c:	4b1b      	ldr	r3, [pc, #108]	; (800aa0c <HAL_PCD_MspInit+0xcc>)
 800a99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	60fb      	str	r3, [r7, #12]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a9a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a9ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9ba:	230a      	movs	r3, #10
 800a9bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4812      	ldr	r0, [pc, #72]	; (800aa10 <HAL_PCD_MspInit+0xd0>)
 800a9c6:	f7f7 fc7f 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9ca:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <HAL_PCD_MspInit+0xcc>)
 800a9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ce:	4a0f      	ldr	r2, [pc, #60]	; (800aa0c <HAL_PCD_MspInit+0xcc>)
 800a9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d4:	6353      	str	r3, [r2, #52]	; 0x34
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60bb      	str	r3, [r7, #8]
 800a9da:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <HAL_PCD_MspInit+0xcc>)
 800a9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9de:	4a0b      	ldr	r2, [pc, #44]	; (800aa0c <HAL_PCD_MspInit+0xcc>)
 800a9e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9e4:	6453      	str	r3, [r2, #68]	; 0x44
 800a9e6:	4b09      	ldr	r3, [pc, #36]	; (800aa0c <HAL_PCD_MspInit+0xcc>)
 800a9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ee:	60bb      	str	r3, [r7, #8]
 800a9f0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2043      	movs	r0, #67	; 0x43
 800a9f8:	f7f7 f945 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9fc:	2043      	movs	r0, #67	; 0x43
 800a9fe:	f7f7 f95e 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa02:	bf00      	nop
 800aa04:	3760      	adds	r7, #96	; 0x60
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	40023800 	.word	0x40023800
 800aa10:	40020000 	.word	0x40020000

0800aa14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7fe fb28 	bl	8009080 <USBD_LL_SetupStage>
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aa4a:	78fa      	ldrb	r2, [r7, #3]
 800aa4c:	6879      	ldr	r1, [r7, #4]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	440b      	add	r3, r1
 800aa58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	78fb      	ldrb	r3, [r7, #3]
 800aa60:	4619      	mov	r1, r3
 800aa62:	f7fe fb62 	bl	800912a <USBD_LL_DataOutStage>
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	460b      	mov	r3, r1
 800aa78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4613      	mov	r3, r2
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	334c      	adds	r3, #76	; 0x4c
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	78fb      	ldrb	r3, [r7, #3]
 800aa94:	4619      	mov	r1, r3
 800aa96:	f7fe fbfb 	bl	8009290 <USBD_LL_DataInStage>
}
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe fd2f 	bl	8009514 <USBD_LL_SOF>
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d001      	beq.n	800aad6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aad2:	f7f6 f895 	bl	8000c00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aadc:	7bfa      	ldrb	r2, [r7, #15]
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe fcd9 	bl	8009498 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fc81 	bl	80093f4 <USBD_LL_Reset>
}
 800aaf2:	bf00      	nop
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fcd4 	bl	80094b8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	6812      	ldr	r2, [r2, #0]
 800ab1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab30:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <HAL_PCD_SuspendCallback+0x48>)
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	4a03      	ldr	r2, [pc, #12]	; (800ab44 <HAL_PCD_SuspendCallback+0x48>)
 800ab36:	f043 0306 	orr.w	r3, r3, #6
 800ab3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab3c:	bf00      	nop
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	e000ed00 	.word	0xe000ed00

0800ab48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fe fcc4 	bl	80094e4 <USBD_LL_Resume>
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	4611      	mov	r1, r2
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fe fd1c 	bl	80095b8 <USBD_LL_IsoOUTIncomplete>
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab9a:	78fa      	ldrb	r2, [r7, #3]
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fcd8 	bl	8009554 <USBD_LL_IsoINIncomplete>
}
 800aba4:	bf00      	nop
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe fd2e 	bl	800961c <USBD_LL_DevConnected>
}
 800abc0:	bf00      	nop
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fe fd2b 	bl	8009632 <USBD_LL_DevDisconnected>
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d13f      	bne.n	800ac74 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800abf4:	4a22      	ldr	r2, [pc, #136]	; (800ac80 <USBD_LL_Init+0x9c>)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a20      	ldr	r2, [pc, #128]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac04:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ac0c:	4b1c      	ldr	r3, [pc, #112]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac0e:	2206      	movs	r2, #6
 800ac10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac12:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac14:	2202      	movs	r2, #2
 800ac16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac18:	4b19      	ldr	r3, [pc, #100]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac1e:	4b18      	ldr	r3, [pc, #96]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac20:	2202      	movs	r2, #2
 800ac22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac24:	4b16      	ldr	r3, [pc, #88]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac26:	2200      	movs	r2, #0
 800ac28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac2a:	4b15      	ldr	r3, [pc, #84]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac30:	4b13      	ldr	r3, [pc, #76]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ac36:	4b12      	ldr	r3, [pc, #72]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac3c:	4b10      	ldr	r3, [pc, #64]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac42:	4b0f      	ldr	r3, [pc, #60]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac48:	480d      	ldr	r0, [pc, #52]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac4a:	f7f7 fe17 	bl	800287c <HAL_PCD_Init>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800ac54:	f7f5 ffd4 	bl	8000c00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac58:	2180      	movs	r1, #128	; 0x80
 800ac5a:	4809      	ldr	r0, [pc, #36]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac5c:	f7f9 f8cf 	bl	8003dfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac60:	2240      	movs	r2, #64	; 0x40
 800ac62:	2100      	movs	r1, #0
 800ac64:	4806      	ldr	r0, [pc, #24]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac66:	f7f9 f883 	bl	8003d70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac6a:	2280      	movs	r2, #128	; 0x80
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	4804      	ldr	r0, [pc, #16]	; (800ac80 <USBD_LL_Init+0x9c>)
 800ac70:	f7f9 f87e 	bl	8003d70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000904 	.word	0x20000904

0800ac84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7f7 ff12 	bl	8002ac4 <HAL_PCD_Start>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 f9b0 	bl	800b00c <USBD_Get_USB_Status>
 800acac:	4603      	mov	r3, r0
 800acae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	4608      	mov	r0, r1
 800acc4:	4611      	mov	r1, r2
 800acc6:	461a      	mov	r2, r3
 800acc8:	4603      	mov	r3, r0
 800acca:	70fb      	strb	r3, [r7, #3]
 800accc:	460b      	mov	r3, r1
 800acce:	70bb      	strb	r3, [r7, #2]
 800acd0:	4613      	mov	r3, r2
 800acd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ace2:	78bb      	ldrb	r3, [r7, #2]
 800ace4:	883a      	ldrh	r2, [r7, #0]
 800ace6:	78f9      	ldrb	r1, [r7, #3]
 800ace8:	f7f8 fc10 	bl	800350c <HAL_PCD_EP_Open>
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 f98a 	bl	800b00c <USBD_Get_USB_Status>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad20:	78fa      	ldrb	r2, [r7, #3]
 800ad22:	4611      	mov	r1, r2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7f8 fc59 	bl	80035dc <HAL_PCD_EP_Close>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 f96b 	bl	800b00c <USBD_Get_USB_Status>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad5e:	78fa      	ldrb	r2, [r7, #3]
 800ad60:	4611      	mov	r1, r2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7f8 fe1c 	bl	80039a0 <HAL_PCD_EP_Flush>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 f94c 	bl	800b00c <USBD_Get_USB_Status>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad9c:	78fa      	ldrb	r2, [r7, #3]
 800ad9e:	4611      	mov	r1, r2
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7f8 fd12 	bl	80037ca <HAL_PCD_EP_SetStall>
 800ada6:	4603      	mov	r3, r0
 800ada8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
 800adac:	4618      	mov	r0, r3
 800adae:	f000 f92d 	bl	800b00c <USBD_Get_USB_Status>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adda:	78fa      	ldrb	r2, [r7, #3]
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f8 fd57 	bl	8003892 <HAL_PCD_EP_ClrStall>
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f90e 	bl	800b00c <USBD_Get_USB_Status>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b085      	sub	sp, #20
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	460b      	mov	r3, r1
 800ae08:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae10:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	da0b      	bge.n	800ae32 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae1a:	78fb      	ldrb	r3, [r7, #3]
 800ae1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae20:	68f9      	ldr	r1, [r7, #12]
 800ae22:	4613      	mov	r3, r2
 800ae24:	00db      	lsls	r3, r3, #3
 800ae26:	4413      	add	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	440b      	add	r3, r1
 800ae2c:	333e      	adds	r3, #62	; 0x3e
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	e00b      	b.n	800ae4a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae32:	78fb      	ldrb	r3, [r7, #3]
 800ae34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae38:	68f9      	ldr	r1, [r7, #12]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	00db      	lsls	r3, r3, #3
 800ae3e:	4413      	add	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	440b      	add	r3, r1
 800ae44:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ae48:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b084      	sub	sp, #16
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	460b      	mov	r3, r1
 800ae60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae70:	78fa      	ldrb	r2, [r7, #3]
 800ae72:	4611      	mov	r1, r2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7f8 fb24 	bl	80034c2 <HAL_PCD_SetAddress>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 f8c3 	bl	800b00c <USBD_Get_USB_Status>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	607a      	str	r2, [r7, #4]
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	460b      	mov	r3, r1
 800aea2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aeb2:	7af9      	ldrb	r1, [r7, #11]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	f7f8 fc3d 	bl	8003736 <HAL_PCD_EP_Transmit>
 800aebc:	4603      	mov	r3, r0
 800aebe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aec0:	7dfb      	ldrb	r3, [r7, #23]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 f8a2 	bl	800b00c <USBD_Get_USB_Status>
 800aec8:	4603      	mov	r3, r0
 800aeca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aecc:	7dbb      	ldrb	r3, [r7, #22]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3718      	adds	r7, #24
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b086      	sub	sp, #24
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	460b      	mov	r3, r1
 800aee4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aef4:	7af9      	ldrb	r1, [r7, #11]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	f7f8 fbb9 	bl	8003670 <HAL_PCD_EP_Receive>
 800aefe:	4603      	mov	r3, r0
 800af00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af02:	7dfb      	ldrb	r3, [r7, #23]
 800af04:	4618      	mov	r0, r3
 800af06:	f000 f881 	bl	800b00c <USBD_Get_USB_Status>
 800af0a:	4603      	mov	r3, r0
 800af0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af2a:	78fa      	ldrb	r2, [r7, #3]
 800af2c:	4611      	mov	r1, r2
 800af2e:	4618      	mov	r0, r3
 800af30:	f7f8 fbe9 	bl	8003706 <HAL_PCD_EP_GetRxCount>
 800af34:	4603      	mov	r3, r0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800af4c:	78fb      	ldrb	r3, [r7, #3]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <HAL_PCDEx_LPM_Callback+0x18>
 800af52:	2b01      	cmp	r3, #1
 800af54:	d01f      	beq.n	800af96 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800af56:	e03b      	b.n	800afd0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a1b      	ldr	r3, [r3, #32]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d007      	beq.n	800af70 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800af60:	f7f5 faf4 	bl	800054c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af64:	4b1c      	ldr	r3, [pc, #112]	; (800afd8 <HAL_PCDEx_LPM_Callback+0x98>)
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	4a1b      	ldr	r2, [pc, #108]	; (800afd8 <HAL_PCDEx_LPM_Callback+0x98>)
 800af6a:	f023 0306 	bic.w	r3, r3, #6
 800af6e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	6812      	ldr	r2, [r2, #0]
 800af7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af82:	f023 0301 	bic.w	r3, r3, #1
 800af86:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fe faa8 	bl	80094e4 <USBD_LL_Resume>
    break;
 800af94:	e01c      	b.n	800afd0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	6812      	ldr	r2, [r2, #0]
 800afa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afa8:	f043 0301 	orr.w	r3, r3, #1
 800afac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fe fa7f 	bl	80094b8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d005      	beq.n	800afce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afc2:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <HAL_PCDEx_LPM_Callback+0x98>)
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	4a04      	ldr	r2, [pc, #16]	; (800afd8 <HAL_PCDEx_LPM_Callback+0x98>)
 800afc8:	f043 0306 	orr.w	r3, r3, #6
 800afcc:	6113      	str	r3, [r2, #16]
    break;
 800afce:	bf00      	nop
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	e000ed00 	.word	0xe000ed00

0800afdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800afe4:	4b03      	ldr	r3, [pc, #12]	; (800aff4 <USBD_static_malloc+0x18>)
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	20000e10 	.word	0x20000e10

0800aff8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]

}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	4603      	mov	r3, r0
 800b014:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b01a:	79fb      	ldrb	r3, [r7, #7]
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d817      	bhi.n	800b050 <USBD_Get_USB_Status+0x44>
 800b020:	a201      	add	r2, pc, #4	; (adr r2, 800b028 <USBD_Get_USB_Status+0x1c>)
 800b022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b026:	bf00      	nop
 800b028:	0800b039 	.word	0x0800b039
 800b02c:	0800b03f 	.word	0x0800b03f
 800b030:	0800b045 	.word	0x0800b045
 800b034:	0800b04b 	.word	0x0800b04b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]
    break;
 800b03c:	e00b      	b.n	800b056 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b03e:	2303      	movs	r3, #3
 800b040:	73fb      	strb	r3, [r7, #15]
    break;
 800b042:	e008      	b.n	800b056 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b044:	2301      	movs	r3, #1
 800b046:	73fb      	strb	r3, [r7, #15]
    break;
 800b048:	e005      	b.n	800b056 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	73fb      	strb	r3, [r7, #15]
    break;
 800b04e:	e002      	b.n	800b056 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b050:	2303      	movs	r3, #3
 800b052:	73fb      	strb	r3, [r7, #15]
    break;
 800b054:	bf00      	nop
  }
  return usb_status;
 800b056:	7bfb      	ldrb	r3, [r7, #15]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <__libc_init_array>:
 800b064:	b570      	push	{r4, r5, r6, lr}
 800b066:	4d0d      	ldr	r5, [pc, #52]	; (800b09c <__libc_init_array+0x38>)
 800b068:	4c0d      	ldr	r4, [pc, #52]	; (800b0a0 <__libc_init_array+0x3c>)
 800b06a:	1b64      	subs	r4, r4, r5
 800b06c:	10a4      	asrs	r4, r4, #2
 800b06e:	2600      	movs	r6, #0
 800b070:	42a6      	cmp	r6, r4
 800b072:	d109      	bne.n	800b088 <__libc_init_array+0x24>
 800b074:	4d0b      	ldr	r5, [pc, #44]	; (800b0a4 <__libc_init_array+0x40>)
 800b076:	4c0c      	ldr	r4, [pc, #48]	; (800b0a8 <__libc_init_array+0x44>)
 800b078:	f000 f820 	bl	800b0bc <_init>
 800b07c:	1b64      	subs	r4, r4, r5
 800b07e:	10a4      	asrs	r4, r4, #2
 800b080:	2600      	movs	r6, #0
 800b082:	42a6      	cmp	r6, r4
 800b084:	d105      	bne.n	800b092 <__libc_init_array+0x2e>
 800b086:	bd70      	pop	{r4, r5, r6, pc}
 800b088:	f855 3b04 	ldr.w	r3, [r5], #4
 800b08c:	4798      	blx	r3
 800b08e:	3601      	adds	r6, #1
 800b090:	e7ee      	b.n	800b070 <__libc_init_array+0xc>
 800b092:	f855 3b04 	ldr.w	r3, [r5], #4
 800b096:	4798      	blx	r3
 800b098:	3601      	adds	r6, #1
 800b09a:	e7f2      	b.n	800b082 <__libc_init_array+0x1e>
 800b09c:	0800b164 	.word	0x0800b164
 800b0a0:	0800b164 	.word	0x0800b164
 800b0a4:	0800b164 	.word	0x0800b164
 800b0a8:	0800b168 	.word	0x0800b168

0800b0ac <memset>:
 800b0ac:	4402      	add	r2, r0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d100      	bne.n	800b0b6 <memset+0xa>
 800b0b4:	4770      	bx	lr
 800b0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ba:	e7f9      	b.n	800b0b0 <memset+0x4>

0800b0bc <_init>:
 800b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0be:	bf00      	nop
 800b0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c2:	bc08      	pop	{r3}
 800b0c4:	469e      	mov	lr, r3
 800b0c6:	4770      	bx	lr

0800b0c8 <_fini>:
 800b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ca:	bf00      	nop
 800b0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ce:	bc08      	pop	{r3}
 800b0d0:	469e      	mov	lr, r3
 800b0d2:	4770      	bx	lr
